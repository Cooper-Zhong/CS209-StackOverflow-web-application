[
  {
    "owner": {
      "profile_image": "https://lh3.googleusercontent.com/a/AEdFTp4478YSJv9vEQUX9wANh4lw5adyLj42UY18aaxtcxo=k-s256",
      "account_id": 27771845,
      "user_type": "registered",
      "user_id": 21201998,
      "link": "https://stackoverflow.com/users/21201998/amn",
      "reputation": 3,
      "display_name": "aMn"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/75433400/why-synchronization-not-working-properly-with-while-extending-to-thread",
    "last_activity_date": 1676413077,
    "creation_date": 1676276491,
    "answer_count": 2,
    "title": "Why Synchronization not working properly with while extending to Thread?",
    "body": "<p>Currently, I'm studying &quot;synchronization&quot;, while I was doing an exercise on the synchronization method I couldn't able to get a proper output but when I'm trying the same exercise by implementing Runnable it's working fine. I don't know why it's happening like this. could anyone please help me out here?</p>\n<h2>By extending Thread</h2>\n<pre><code>public class ClassRoom extends Thread {\n    \n    \n    synchronized public void run() {\n        \n        \n        try {\n            \n        System.out.println(Thread.currentThread().getName() + &quot; enters class room&quot;);\n        \n            Thread.sleep(1000);\n        \n        System.out.println(Thread.currentThread().getName() + &quot; teaching students&quot;);\n        \n            Thread.sleep(1000);\n        \n        System.out.println(Thread.currentThread().getName() + &quot; exits class room&quot;);\n        \n        \n        } catch(InterruptedException ie) {\n            ie.getMessage();\n        }\n    }\n\n}\n</code></pre>\n<h2>By implementing Runnable</h2>\n<p><code>public class ClassRoom  implements Runnable {</code></p>\n<p>rest of the codes are same</p>\n<h2>Main method (by extending Thread)</h2>\n<pre><code>public class ClassRoomApp  {\n\n    public static void main(String[] args) throws InterruptedException {\n        \n\n        ClassRoom physics_class = new ClassRoom();\n        ClassRoom cs_class = new ClassRoom();\n        ClassRoom english_class = new ClassRoom();\n        \n        physics_class.setName(&quot;Physics teacher&quot;);\n        cs_class.setName(&quot;CS teacher&quot;);\n        english_class.setName(&quot;English teacher&quot;);\n        \n\n        physics_class.start();\n        cs_class.start();\n        english_class.start();\n        \n    }\n\n}\n</code></pre>\n<h2>Main method (by implementing Runnable)</h2>\n<pre><code>public class ClassRoomApp  {\n\n    public static void main(String[] args) throws InterruptedException {\n        \n        ClassRoom class_room = new ClassRoom();\n    \n        Thread t1 = new Thread(class_room);\n        Thread t2 = new Thread(class_room);\n        Thread t3 = new Thread(class_room);\n            \n        t1.setName(&quot;Physics teacher&quot;);\n        t2.setName(&quot;CS teacher&quot;);\n        t3.setName(&quot;English teacher&quot;);\n    \n        t1.start();\n        t2.start();\n        t3.start();\n        \n    }\n\n}\n\n</code></pre>\n<h2>These are the outputs im getting :</h2>\n<p>While implementing Runnable :</p>\n<p>Physics teacher enters class room <br>\nPhysics teacher teaching students <br>\nPhysics teacher exits class room <br>\nEnglish teacher enters class room <br>\nEnglish teacher teaching students <br>\nEnglish teacher exits class room <br>\nCS teacher enters class room <br>\nCS teacher teaching students <br>\nCS teacher exits class room <br></p>\n<p>While extending Thread :</p>\n<p>Physics teacher enters class room <br>\nEnglish teacher enters class room <br>\nCS teacher enters class room <br>\nEnglish teacher teaching students <br>\nPhysics teacher teaching students <br>\nCS teacher teaching students <br>\nEnglish teacher exits class room <br>\nCS teacher exits class room <br>\nPhysics teacher exits class room <br></p>\n<p>I've tried removing the Thread.sleep() from the Thread extended class then it sometimes working sometimes not woring.</p>\n<p>These are the outputs :</p>\n<h2>first try :</h2>\n<p>CS teacher enters class room <br>\nPhysics teacher enters class room <br>\nPhysics teacher teaching students <br>\nEnglish teacher enters class room <br>\nPhysics teacher exits class room <br>\nCS teacher teaching students <br>\nEnglish teacher teaching students <br>\nCS teacher exits class room <br>\nEnglish teacher exits class room <br></p>\n<h2>second try : (works)</h2>\n<p>Physics teacher enters class room <br>\nPhysics teacher teaching students <br>\nPhysics teacher exits class room <br>\nEnglish teacher enters class room <br>\nEnglish teacher teaching students <br>\nEnglish teacher exits class room  <br>\nCS teacher enters class room <br>\nCS teacher teaching students <br>\nCS teacher exits class room <br></p>\n",
    "question_id": 75433400,
    "tags": [
      "java",
      "multithreading",
      "synchronization",
      "sleep",
      "runnable"
    ],
    "score": 0,
    "accepted_answer_id": 75433733,
    "is_answered": true,
    "view_count": 62,
    "last_edit_date": 1676276846
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/a8397ff2192e8da580a986bc316794da?s=256&d=identicon&r=PG",
      "account_id": 2526737,
      "user_type": "registered",
      "user_id": 2195963,
      "link": "https://stackoverflow.com/users/2195963/awani",
      "reputation": 394,
      "display_name": "Awani",
      "accept_rate": 67
    },
    "content_license": "CC BY-SA 3.0",
    "link": "https://stackoverflow.com/questions/26798073/difference-between-wait-and-yield",
    "last_activity_date": 1676292635,
    "creation_date": 1415352611,
    "answer_count": 4,
    "title": "difference between wait() and yield()",
    "body": "<p>So far what I have understood about wait() and yield () methods is that yield() is called when the thread is not carrying out any task and lets the CPU execute some other thread. wait() is used when some thread is put on hold and usually used in the concept of synchronization. However, I fail to understand the difference in their functionality and i'm not sure if what I have understood is right or wrong. Can someone please explain the difference between them(apart from the package they are present in).</p>\n",
    "question_id": 26798073,
    "tags": [
      "java",
      "multithreading"
    ],
    "score": 9,
    "accepted_answer_id": 26803040,
    "is_answered": true,
    "view_count": 16967,
    "last_edit_date": 1415354842
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/13b795c9e892a69081296d7c2a08a77f?s=256&d=identicon&r=PG",
      "account_id": 3216824,
      "user_type": "registered",
      "user_id": 2715285,
      "link": "https://stackoverflow.com/users/2715285/yordan-boev",
      "reputation": 311,
      "display_name": "Yordan Boev"
    },
    "content_license": "CC BY-SA 3.0",
    "link": "https://stackoverflow.com/questions/38570732/jersey-2-x-leaking-memory-finalizer-with-simple-post-call-multithreaded",
    "last_activity_date": 1676279114,
    "creation_date": 1469457637,
    "answer_count": 2,
    "title": "Jersey 2.x leaking memory (Finalizer) with simple POST call (Multithreaded)",
    "body": "<p>The following simple Jersey call is leaking Objects into the Finalizer queue:\n    <code></p>\n\n<pre>public boolean startExperiment(Experiment experiment) {\n        final Client client = ClientBuilder.newClient();\n        Response response = null;\n        RunDescriptor runDescr = experiment.getRunDescriptor();\n        try {\n            final WebTarget webTarget = client.target(ExperimentController.getInstance().getRunnerUrl()).path(\"runs\").path(\"startNewAsyncrun\");\n            response = webTarget.request().post(Entity.entity(runDescr, MediaType.APPLICATION_JSON));\n            if (response != null &amp;&amp; response.getStatusInfo().getStatusCode() != Status.CREATED.getStatusCode()) {\n                System.out.println(\"Error, Run not created! Response Info: \" + response.getStatusInfo());\n                return false;\n            } else {\n                return true;\n            }\n        } finally {\n            if(response != null) {\n                response.close();\n            }\n            client.close();\n        }\n\n    }\n</code></pre>\n\n<p>Jersey versions with which I tested: 2.18, 2.20, 2.22.2, 2.23.1. The code is run from multiple threads (each thread running it once every minute, for example). Also closing Response and Client should not be necessary, added it jsut in case to test if it would help.\nEclipse MAT shows Finalizer queue to be growing with Objects of type: </p>\n\n<ul>\n<li>sun.security.ssl.SSLSocketImplementation</li>\n<li>java.io.FileInputStream</li>\n<li>sun.net.www.protocol.https.DelegateHttpsURLConnection</li>\n<li>org.glassfish.jersey.client.ClientRuntime</li>\n<li>ZipFileInflaterInputStream</li>\n</ul>\n\n<p>Any help or thoughts on the matter is really appreciated!</p>\n",
    "question_id": 38570732,
    "tags": [
      "java",
      "multithreading",
      "memory-leaks",
      "jersey-2.0"
    ],
    "score": 0,
    "is_answered": true,
    "view_count": 1106
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/2dbd48d7460f4e598ad5142d154055e9?s=256&d=identicon&r=PG",
      "account_id": 2898508,
      "user_type": "registered",
      "user_id": 2485774,
      "link": "https://stackoverflow.com/users/2485774/chazz1",
      "reputation": 133,
      "display_name": "Chazz1",
      "accept_rate": 87
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/73220654/re-execute-callable-if-it-fails",
    "last_activity_date": 1676206037,
    "creation_date": 1659524779,
    "answer_count": 1,
    "title": "Re-execute Callable if it fails",
    "body": "<p>Having an ExecutorService that executes a Callable that is supposed to be always running, what is the best implementation to relaunch it when an error happens?</p>\n<p>Currently my source code looks something like this:</p>\n<pre><code>Future&lt;Void&gt; future = executorService.submit(new AlwaysOnlineCallable(config));\n     try {\n          future.get();\n     } catch (Exception e) {\n          //TODO thinking on execcuting the callable here\n          e.printStackTrace();\n     }\n</code></pre>\n<p>For what I've seen, cases like this are generally treated with runables.</p>\n",
    "question_id": 73220654,
    "tags": [
      "java",
      "multithreading",
      "executorservice",
      "callable"
    ],
    "score": 0,
    "is_answered": true,
    "view_count": 131,
    "last_edit_date": 1676206037
  },
  {
    "owner": {
      "profile_image": "https://i.stack.imgur.com/f4hTe.jpg?s=256&g=1",
      "account_id": 13723126,
      "user_type": "registered",
      "user_id": 9902575,
      "link": "https://stackoverflow.com/users/9902575/david-studer",
      "reputation": 105,
      "display_name": "David Studer"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/51055780/java-main-class-thread-does-not-terminate-anymore-using-java-multithreading",
    "last_activity_date": 1676180084,
    "creation_date": 1530080359,
    "answer_count": 2,
    "title": "Java Main Class Thread does not terminate anymore using Java multithreading",
    "body": "<p>I created my own thread class implementing the <code>Runnable</code> interface. But every time I start running my own thread class as a new thread, the main class thread does not terminate anymore by itself. Is this just an issue within Eclipse or would I also have problem running this on a Server? Do I have to change something calling the thread so that the main method can terminate properly? </p>\n\n<hr>\n\n<p>Here's my basic self-made thread:</p>\n\n<pre><code>public class OwnThread implements Runnable {\n   @Override\n   public void run() {\n      //do something\n   }\n} \n</code></pre>\n\n<p>Here's the main class that won't terminate anymore:</p>\n\n<pre><code>public static void main(String[] args) {    \n   Thread thread = new Thread(new OwnThread());\n   thread.start();\n}\n</code></pre>\n\n<p>When I debug it, the last called method is the <code>exit()</code>-method of the <code>Thread</code>-class. After going through these lines of code, the process goes on forever:</p>\n\n<pre><code>/**\n * This method is called by the system to give a Thread\n * a chance to clean up before it actually exits.\n */\nprivate void exit() {\n   if (group != null) {\n      group.threadTerminated(this);\n      group = null;\n   }\n   /* Aggressively null out all reference fields: see bug 4006245 */\n   target = null;\n   /* Speed the release of some of these resources */\n   threadLocals = null;\n   inheritableThreadLocals = null;\n   inheritedAccessControlContext = null;\n   blocker = null;\n   uncaughtExceptionHandler = null;\n}\n</code></pre>\n\n<hr>\n\n<p>Here's a screenshot of the thread that is running forever. The <code>TestInterface</code> class is where the <code>main</code>-method is located:</p>\n\n<p><a href=\"https://i.stack.imgur.com/XvYF1.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/XvYF1.png\" alt=\"Thread running on forever\"></a></p>\n",
    "question_id": 51055780,
    "tags": [
      "java",
      "multithreading"
    ],
    "score": 2,
    "accepted_answer_id": 51083358,
    "is_answered": true,
    "view_count": 1804,
    "last_edit_date": 1676180084
  },
  {
    "owner": {
      "profile_image": "https://i.stack.imgur.com/z7Bck.jpg?s=256&g=1",
      "account_id": 13566844,
      "user_type": "registered",
      "user_id": 9786749,
      "link": "https://stackoverflow.com/users/9786749/un0tec",
      "reputation": 180,
      "display_name": "un0tec"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/55227133/why-do-these-threads-read-the-entire-file-instead-of-maxitemcounter",
    "last_activity_date": 1676135847,
    "creation_date": 1552930808,
    "answer_count": 1,
    "title": "Why do these threads read the entire file instead of maxitemcounter?",
    "body": "<p>I'm doing a process with Spring Batch multi-thread. My process receives a large txt file (&gt; 100k lines). I want each thread to process X lines of the file and do X process with the information to gain time.</p>\n<p>I am using the FlatFileItemRead class passing the initial and final line to each thread. I'm doing tests with 19k lines, 3 and 4 threads and I cannot see why the first thread if it starts and stops in the correct line, but the rest of threads start in the correct line but not end in the correct one, read the file until the end.</p>\n<p>I have read many questions about this topic and about the FlatFileItemReader class, it is not thread-safe. I think my problem is here, but I pass saveState to false and I indicate the lines to each thread. (See <a href=\"https://stackoverflow.com/questions/42270806/using-flatfileitemreader-with-a-taskexecutor-thread-safety\">this</a>).</p>\n<p>These are the XML configuration files and the RangePartition file (Steps setTiempoInicial and stTiempoFinal only print the initial and total time):</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:batch=&quot;http://www.springframework.org/schema/batch&quot;\n    xmlns:p=&quot;http://www.springframework.org/schema/p&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;\n    xmlns:util=&quot;http://www.springframework.org/schema/beans&quot;\n    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.1.xsd\n        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd\n        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;&gt;\n\n    &lt;batch:job id=&quot;superTxtTest&quot;&gt;\n\n        &lt;batch:step id=&quot;setTiempoInicial&quot; next=&quot;validacionDePers&quot;&gt;\n            &lt;batch:tasklet transaction-manager=&quot;transactionManager&quot;\n                start-limit=&quot;1&quot;&gt;\n                &lt;batch:chunk reader=&quot;tiempoInicialReader&quot; writer=&quot;tiempoInicialWriter&quot;\n                    commit-interval=&quot;1&quot; skip-limit=&quot;1&quot;&gt;\n                    &lt;batch:skippable-exception-classes&gt;\n                        &lt;batch:include\n                            class=&quot;com.testpartitionfile.batch.PersException&quot; /&gt;\n                    &lt;/batch:skippable-exception-classes&gt;\n                &lt;/batch:chunk&gt;\n            &lt;/batch:tasklet&gt;\n            &lt;batch:listeners&gt;\n                &lt;batch:listener ref=&quot;promotionListener&quot; /&gt;\n            &lt;/batch:listeners&gt;\n        &lt;/batch:step&gt;\n\n        &lt;batch:step id=&quot;validacionDePers&quot; next=&quot;setTiempoFinal&quot;&gt;\n            &lt;partition step=&quot;validacionDePersSlave&quot; partitioner=&quot;rangePartitioner&quot;&gt;\n                &lt;handler grid-size=&quot;3&quot; task-executor=&quot;taskExecutor&quot; /&gt;\n            &lt;/partition&gt;\n        &lt;/batch:step&gt;\n\n        &lt;batch:step id=&quot;setTiempoFinal&quot;&gt;\n            &lt;batch:tasklet transaction-manager=&quot;transactionManager&quot;\n                start-limit=&quot;1&quot;&gt;\n                &lt;batch:chunk reader=&quot;tiempoFinalReader&quot; writer=&quot;tiempoFinalWriter&quot;\n                    commit-interval=&quot;1&quot; skip-limit=&quot;1&quot;&gt;\n                    &lt;batch:skippable-exception-classes&gt;\n                        &lt;batch:include\n                            class=&quot;com.testpartitionfile.batch.PersException&quot; /&gt;\n                    &lt;/batch:skippable-exception-classes&gt;\n                &lt;/batch:chunk&gt;\n            &lt;/batch:tasklet&gt;\n        &lt;/batch:step&gt;\n\n    &lt;/batch:job&gt;\n\n    &lt;batch:step id=&quot;validacionDePersSlave&quot;&gt;\n        &lt;batch:tasklet transaction-manager=&quot;transactionManager&quot;\n            start-limit=&quot;1&quot;&gt;\n            &lt;batch:chunk reader=&quot;tratamientoPersReader&quot; writer=&quot;validacionPersWriter&quot;\n                commit-interval=&quot;1&quot; skip-limit=&quot;1&quot;&gt;\n                &lt;batch:skippable-exception-classes&gt;\n                    &lt;batch:include\n                        class=&quot;com.testpartitionfile.batch.PersException&quot; /&gt;\n                &lt;/batch:skippable-exception-classes&gt;\n            &lt;/batch:chunk&gt;\n        &lt;/batch:tasklet&gt;\n    &lt;/batch:step&gt;\n\n    &lt;bean id=&quot;promotionListener&quot;\n        class=&quot;org.springframework.batch.core.listener.ExecutionContextPromotionListener&quot;&gt;\n        &lt;property name=&quot;keys&quot; value=&quot;tiempoInicial&quot; /&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=&quot;validacionPersWriter&quot;\n        class=&quot;com.testpartitionfile.batch.writer.ValidacionPersWriter&quot;\n        scope=&quot;step&quot;&gt;\n        &lt;property name=&quot;threadName&quot; value=&quot;#{stepExecutionContext[name]}&quot; /&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=&quot;taskExecutor&quot; class=&quot;org.springframework.core.task.SimpleAsyncTaskExecutor&quot; /&gt;\n    &lt;bean id=&quot;rangePartitioner&quot;\n        class=&quot;com.testpartitionfile.batch.partitioner.RangePartitioner&quot; /&gt;\n\n    &lt;bean id=&quot;tratamientoPersReader&quot; class=&quot;org.springframework.batch.item.file.FlatFileItemReader&quot;\n        scope=&quot;step&quot;&gt;\n        &lt;property name=&quot;resource&quot;\n            value=&quot;file:C:\\Users\\user\\Desktop\\testFile.txt&quot; /&gt;\n        &lt;property name=&quot;encoding&quot; value=&quot;utf8&quot; /&gt;\n        &lt;property name=&quot;lineMapper&quot; ref=&quot;ficheroPersMapper&quot; /&gt;\n        &lt;property name=&quot;linesToSkip&quot; value=&quot;#{stepExecutionContext[fromId]}&quot; /&gt;\n        &lt;property name=&quot;maxItemCount&quot; value=&quot;#{stepExecutionContext[toId]}&quot; /&gt;\n        &lt;property name=&quot;saveState&quot; value=&quot;false&quot; /&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=&quot;ficheroPersMapper&quot;\n        class=&quot;org.springframework.batch.item.file.mapping.DefaultLineMapper&quot;&gt;\n        &lt;property name=&quot;fieldSetMapper&quot; ref=&quot;ficheroPersSetMapper&quot; /&gt;\n        &lt;property name=&quot;lineTokenizer&quot;&gt;\n            &lt;bean\n                class=&quot;org.springframework.batch.item.file.transform.DelimitedLineTokenizer&quot;&gt;\n                &lt;property name=&quot;delimiter&quot; value=&quot;;&quot; /&gt;\n                &lt;property name=&quot;names&quot;\n                    value=&quot;a,b,c,d,e,f,g,h,i,j&quot; /&gt;\n            &lt;/bean&gt;\n        &lt;/property&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=&quot;ficheroPersSetMapper&quot;\n        class=&quot;org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper&quot;&gt;\n        &lt;property name=&quot;prototypeBeanName&quot; value=&quot;fichero&quot; /&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=&quot;fichero&quot; class=&quot;com.testpartitionfile.batch.dto.Fichero&quot;\n        scope=&quot;prototype&quot; /&gt;\n\n&lt;/beans&gt;\n</code></pre>\n<p>RangePartitioner:</p>\n<pre><code>public class RangePartitioner implements Partitioner {\n\n    @Override\n    public Map&lt;String, ExecutionContext&gt; partition(int gridSize) {\n\n        Map&lt;String, ExecutionContext&gt; result = new HashMap&lt;String, ExecutionContext&gt;();\n\n        int range = 1;\n        \n        InputStream is = null;\n        try {\n            is = new BufferedInputStream(new FileInputStream(&quot;C:\\\\Users\\\\user\\\\Desktop\\\\testFile.txt&quot;));\n            byte[] c = new byte[1024];\n            int count = 0;\n            int readChars = 0;\n            while ((readChars = is.read(c)) != -1) {\n                for (int i = 0; i &lt; readChars; ++i) {\n                    if (c[i] == '\\n') {\n                        ++count;\n                    }\n                }\n            }\n            if (count != 0) {\n                range = (count/gridSize);\n            }\n        } catch (Exception e){\n            try {\n                is.close();\n            } catch (Exception e1) {\n            }\n        } \n        \n        int fromId = 1;\n        int toId = range;\n\n        for (int i = 1; i &lt;= gridSize; i++) {\n            ExecutionContext value = new ExecutionContext();\n\n            System.out.println(&quot;\\nHilo : &quot; + i);\n            System.out.println(&quot;Index Inicial : &quot; + fromId);\n            System.out.println(&quot;Index Final : &quot; + toId + &quot;\\n&quot;);\n\n            value.putInt(&quot;fromId&quot;, fromId - 1);\n            value.putInt(&quot;toId&quot;, toId);\n\n            // give each thread a name, thread 1,2,3\n            value.putString(&quot;name&quot;, &quot;Hilo &quot; + i);\n\n            result.put(&quot;partition&quot; + i, value);\n\n            fromId = toId + 1;\n            toId += range;\n            if (i == gridSize - 1) toId = toId + 1;\n\n        }\n\n        return result;\n    }\n\n}\n</code></pre>\n<p>Initial Log with 3 threads:</p>\n<pre><code>Thread: 1\nInitial Index: 1\nFinal Index: 6333\n\n\nThread: 2\nIndex Initial: 6334\nFinal Index: 12666\n\n\nThread: 3\nIndex Initial: 12667\nFinal Index: 19000 \n</code></pre>\n<p><strong>Case 1:</strong></p>\n<p>Thread 1 reads up to 6333. Thread 2 reads up to 19000 instead of reading up to 12666 and thread 3 reads up to 19000.</p>\n<p><strong>Case 2:</strong></p>\n<p>With 4 threads the threads 2 and 3 read up to 19000.</p>\n<p>Why thread 2 in case 1 and threads 2 and 3 in case 2 read from initial line (correct) to the end (incorrect)?</p>\n<p><strong>Update 25/07/2021</strong></p>\n<p>Issue is open in: <a href=\"https://github.com/spring-projects/spring-batch/issues/805\" rel=\"nofollow noreferrer\">https://github.com/spring-projects/spring-batch/issues/805</a></p>\n",
    "question_id": 55227133,
    "tags": [
      "java",
      "spring",
      "multithreading",
      "spring-batch"
    ],
    "score": 0,
    "is_answered": false,
    "view_count": 287,
    "last_edit_date": 1627173668
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/add6146aeae299f7241d7733b850e717?s=256&d=identicon&r=PG",
      "account_id": 347517,
      "user_type": "registered",
      "user_id": 681671,
      "link": "https://stackoverflow.com/users/681671/dojo",
      "reputation": 5454,
      "display_name": "Dojo",
      "accept_rate": 59
    },
    "content_license": "CC BY-SA 2.5",
    "link": "https://stackoverflow.com/questions/5532864/thread-setnamename-caveats",
    "last_activity_date": 1676124875,
    "creation_date": 1301868387,
    "answer_count": 3,
    "title": "Thread.setName(name) caveats",
    "body": "<p>I have a multi threaded client server application which uses Sockets. When a new connection is found, further execution is transferred to a new thread using the new Executors thread pool.</p>\n\n<p>I want to log the client id in all logging statements for that client. The problem is that I don't want to modify method signatures just to pass the client id. </p>\n\n<p>The solutions that I thought of are:</p>\n\n<ol>\n<li>Using ThreadLocal to hold client value. </li>\n<li>In run(), I can set the client id into Thread using Thread.currentThread().setName(clientId);</li>\n</ol>\n\n<p>First one should work. But I like second option because \na. I can find the client id from the debugger\nb. The logger library can be configured to show thread name. So no changes would be required to the log statements and it would also work for loggers inside libraries.</p>\n\n<p>What are the caveats for using thread.setName() apart from those mentioned in the javadoc? How does it affect performance? The peak frequency of calling thread.setName() would be about 200 per second and average about 0.3 per second.</p>\n",
    "question_id": 5532864,
    "tags": [
      "java",
      "multithreading",
      "thread-safety",
      "threadpool"
    ],
    "score": 9,
    "accepted_answer_id": 5533107,
    "is_answered": true,
    "view_count": 5580,
    "last_edit_date": 1301868515
  },
  {
    "owner": {
      "profile_image": "https://i.stack.imgur.com/W6OMC.png?s=256&g=1",
      "account_id": 1056871,
      "user_type": "registered",
      "user_id": 1059372,
      "link": "https://stackoverflow.com/users/1059372/eugene",
      "reputation": 117749,
      "display_name": "Eugene",
      "accept_rate": 97
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/67825678/concurrenthashmap-read-update-only-via-compute-method",
    "last_activity_date": 1676025693,
    "creation_date": 1622739462,
    "answer_count": 2,
    "title": "ConcurrentHashMap read/update only via compute method",
    "body": "<p>This is basically a continuation of <a href=\"https://stackoverflow.com/questions/67795988/atomic-updates-of-values-in-concurrent-hash-map-how-to\">this</a> or <a href=\"https://stackoverflow.com/questions/52577524/java-concurrenthashmap-computeifpresent-value-modification-visibility\">this</a>, or many others in that regard.</p>\n<p>My question is probably simple, if I use <code>ConcurrentHashMap::compute</code> <em>only</em>, in both readers and writers of some value, is that enough to ensure <em>visibility</em>?</p>\n<p>I do know that <code>compute</code> method:</p>\n<blockquote>\n<p>The entire method invocation is performed atomically</p>\n</blockquote>\n<p>Is that enough to guarantee <em>visibility</em>? Specifically, is that true specification/documentation wise with regards to <code>happens-before</code>? To simplify my question, here is an example:</p>\n<pre><code>static class State {\n    private int age;\n\n    int getAge() {\n        return age;\n    }\n\n    State setAge(int age) {\n        this.age = age;\n        return this;\n    }\n} \n</code></pre>\n<p>and :</p>\n<pre><code>// very simplified, no checks\nstatic class Holder {\n\n    private static final ConcurrentHashMap&lt;String, State&gt; CHM = new ConcurrentHashMap&lt;&gt;();\n\n    public State read(String key) {\n        return CHM.compute(key, (x, y) -&gt; y);\n    }\n\n    public State write(String key, int age) {\n        return CHM.compute(key, (x, y) -&gt; y.setAge(y.getAge() + age));\n    }\n}\n</code></pre>\n<p>No one has access to <code>CHM</code> and can only work via <code>Holder</code>.</p>\n<p>To me the answer is obviously yes, this is safe and all readers will see the result of the latest <code>write</code> method. I just can't connect the dots with the documentation of <code>ConcurrentHashMap</code>, which is most probably obvious, but I seem to miss it.</p>\n",
    "question_id": 67825678,
    "tags": [
      "java",
      "multithreading",
      "concurrenthashmap",
      "happens-before"
    ],
    "score": 1,
    "is_answered": true,
    "view_count": 588,
    "last_edit_date": 1622739818
  },
  {
    "owner": {
      "profile_image": "https://graph.facebook.com/2224058381009628/picture?type=large",
      "account_id": 16040627,
      "user_type": "registered",
      "user_id": 11577121,
      "link": "https://stackoverflow.com/users/11577121/marco-jacobo",
      "reputation": 31,
      "display_name": "Marco Jacobo"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/75389536/how-to-force-progressbar-get-visible-just-before-a-background-thread-starts-its",
    "last_activity_date": 1675969881,
    "creation_date": 1675877127,
    "answer_count": 1,
    "title": "How to force progressbar get visible just before a background thread starts its execution?",
    "body": "<p>I think this is a very simple question for many people in this community, however, I can't make this to work after several experiments; I would appreciate any help.</p>\n<p>It is JAVA-android platform: The code needs to execute the next steps when the user clicks a button:</p>\n<ol>\n<li><p>Make invisible the button      (run in main thread)</p>\n</li>\n<li><p>Make visible a progress bar    (run in main thread)</p>\n</li>\n<li><p>Download a file from internet  (run in background thread)</p>\n</li>\n<li><p>Wait the download is completed</p>\n</li>\n<li><p>Make invisible the progress bar</p>\n</li>\n<li><p>Make visible again the button</p>\n</li>\n</ol>\n<p>That's it. It doesn't seem to be very difficult, however, it is not working as I need it.</p>\n<p>This is the issue:\nStep 3 get executed before steps 1 and 2, ... I have tried several experiments with not success.</p>\n<pre><code>private void f1()\n{\n    mDataBinding.btnPausePlay.setVisibility(btnVisibility);                    \n    mDataBinding.progressPausePlay.setVisibility(progressVisibility);\n}\n\nprivate void f2()\n{\n        Thread xThread = new Thread( new Runnable()\n        {   @Override\n            public void run()                            // run in background thread\n            { httpRequest_noBackgroundThread( urlStr, urlParams, fileStr, itf );  }\n        });\n        try\n        {\n            xThread.start();\n            xThread.join();     // wait for the thread to finish\n        }\n           catch( Exception e ){   e.printStackTrace();  }\n}\n\n\nprivate void f3()\n{\n        f1();\n        f2();\n       // continues execution ...\n}\n</code></pre>\n<p>###########################################################</p>\n<h1>Based on Shagun Verma's feedback; It was the fix for my specific issue. Thank you!</h1>\n<pre><code>private void f3()\n{\n    ExecutorService executorService = Executors.newSingleThreadExecutor();\n    executorService.execute(() -&gt;\n    {       \n        f1();\n        f2();\n       // continues execution ...\n\n    });\n}\n</code></pre>\n",
    "question_id": 75389536,
    "tags": [
      "java",
      "android",
      "multithreading",
      "concurrency"
    ],
    "score": 0,
    "accepted_answer_id": 75393592,
    "is_answered": true,
    "view_count": 64,
    "last_edit_date": 1675969881
  },
  {
    "owner": {
      "profile_image": "https://i.stack.imgur.com/cMTdX.png?s=256&g=1",
      "account_id": 3986910,
      "user_type": "registered",
      "user_id": 3287204,
      "link": "https://stackoverflow.com/users/3287204/yash-sampat",
      "reputation": 30181,
      "display_name": "Yash Sampat",
      "accept_rate": 56
    },
    "content_license": "CC BY-SA 3.0",
    "link": "https://stackoverflow.com/questions/37437037/android-prevent-white-screen-at-startup",
    "last_activity_date": 1675934785,
    "creation_date": 1464179021,
    "answer_count": 18,
    "title": "Android - Prevent white screen at startup",
    "body": "<p>As we all know, many Android apps display a white screen very briefly before their first <code>Activity</code> comes into focus. This problem is observed in the following cases:</p>\n\n<ul>\n<li><p>Android apps that extend the global <a href=\"https://developer.android.com/reference/android/app/Application.html\" rel=\"noreferrer\"><code>Application</code></a> class and\nperform major initializations therein. The <code>Application</code>\nobject is always created before the first <code>Activity</code> (a fact that can\nbe observed in the debugger), so this makes sense. This is the cause of the delay in my case.</p></li>\n<li><p>Android apps that display the default preview window before the splash screen.</p></li>\n</ul>\n\n<p>Setting <code>android:windowDisablePreview = \"true\"</code> obviously does not work here. Nor can I set the parent theme of the splash screen to <code>Theme.Holo.NoActionBar</code> as described <a href=\"http://cyrilmottier.com/2013/01/23/android-app-launching-made-gorgeous/\" rel=\"noreferrer\">here</a>, because [unfortunately] my splash screen makes use of an <code>ActionBar</code>.</p>\n\n<p>Meanwhile, apps that do not extend the <code>Application</code> class <strong><em>do not</em></strong> show the white screen at startup.</p>\n\n<p>The thing is, ideally the initializations performed in the <code>Application</code> object need to occur <em>before</em> the first <code>Activity</code> is shown. So my question is, how can I perform these initializations on app startup <em>without</em> using an <code>Application</code> object? Possibly using a <code>Thread</code> or <code>Service</code>, I suppose?</p>\n\n<p>This is an interesting problem to think about. I can't bypass it the usual way (by setting the <code>NoActionBar</code> theme), as tragically my Splash screen actually has an <code>ActionBar</code> due to some unrelated reasons.</p>\n\n<p><strong>Note:</strong></p>\n\n<p>I have already referred to the following questions:</p>\n\n<ul>\n<li><p><a href=\"https://stackoverflow.com/q/20546703\"><strong>How To fix white screen on app Start\nup?</strong></a></p></li>\n<li><p><a href=\"https://stackoverflow.com/q/17181455\"><strong>Android splash screen is white in the\nbeginning?</strong></a></p></li>\n<li><p><a href=\"https://stackoverflow.com/q/15067615\"><strong>White screen before\nsplashscreen</strong></a></p></li>\n<li><p><a href=\"https://stackoverflow.com/q/19738879\"><strong>White background when Android app start up</strong></a></p></li>\n<li><p><a href=\"https://stackoverflow.com/q/12613217\"><strong>Why there is a white screen appears for 1sec when starting to run the apps in Android?</strong></a></p></li>\n</ul>\n\n<p><strong>References:</strong></p>\n\n<ul>\n<li><p><a href=\"https://www.google.com/design/spec/patterns/launch-screens.html\" rel=\"noreferrer\"><strong>Patterns – Launch screens</strong></a>.</p></li>\n<li><p><a href=\"http://antonioleiva.com/branded-launch-screen/\" rel=\"noreferrer\"><strong>Branded launch screen: the new splash for Android</strong></a>.</p></li>\n<li><p><a href=\"https://www.bignerdranch.com/blog/splash-screens-the-right-way/\" rel=\"noreferrer\"><strong>Splash Screens the Right Way</strong></a>.</p></li>\n</ul>\n",
    "question_id": 37437037,
    "tags": [
      "java",
      "android",
      "multithreading",
      "performance",
      "cold-start"
    ],
    "score": 149,
    "accepted_answer_id": 37679026,
    "is_answered": true,
    "view_count": 120355,
    "last_edit_date": 1495540046
  },
  {
    "owner": {
      "profile_image": "https://i.stack.imgur.com/tZ4EC.jpg?s=256&g=1",
      "account_id": 7642693,
      "user_type": "registered",
      "user_id": 5794313,
      "link": "https://stackoverflow.com/users/5794313/sync-it",
      "reputation": 1180,
      "display_name": "Sync it"
    },
    "closed_date": 1665138250,
    "link": "https://stackoverflow.com/questions/73977101/understanding-memory-order-seq-cst-in-java",
    "last_activity_date": 1665073541,
    "creation_date": 1665073171,
    "answer_count": 0,
    "title": "Understanding memory_order_seq_cst in java",
    "body": "<p>Most blogsites like <a href=\"https://www.sobyte.net/post/2022-06/cpp-memory-order/#:%7E:text=Memory%20Order%20in%20C%2B%2B%201%201.%20Atomic%20variables,Modification%20orders%20...%203%203.%20Memory%20order%20\" rel=\"nofollow noreferrer\">this</a> one for example when explaining about memory_order_seq_cst always talks about this example</p>\n<pre><code>std::atomic&lt;bool&gt; x{false}, y{false};\nstd::atomic&lt;int&gt; z{0};\n\nvoid thread1() {\n x.store(true, std::memory_order_seq_cst); // (1)\n}\n\nvoid thread2() {\n y.store(true, std::memory_order_seq_cst); // (2)\n}\n\n\nvoid read_x_then_y() {\n    while (!x.load(std::memory_order_seq_cst)); // (3)\n    if (y.load(std::memory_order_seq_cst)) ++z; // (4)\n}\n\nvoid read_y_then_x() {\n    while (!y.load(std::memory_order_seq_cst)); // (5)\n    if (x.load(std::memory_order_seq_cst)) ++z; // (6)\n}\n\nint main() \n{\n std::thread a(thread1), b(thread2), c(read_x_then_y), d(read_y_then_x);\n a.join(), b.join(), c.join(), d.join();\n assert(z.load() != 0); // (7)\n}\n</code></pre>\n<p>When translating this into java code i get this</p>\n<pre><code> public static void main(String[] args)throws Exception\n {\n  AtomicBoolean \n  x=new AtomicBoolean(false),\n  y=new AtomicBoolean(false);\n  AtomicInteger z=new AtomicInteger(0);\n  \n  while(true)\n  {\n   z.set(0);\n   \n   Thread t1=new Thread(()-&gt;x.set(true));\n   \n   Thread t2=new Thread(()-&gt;y.set(true));\n   \n   Thread t3=new Thread(()-&gt;\n   {\n    while(!x.get()){}\n    if(y.get()){z.incrementAndGet();}\n   });\n   \n   Thread t4=new Thread(()-&gt;\n   {\n    while(!y.get()){}\n    if(x.get()){z.incrementAndGet();}\n   });\n   \n   t1.start();\n   t2.start();\n   t3.start();\n   t4.start();\n   \n   t1.join();\n   t2.join();\n   t3.join();\n   t4.join();\n   \n   assert(z.get()!=0);\n  }\n }\n</code></pre>\n<p>The whileloop is used to generate infinite test cases to see if the assert fails at any point and the <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/concurrent/atomic/AtomicInteger.html#set(int)\" rel=\"nofollow noreferrer\">set()</a> from the documentation has similar memory effects to <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/invoke/VarHandle.html#setVolatile(java.lang.Object...)\" rel=\"nofollow noreferrer\">setVolatile()</a> which if we read from the API note has memory effects like memory_order_seq_cst</p>\n<p>This example works but i fell is deceptive because it does not explain how memory_order_seq_cst ensures the assertion is always true. The program itself appears to be written in such a way that regardless of what memory_order method you use to load/store</p>\n<pre><code>set(),setPlain(),setOpaque(),setRelease()\nget(),getPlain(),getOpaque(),getAquire()\n</code></pre>\n<p>the assertion always succeeds and it never fails so how exactly does memory_order_seq  play a unique role in this example?</p>\n",
    "question_id": 73977101,
    "tags": [
      "java",
      "multithreading",
      "atomic",
      "memory-barriers"
    ],
    "score": 0,
    "closed_reason": "Duplicate",
    "is_answered": false,
    "view_count": 31,
    "last_edit_date": 1665073541
  },
  {
    "owner": {
      "profile_image": "https://lh3.googleusercontent.com/a/ALm5wu1RNyCKNLitd3s_Cqyh_-XMWgd1S1zzPXsmpmPslw=k-s256",
      "account_id": 26498771,
      "user_type": "registered",
      "user_id": 20136046,
      "link": "https://stackoverflow.com/users/20136046/cecil",
      "reputation": 21,
      "display_name": "Cecil"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/73968499/execute-a-block-of-code-after-certain-time-in-java",
    "last_activity_date": 1665068370,
    "creation_date": 1665028197,
    "answer_count": 2,
    "title": "Execute a block of code after certain time in Java",
    "body": "<p>I would like to execute a block of code in a thread after a mount of time.</p>\n<p>In the thread:</p>\n<pre><code>public void run() {\n    System.out.println(&quot;it is running&quot;);\n    while (true) {\n        if (System.currentTimeMillis() &gt; lastEdit) {\n            System.out.println(&quot;DELETE&quot;);\n            timerStart(12000);\n        }\n    }\n}\n\npublic static void timerStart(int time) {\n    lastEdit = System.currentTimeMillis() + time;\n}\n</code></pre>\n<p>In this block of code, the System.out.println(&quot;DELETE&quot;) will execute after 12s.\nHowever, I would also call timeStart function in another code, which is the following</p>\n<pre><code>anotherThread.timerStart(12000);\n</code></pre>\n<p>When I call this function, I expect the lastEdit will increase 12000 milli sec. However, it doesn't work.\nMay I know why and how to solve this problem? Thanks.</p>\n",
    "question_id": 73968499,
    "tags": [
      "java",
      "multithreading",
      "timer"
    ],
    "score": 0,
    "is_answered": true,
    "view_count": 145
  },
  {
    "owner": {
      "profile_image": "https://lh3.googleusercontent.com/a-/ACNPEu-eaBqI1RscjE3tWwXbBndivTAGyrBQxHPlATqy=k-s256",
      "account_id": 26536886,
      "user_type": "registered",
      "user_id": 20168274,
      "link": "https://stackoverflow.com/users/20168274/zheng-peng",
      "reputation": 3,
      "display_name": "zheng peng"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/73975470/why-does-log-debug-cause-locksupport-park-to-fail",
    "last_activity_date": 1665068182,
    "creation_date": 1665066298,
    "answer_count": 1,
    "title": "Why does log.debug cause LockSupport.park() to fail",
    "body": "<p>As shown in the code, locksupport.park () is called twice in thread t1. After LockSupport.park () for the first time, the main Thread wakes up Thread t1 with t1.interrupt() and then calls thread.interrupted () in t1 to clear the interrupted status of the thread. But Locksupport.park () does not suspend the thread a second time. Oddly enough, After comment out the [log.debug(&quot;test.......&quot;)], locksupport.park () can pause the thread a second time. What is the reason for this?</p>\n<p><a href=\"https://i.stack.imgur.com/PHOWJ.png\" rel=\"nofollow noreferrer\">enter image description here</a></p>\n<p><a href=\"https://i.stack.imgur.com/v5CzM.png\" rel=\"nofollow noreferrer\">enter image description here</a></p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>@Slf4j\npublic class Test08Park4 {\n    public static void main(String[] args) throws InterruptedException{\n\n        Thread t1 = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                LockSupport.park();\n                /**\n                 * With this log print, locksupport.park () cannot stop threads;\n                 * If you comment this out, locksupport.park () can stop the thread\n                 */\n                log.debug(\"test.......\");\n                Thread.interrupted();\n                LockSupport.park();\n                log.debug(\"finished...\");\n            }\n        });\n        t1.start();\n        sleep(1000);\n        t1.interrupt();\n    }\n}</code></pre>\r\n</div>\r\n</div>\r\n\nif do not comment [log.debug(&quot;test.......&quot;)] out,the result:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>22:37:05.435 [Thread-0] DEBUG test.Test08Park4 - test.......\n22:37:05.439 [Thread-0] DEBUG test.Test08Park4 - finished...</code></pre>\r\n</div>\r\n</div>\r\n\nif comment [log.debug(&quot;test.......&quot;)] out,the result:</p>\n<p>//nothing</p>\n\n",
    "question_id": 73975470,
    "tags": [
      "java",
      "multithreading"
    ],
    "score": 0,
    "accepted_answer_id": 73975752,
    "is_answered": true,
    "view_count": 93,
    "last_edit_date": 1665068182
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/f947ba0438d76ee69a779510f60a1a56?s=256&d=identicon&r=PG",
      "account_id": 16231683,
      "user_type": "registered",
      "user_id": 11720290,
      "link": "https://stackoverflow.com/users/11720290/bananasmoothii",
      "reputation": 144,
      "display_name": "Bananasmoothii"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/73973632/how-to-fire-and-forget-with-kotlin-coroutines-in-a-blocking-event",
    "last_activity_date": 1665061342,
    "creation_date": 1665058524,
    "answer_count": 1,
    "title": "How to &quot;fire and forget&quot; with kotlin coroutines in a blocking event?",
    "body": "<p>I am making something similar to minecraft plugin, but the API is all in Java.</p>\n<p>At some point, there are events. Every event is fired sequentially, and the API will wait until an event finishes before calling the event listener for the next event. These events are called from the main thread, this means that nothing else is running while your event listener code is being run, and the application will crash eventually if you are blocking the main thread for too long.</p>\n<p>Basically, I want that when a player is opening an inventory, some first content is sent directly, and some second content is retrieved from a database. In Java, you, would do something like this:</p>\n<pre class=\"lang-java prettyprint-override\"><code>private static final List&lt;Item&gt; firstContent = ...;\n\npublic static void onInventoryOpenEvent(Inventory inventory) {\n    inventory.addItems(firstContent);\n    forkJoinPool.submit(() -&gt; { // &quot;fire and forget&quot;\n        List&lt;Item&gt; secondContent = retrieveContentFromDB(); // long and blocking\n        inventory.addItems(secondContent);\n    });\n}\n</code></pre>\n<p>And in kotlin, some would say to use the <code>GlobalScope</code>, others would say to not use it, but for now I don't see any other way than using it like this:</p>\n<pre class=\"lang-kotlin prettyprint-override\"><code>fun onInventoryOpenEvent(inventory: Inventory) { // not a suspending function\n    inventory.addItems(firstContent)\n    GlobalScope.launch {\n        val secondContent = retrieveContentFromDB() // long and blocking\n        inventory.addItems(secondContent)\n    }\n}\n</code></pre>\n",
    "question_id": 73973632,
    "tags": [
      "java",
      "multithreading",
      "kotlin",
      "kotlin-coroutines"
    ],
    "score": 0,
    "accepted_answer_id": 73974282,
    "is_answered": true,
    "view_count": 673
  },
  {
    "owner": {
      "profile_image": "https://lh3.googleusercontent.com/a-/AOh14GiXkziaJZ8_qgC85Vi-m-aBtYBq-UjSVmF5t7VUnYs=k-s256",
      "account_id": 24619664,
      "user_type": "registered",
      "user_id": 18520216,
      "link": "https://stackoverflow.com/users/18520216/bar%c4%b1%c5%9f-can-ate%c5%9f",
      "reputation": 228,
      "display_name": "Barış Can Ateş"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/71817703/how-to-run-two-different-code-together",
    "last_activity_date": 1664967839,
    "creation_date": 1649602189,
    "answer_count": 1,
    "title": "how to run &quot;two different code&quot; together?",
    "body": "<p>I want to create a basic chess clock but I got stuck.</p>\n<pre class=\"lang-java prettyprint-override\"><code>package SatrancSaati;\n\nimport java.util.Scanner;\n\npublic class SatrancSaatiRunner {\n    static int beyazZamani = 60;\n    static int siyahZamani = 60;\n\n    static boolean BeyazinSirasi = false;\n    static boolean SiyahinSirasi = false;//rakip baslar\n\n    static boolean zamanVarMi = true;\n\n    public static void main(String[] args) throws InterruptedException {\n\n        for (int i = 0; i &lt; 999; i++) {\n\n            Scanner scanner = new Scanner(System.in);\n            System.out.println(&quot;Beyaz hamle yaptiktan sonra 1 e basmali&quot;);\n            System.out.println(&quot;Siyah hamle yaptiktan sonra 2 e basmali&quot;);\n\n            int kiminSirasi = scanner.nextInt();\n            if (kiminSirasi == 1) {\n                saatCalistirSiyah(BeyazinSirasi, siyahZamani, zamanVarMi, beyazZamani, siyahZamani);\n\n            } else if (kiminSirasi == 2) {\n                saatCalistirBeyaz(BeyazinSirasi, siyahZamani, zamanVarMi, beyazZamani, siyahZamani);\n            }\n        }\n    }\n\n\n    private static void saatCalistirBeyaz(boolean beyazinSirasi, int siyahZamani, boolean zamanVarMi, int beyazZamani, int siyahZamani1) throws InterruptedException {\n        System.out.println(&quot;***Hamle Beyazda***&quot;);\n        while (true) {\n            siyahZamani++;\n            beyazZamani--;\n            System.out.print(&quot;Beyaz: &quot; + beyazZamani + &quot; &quot;);\n            System.out.print(&quot;Siyah: &quot; + siyahZamani);\n            System.out.print(&quot;\\u000C&quot;);\n            Thread.sleep(1000);\n\n            if (beyazZamani &lt;= 0 || siyahZamani &lt;= 0) {\n                break;\n            }\n        }\n    }\n\n    private static void saatCalistirSiyah(boolean beyazinSirasi, int siyahZamani, boolean zamanVarMi,\n                                          int beyazZamani, int siyahZamani1) throws InterruptedException {\n        System.out.println(&quot;***Hamle Siyahta***&quot;);\n        while (true) {\n            beyazZamani++;\n            siyahZamani--;\n            System.out.print(&quot;Beyaz: &quot; + beyazZamani + &quot; &quot;);\n            System.out.print(&quot;Siyah: &quot; + siyahZamani);\n            System.out.print(&quot;\\u000C&quot;);\n            Thread.sleep(1000);\n\n            if (beyazZamani &lt;= 0 || siyahZamani &lt;= 0) {\n                break;\n            }\n        }\n    }\n}\n\n</code></pre>\n<p>This is my basic code, I want that code to work like this:</p>\n<p>when I click 1 on IntelliJ then black's time starts dropping and white time increases by the same amount. while this code running when I click 2 I want to stop the other method and start the opposite method that increases white's time and decreases black's time by the same amount. This is very difficult because when I start one method it works until finished. That's my problem.</p>\n",
    "question_id": 71817703,
    "tags": [
      "java",
      "multithreading",
      "loops"
    ],
    "score": 0,
    "is_answered": true,
    "view_count": 428,
    "last_edit_date": 1664967839
  },
  {
    "owner": {
      "profile_image": "https://graph.facebook.com/1080827148618335/picture?type=large",
      "account_id": 7278875,
      "user_type": "registered",
      "user_id": 5549301,
      "link": "https://stackoverflow.com/users/5549301/udara-seneviratne",
      "reputation": 2373,
      "display_name": "Udara Seneviratne",
      "accept_rate": 38
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/73920478/new-threads-are-not-created-by-the-java-threadpooltaskexecutor",
    "last_activity_date": 1664922241,
    "creation_date": 1664646021,
    "answer_count": 1,
    "title": "New threads are not created by the Java ThreadPoolTaskExecutor",
    "body": "<p>This particular Java application uses the following dependency and service versions.</p>\n<ul>\n<li>Java 7</li>\n<li>Tomcat 7</li>\n<li>Spring 4.3.6</li>\n</ul>\n<p>It has the following method.</p>\n<pre><code>public void submitSms(final SmppMoSMS smppMoSMS) {\n    logger.info(&quot;** SMS received from SMSC [{}]&quot;, smppMoSMS.toString());\n    int i = Thread.activeCount();\n    logger.info(&quot;Point 1: Active thread count : [{}]&quot;, i);\n    taskExecutor.execute(new Runnable() {\n        @Override\n        public void run() {\n            try {\n                logger.info(&quot;Thread start &quot;);\n                logger.debug(&quot;SMS routing to URL [{}] [{}]&quot;, smppMoSMS.getOperator(), smppMoSMS.getApplicationUrl());\n                logger.info(&quot;SMS routing to URL [{}] [{}]&quot;, smppMoSMS.getOperator(), smppMoSMS.getApplicationUrl());\n                if (smppMoSMS.getApplicationUrl() == null) {\n                    return;\n                }\n                HttpEntity&lt;SmppMoSMS&gt; entity = new HttpEntity&lt;&gt;(smppMoSMS, headers);\n                ResponseEntity&lt;String&gt; response = restTemplate.exchange(smppMoSMS.getApplicationUrl(), HttpMethod.POST, entity, String.class);\n                if (HttpStatus.OK == response.getStatusCode()) {\n                    logger.info(&quot;SMS sending success [{}] [{}] [{}]&quot;, smppMoSMS.getOperator(), smppMoSMS.getApplicationUrl(), 200);\n                } else {\n                    logger.info(&quot;SMS sending fail [{}] [{}] [{}]&quot;, smppMoSMS.getOperator(), smppMoSMS.getApplicationUrl(), response.getStatusCode());\n                }\n            } catch (Throwable e) {\n                logger.error(&quot;SMS sending fail [{}] [{}]&quot;, smppMoSMS.getOperator(), smppMoSMS.getApplicationUrl());\n                logger.error(&quot;SMS ROUTING FAIL&quot;, e);\n            }\n            logger.info(&quot;Thread stop &quot;);\n        }\n    });\n    logger.info(&quot;Point 2: Active thread count : [{}]&quot;, i);\n    MDC.clear();\n}\n</code></pre>\n<p>Related to the TaskExecutor following bean configuration is available:</p>\n<pre><code>&lt;bean id=&quot;threadPool&quot; class=&quot;org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor&quot;\n      destroy-method=&quot;destroy&quot;&gt;\n    &lt;property name=&quot;corePoolSize&quot; value=&quot;5&quot;/&gt;\n    &lt;property name=&quot;maxPoolSize&quot; value=&quot;200&quot;/&gt;\n    &lt;property name=&quot;queueCapacity&quot; value=&quot;10000&quot;/&gt;\n    &lt;property name=&quot;allowCoreThreadTimeOut&quot; value=&quot;true&quot;/&gt;\n    &lt;property name=&quot;waitForTasksToCompleteOnShutdown&quot; value=&quot;true&quot;/&gt;\n&lt;/bean&gt;\n</code></pre>\n<p>Related to the RestTemplate the following bean configurations are available.</p>\n<pre><code>&lt;bean id=&quot;restTemplate&quot; class=&quot;org.springframework.web.client.RestTemplate&quot;&gt;\n    &lt;constructor-arg&gt;\n        &lt;bean class=&quot;org.springframework.http.client.HttpComponentsClientHttpRequestFactory&quot;&gt;\n            &lt;property name=&quot;readTimeout&quot; value=&quot;30000&quot;/&gt;\n            &lt;property name=&quot;connectTimeout&quot; value=&quot;30000&quot;/&gt;\n        &lt;/bean&gt;\n    &lt;/constructor-arg&gt;\n&lt;/bean&gt;\n</code></pre>\n<p>The high-level issue observation is described below.</p>\n<ol>\n<li><p>Let's say the application is started</p>\n</li>\n<li><p>Application is functioning as expected including the following operations</p>\n<ul>\n<li>HTTP calls are <strong>generated</strong> by the restTemplate according to the Tcpdumps and the REST API server logs</li>\n<li>All logs are printed on log files</li>\n</ul>\n</li>\n<li><p>After 2-3 hours suddenly we can observe the following behaviours of the application.</p>\n<ul>\n<li>HTTP calls are <strong>not generated</strong> by the restTemplate according to the TcpDumps and the REST API server logs</li>\n<li>Only the following logs are available</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>2022:10:01 07:17:10.623 INFO  [correlationId=1664588830622, sequence=2244] ** SMS received from SMSC [SmppMoSMS{message='Test by\ndeveloper ', senderAddress='94XXXXXXX', recipientAddress='94XXXXX',\nencoding='0', operator='XXXXXXXX', ncsType='null',\ncorrelationId='1664588830622'}]</p>\n<p>2022:10:01 07:17:10.623 INFO  [correlationId=1664588830622,\nsequence=2244] Active thread count : [114]</p>\n<p>2022:10:01 07:17:10.623 INFO  [correlationId=1664588830622,\nsequence=2244] Thread stop</p>\n<p>2022:10:01 07:17:10.623 INFO  [correlationId=1664588830622,\nsequence=2244] Active thread count : [114]</p>\n</blockquote>\n<p>This &quot;Active thread count&quot; doesn't increase after this.</p>\n<p>All the things are getting fine by just an application restart or the whole tomcat server restart.\n<strong>NOTE:</strong> This application was in production for several years and we get this issue from the last 2 months only without any code or configuration changes.</p>\n<p>I assume new threads are not created even though the configuration allows up to 200 threads.</p>\n<ol>\n<li>What can be the reasons for the above assumptions or the observations?</li>\n<li>Any other assumptions?</li>\n<li>How can I further investigate the issue?</li>\n<li>Any suggestions to fix the issue?</li>\n</ol>\n",
    "question_id": 73920478,
    "tags": [
      "java",
      "multithreading",
      "resttemplate"
    ],
    "score": 0,
    "is_answered": false,
    "view_count": 520
  },
  {
    "owner": {
      "profile_image": "https://lh3.googleusercontent.com/a/ALm5wu3U0JfxLQkuxbrCMYUED8nq_58AnJlYS2HAJso=k-s256",
      "account_id": 26522663,
      "user_type": "registered",
      "user_id": 20156091,
      "link": "https://stackoverflow.com/users/20156091/vishal-singh",
      "reputation": 1,
      "display_name": "Vishal Singh"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/73944324/threads-execution-time",
    "last_activity_date": 1664871309,
    "creation_date": 1664868063,
    "answer_count": 0,
    "title": "Threads execution time",
    "body": "<p>Could some one explain why second thread taking much lesser time for same process</p>\n<pre class=\"lang-java prettyprint-override\"><code>public class Main {\n\n  public static void main(String[] args) {\n\n    final String[] test = {\n        &quotquot;};\n\n\n    long s= System.currentTimeMillis();\n    new Thread(() -&gt; {\n      test[0] = test[0].replaceAll(&quot;E&quot;,&quot;  11111  &quot;);\n      System.out.println(test[0]+&quot;  is test[0] for thread 1&quot;);\n    }).start();\n    long e= System.currentTimeMillis();\n    System.out.println(e-s + &quot; in t1&quot;);\n\n    long s1= System.currentTimeMillis();\n\n    new Thread(() -&gt; {\n      test[0] = test[0].replaceAll(&quot;E&quot;,&quot;  22222  &quot;);\n      System.out.println(test[0]+&quot;  is test[0] for thread 2&quot;);\n    }).start();\n\n    long e1= System.currentTimeMillis();\n\n\n\n    System.out.println(e1-s1 +&quot; in t2&quot;);\n\n  }\n}\n</code></pre>\n",
    "question_id": 73944324,
    "tags": [
      "java",
      "multithreading",
      "execution-time"
    ],
    "score": 0,
    "is_answered": false,
    "view_count": 52,
    "last_edit_date": 1664871309
  },
  {
    "owner": {
      "profile_image": "https://i.stack.imgur.com/RUTKK.jpg?s=256&g=1",
      "account_id": 6006179,
      "user_type": "registered",
      "user_id": 4718042,
      "link": "https://stackoverflow.com/users/4718042/bradley-d",
      "reputation": 2415,
      "display_name": "Bradley D"
    },
    "closed_date": 1664813374,
    "link": "https://stackoverflow.com/questions/73937447/how-to-interrupt-an-unresponsive-resttemplate-call-earlier-than-the-normal-respo",
    "last_activity_date": 1664813945,
    "creation_date": 1664809947,
    "answer_count": 1,
    "title": "How to interrupt an unresponsive RestTemplate call earlier than the normal response time",
    "body": "<p>Below is our call to a third party service:</p>\n<pre><code>try {\n    ResponseEntity&lt;String&gt; response = new RestTemplate().exchange(\n                        requestUrl,\n                        HttpMethod.POST,\n                        new HttpEntity&lt;String&gt;(null, new HttpHeaders()),\n                        String.class);\n    // Log the response received (and request sent) \n    log.info(String.format(&quot;3rd party response: %s for request: %s&quot; + response, requestUrl));\n} catch (CustomTimeoutException e) {\n    log.error(String.format(&quot;Call to 3rd party with %s failed with: %s&quot;, requestUrl, e));\n}\n</code></pre>\n<p>If the requested service is not available, it takes 30 seconds to timeout.  We have no control over their timeout time, so we'd like to throw, catch and handle a custom exception if we don't hear back in 3 seconds.</p>\n<p>Not very experienced with threading so a concrete example of how this specific code would fit into the solution would be greatly appreciated.</p>\n",
    "question_id": 73937447,
    "tags": [
      "java",
      "multithreading",
      "timeout",
      "resttemplate"
    ],
    "score": 1,
    "closed_reason": "Duplicate",
    "is_answered": true,
    "view_count": 278
  },
  {
    "owner": {
      "profile_image": "https://i.stack.imgur.com/ojvZh.jpg?s=256&g=1",
      "account_id": 1316033,
      "user_type": "registered",
      "user_id": 1262865,
      "link": "https://stackoverflow.com/users/1262865/john16384",
      "reputation": 7855,
      "display_name": "john16384",
      "accept_rate": 50
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/73926124/design-would-it-not-make-more-sense-to-construct-a-thread-with-something-that-c",
    "last_activity_date": 1664737739,
    "creation_date": 1664716626,
    "answer_count": 1,
    "title": "Design: Would it not make more sense to construct a Thread with something that can throw an InterruptedException?",
    "body": "<p>I'm wondering what might have been the reason Java Thread's doesn't accept a <code>Runnable</code> that allows throwing of <code>InterruptedException</code>. If instead an <code>InterruptableRunnable</code> was accepted, it would simplify a lot of code that will simply want to stop the thread when interrupted.</p>\n<pre><code>interface InterruptableRunnable {\n    void run() throws InterruptedException;\n}\n</code></pre>\n<p>Before:</p>\n<pre><code>new Thread(() -&gt; {\n    try {\n        Thread.sleep(1000);\n    }\n    catch (InterruptedException e) {\n        // Some confusion ensues here as to what to do;\n        // - Should we restore the interrupt? For who? Guess not.\n        // - Should we rethrow it? That would terminate thread exceptionally...\n        // - Just return then? Sounds good...\n        \n        return;\n    }\n}).start();\n</code></pre>\n<p>Now, if instead you could use an <code>InterruptableRunnable</code> the code would be far simpler, and I think just as correct:</p>\n<pre><code>new Thread(() -&gt; {\n    Thread.sleep(1000);\n}).start();\n</code></pre>\n<p>On an interrupt, the thread gets terminated exactly as you'd expect -- and the system could be smart enough not to consider an <code>InterruptedException</code> as an exceptional termination condition. If that's not what you want, you always have the option of catching the exception.</p>\n<p>For similar reasons, what could have been the reasoning <code>Thread#run()</code> is not declared to throw <code>InterruptedException</code>...</p>\n",
    "question_id": 73926124,
    "tags": [
      "java",
      "multithreading",
      "interrupted-exception"
    ],
    "score": 1,
    "is_answered": true,
    "view_count": 91
  },
  {
    "owner": {
      "user_type": "does_not_exist",
      "display_name": "Sasha"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/817856/when-and-how-should-i-use-a-threadlocal-variable",
    "last_activity_date": 1664737068,
    "creation_date": 1241380760,
    "answer_count": 26,
    "title": "When and how should I use a ThreadLocal variable?",
    "body": "<p>When should I use a <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/ThreadLocal.html\" rel=\"noreferrer\"><code>ThreadLocal</code></a> variable?</p>\n\n<p>How is it used?</p>\n",
    "question_id": 817856,
    "tags": [
      "java",
      "multithreading",
      "concurrency",
      "thread-local",
      "thread-confinement"
    ],
    "score": 976,
    "accepted_answer_id": 817926,
    "is_answered": true,
    "view_count": 375880,
    "last_edit_date": 1557365663
  },
  {
    "owner": {
      "profile_image": "https://i.stack.imgur.com/FAvIB.jpg?s=256&g=1",
      "account_id": 5031739,
      "user_type": "registered",
      "user_id": 4041711,
      "link": "https://stackoverflow.com/users/4041711/shubham-chaurasia",
      "reputation": 2502,
      "display_name": "Shubham Chaurasia",
      "accept_rate": 53
    },
    "closed_date": 1654975463,
    "link": "https://stackoverflow.com/questions/72582076/jvm-performance-jvm-performance-not-scaling-with-number-of-processors",
    "last_activity_date": 1654936803,
    "creation_date": 1654927111,
    "answer_count": 2,
    "title": "JVM Performance - JVM performance not scaling with number of processors",
    "body": "<p><strong>Summary</strong></p>\n<p>I am doing a million floating point divisions in different threads, these threads share nothing from programmer's point of view i.e. no explicit locks are involved.</p>\n<p>Following are the perf numbers when I ran <code>java  -jar /tmp/my-exps-1.0-SNAPSHOT.jar 1000000 100</code> on machines having 8, 16 and 32 vcores (n/2 cores with 2 threads per core).</p>\n<ul>\n<li>1000000 is number of floating point divisions that each thread does, 100 is number of threads.</li>\n<li>All the processors belonged to same family - Intel(R) Xeon(R) Platinum 8175M CPU @ 2.50GHz.</li>\n<li>Using htop, I was seeing a 100% usage for all the cores when the program was running.</li>\n</ul>\n<pre><code>====================================\n\nruntime.availableProcessors() = 8 \n=====runBenchmark() FINISHED in 3156601 millis ======== average time to complete one thread = 31566.01\n====================================\n\nruntime.availableProcessors() = 16\n=====runBenchmark() FINISHED in 3297807 millis ======== average time to complete one thread = 32978.07\n\n====================================\n\nruntime.availableProcessors() = 32\n=====runBenchmark() FINISHED in 3448590 millis ======== average time to complete one thread = 34485.9\n\n====================================\n</code></pre>\n<p><strong>Expectation</strong></p>\n<p>I expected it to scale linearly with number of cores i.e execution time should decrease in proportion to increase in CPU cores. However the above numbers are totally opposite. It increases by a small fraction with increment in vcores :D</p>\n<p>Not very sure but some guesses that I made</p>\n<ul>\n<li>Context switch time increases with number of cores ?</li>\n<li>Some implicit locks are taken on data and those become more expensive as the race increase with number of cores.</li>\n</ul>\n<p><strong>Code Details</strong></p>\n<p>Thread</p>\n<pre><code>    private static class BenchmarkThread implements Callable&lt;BenchmarkResult&gt; {\n        private final long numOperationsPerThread;\n\n        private BenchmarkThread(long numOperationsPerThread) {\n            this.numOperationsPerThread = numOperationsPerThread;\n        }\n\n        @Override\n        public BenchmarkResult call() {\n            double sum = 0;\n            long start = System.currentTimeMillis();\n\n            for (long i = 0; i &lt; numOperationsPerThread; i++) {\n                double numerator = RANDOM.nextDouble();\n                double denominator = RANDOM.nextDouble();\n                double result = numerator / denominator;\n                sum += result;\n            }\n            long end = System.currentTimeMillis();\n            return new BenchmarkResult(Thread.currentThread().getName(),\n                    (end - start),\n                    sum);\n        }\n    }\n</code></pre>\n<p>Driver (yes <code>resultFuture.get()</code> blocks but we are not counting that time, we are doing a sum of individual thread times <code>timeToComplete += benchmarkResult.timeToCompleteMillis</code>)</p>\n<p><strong>Complete runnable example(edited - see EDIT 1 below)</strong></p>\n<pre><code>public class VerticalScalingExp {\n\n    private final long numOperationsPerThread;\n    private final int numThreads;\n\n    private final List&lt;Future&lt;BenchmarkResult&gt;&gt; benchMarkResultsFuture;\n    private final ExecutorService executorService;\n\n    public VerticalScalingExp(long numOperationsPerThread, int numThreads) {\n        this.numOperationsPerThread = numOperationsPerThread;\n        this.numThreads = numThreads;\n\n        this.benchMarkResultsFuture = new ArrayList&lt;&gt;(numThreads);\n        this.executorService = Executors.newFixedThreadPool(numThreads);\n    }\n\n    public static void main(String[] args) throws Exception {\n        long numOperationsPerThread;\n        int numThreads;\n        if (args.length != 2) {\n            numOperationsPerThread = 1000000;\n            numThreads = 50;\n        } else {\n            numOperationsPerThread = Long.parseLong(args[0]);\n            numThreads = Integer.parseInt(args[1]);\n        }\n\n        new VerticalScalingExp(numOperationsPerThread, numThreads).runBenchmark();\n    }\n\n    private void runBenchmark() throws Exception {\n      try {\n          System.out.println(&quot;[START]====VerticalScalingExp.runBenchmark====&quot; );\n          System.out.println(&quot;numOperationsPerThread = &quot; + numOperationsPerThread + &quot;, numThreads = &quot; + numThreads);\n          Runtime runtime = Runtime.getRuntime();\n          System.out.println(&quot;runtime.maxMemory() = &quot; + runtime.maxMemory());\n          System.out.println(&quot;runtime.freeMemory() = &quot; + runtime.freeMemory());\n          System.out.println(&quot;runtime.availableProcessors() = &quot; + runtime.availableProcessors());\n          long timeToComplete = 0;\n          for (int i = 0; i &lt; numThreads; i++) {\n              benchMarkResultsFuture.add(executorService.submit(new BenchmarkThread(numOperationsPerThread)));\n          }\n\n          for (Future&lt;BenchmarkResult&gt; resultFuture : benchMarkResultsFuture) {\n              BenchmarkResult benchmarkResult = resultFuture.get();\n              System.out.println(&quot;resultFuture.get() = &quot; + benchmarkResult);\n              timeToComplete += benchmarkResult.timeToCompleteMillis;\n          }\n          double avg = (double) timeToComplete / numThreads;\n          System.out.println(&quot;=====runBenchmark() FINISHED in &quot; + timeToComplete +\n                  &quot; millis ======== average time to complete one thread = &quot; + avg );\n\n\n      } finally {\n          executorService.shutdown();\n      }\n    }\n\n    private static class BenchmarkThread implements Callable&lt;BenchmarkResult&gt; {\n        private final long numOperationsPerThread;\n\n        private BenchmarkThread(long numOperationsPerThread) {\n            this.numOperationsPerThread = numOperationsPerThread;\n        }\n\n        @Override\n        public BenchmarkResult call() {\n            double sum = 0;\n            long start = System.currentTimeMillis();\n            ThreadLocalRandom random = ThreadLocalRandom.current();\n            for (long i = 0; i &lt; numOperationsPerThread; i++) {\n                double numerator = random.nextDouble();\n                double denominator = random.nextDouble();\n                double result = numerator / denominator;\n                sum += result;\n            }\n            long end = System.currentTimeMillis();\n            return new BenchmarkResult(Thread.currentThread().getName(),\n                    (end - start),\n                    sum);\n        }\n    }\n\n    private static class BenchmarkResult {\n        private final String threadName;\n        private final long timeToCompleteMillis;\n        private final double sum;\n\n        public BenchmarkResult(String threadName, long timeToCompleteMillis, double sum) {\n            this.threadName = threadName;\n            this.timeToCompleteMillis = timeToCompleteMillis;\n            this.sum = sum;\n        }\n\n        @Override\n        public String toString() {\n            return &quot;BenchmarkResult{&quot; +\n                    &quot;threadName='&quot; + threadName + '\\'' +\n                    &quot;, timeToCompleteMillis=&quot; + timeToCompleteMillis +\n                    &quot;, sum =&quot; + sum +\n                    '}';\n        }\n    }\n}\n</code></pre>\n<p><strong>Questions</strong></p>\n<ul>\n<li>I found this blog - <a href=\"https://www.theserverside.com/feature/Why-Java-Applications-Fail-to-Scale-Linearly\" rel=\"nofollow noreferrer\">https://www.theserverside.com/feature/Why-Java-Applications-Fail-to-Scale-Linearly</a> which explains very nicely about data collisions that happen with increase in number of cores, is the code above suffering from the same ? (But in my code I am not sharing anything among threads ?) If yes, at what level these collisions are happening, Heap ? CPU caches ? something else ?</li>\n<li>Is this a commonly observed pattern ? (perf does not scale linearly with cpu cores)</li>\n<li>What can be done to make it scale as expected ?</li>\n</ul>\n<p>Apologies for the long post :) Thanks :)</p>\n<p><strong>EDIT 1:</strong></p>\n<p>As suggested in comments and answer, I tried using ThreadLocalRandom.\nPerformance increases a lot as compared to previous cases but still, performance decreases with increase in cores.</p>\n<pre><code>====================================\n\nruntime.availableProcessors() = 8 \n=====runBenchmark() FINISHED in 1683 millis ======== average time to complete one thread = 16.83\n\n====================================\n\nruntime.availableProcessors() = 16\n=====runBenchmark() FINISHED in 6622 millis ======== average time to complete one thread = 66.22\n\n====================================\n\nruntime.availableProcessors() = 32\n=====runBenchmark() FINISHED in 19924 millis ======== average time to complete one thread = 199.24\n\n====================================\n</code></pre>\n",
    "question_id": 72582076,
    "tags": [
      "java",
      "multithreading",
      "performance",
      "multiprocessing",
      "cpu"
    ],
    "score": 3,
    "closed_reason": "Needs more focus",
    "is_answered": true,
    "view_count": 304,
    "last_edit_date": 1654936803
  },
  {
    "owner": {
      "profile_image": "https://lh3.googleusercontent.com/a/AATXAJxX9Iix5-V4Afy0vaosyCz1npCO7X3fhNOxSnIe=k-s256",
      "account_id": 25423725,
      "user_type": "registered",
      "user_id": 19229200,
      "link": "https://stackoverflow.com/users/19229200/scizora",
      "reputation": 21,
      "display_name": "Scizora"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/72429901/multithreads-created-by-jar-file-continue-to-run-after-closing-the-jar-file",
    "last_activity_date": 1654922791,
    "creation_date": 1653891612,
    "answer_count": 1,
    "title": "MultiThreads created by jar file continue to run after closing the jar file",
    "body": "<p>Hi guys i just picked up spring boot and would like some advice!</p>\n<p>I needed to create an object that would travel from one position to another, through mathematically calculated increments. And once the “start” rest call is executed it would run need to run forever patrolling(for this i implemented an infinite while loop with the condition set to true in the start rest call, and false on the end rest call) between two-three pre-designated points until the “stop” rest call is called.</p>\n<p>This rest call also creates up to 20 objects concurrently, and since there is an infinite while loop,I cant just do a for loop to create 20 of these objects and it will be stuck on the first iteration being a blocking code due to the infinite while loop.</p>\n<p>To fix this i used java threads so that i can create any number of these objects concurrently. Since the thread.stop() is deprecated, i used something like service.setIsThreadRunning(false) for my controller, and for my service layer</p>\n<p>I used a while(isThreadRunning) in my run() method.</p>\n<p>have tried using the interrupt way to close the threads but it does not seem to\nclose it at all, the way which worked for me was using a global variable.</p>\n<p>Where isThreadRunning is a global variable being set to false once the end rest call is called.</p>\n<p>To my understanding, global variables are shared even among different threads, so by changing this global variable the stop method worked for me without issue.</p>\n<p>All of this worked locally without issue.</p>\n<p>The main problem comes when i tried to deploy this spring boot application in a jar file, where there was a bug where the closing the jar application will still result in the created threads continuing to run. Despite calling the end rest call multiple times.</p>\n<p>Based on my searches it seems that a shutdown hook, setting created daemon to true could potentially fix it.\nIf possible is there another explanation on why this happens? Is there a unique interaction of threads with the jar file that i am not considering?</p>\n<p>My speculation is that it is caused by someone not executing the end rest call before closing the jar file, then when it is started again it will be in a new memory location, so any new “end rest calls” would not be able to reach it.</p>\n<p>For a fix I have tried adding a shutdown hook to set the variables to false in case someone forgets to do the end rest call, and setting the created daemon threads to true.</p>\n<p>I understand putting a infinite while loop is not recommended in java but i honestly am open to recommendations on alternative methods to suite these requirements.\nFor other approaches I have tried spring reactive programming(Mono , flux ) architecture(seems to get stuck in the infinite while loop),@Async.</p>\n<p>Would greatly appreciate it if someone could give me a direction on what i can look into to approach this!</p>\n<p>The code looks something like this for the thread implementation:\nService layer:</p>\n<pre class=\"lang-java prettyprint-override\"><code>public class Service extends Thread{\n    //global variable\n    @Setter\n    private boolean isThreadRunning=false;\n   \n    \n    @Override\n    public void run(){\n    while(isThreadRunning){\n    try{\n      moveObject();\n    }\n    catch{\n    log.error(&quot;ending movement&quot;);\n    }    \n    }\n\n}\n</code></pre>\n<p>note* this is a psuedoish version of the code as i cant copy paste it,i typed this out from scratch and memory so some parts like the math portion which is not the main issue i will not write much detail about it.\nAll there is needed to be known about the math part is that the new position will be incremented and sent to the front end every 3 seconds to &quot;move&quot; the object. hence the infinite while loop and the object is supposed to move endlessly until the end rest call is executed.</p>\n<p>The problematic infinite while loop, as i am not allowed to copy the code, this is the general structure of it :</p>\n<pre class=\"lang-java prettyprint-override\"><code>//pos consists of latitude, longitude \npublic void moveObject() throws InterruptedException{\n   MovingObject obj = new MovingObject();\n   while(isThreadRunning){\n      for(int i =0;i&lt;=iterations;i++){\n         if(isThreadRunning== false){\n            return;\n         }\n    else{\n      MathNewIncrementedPos();\n        }\n    }\n   }\n   \n}\n\n\n</code></pre>\n<p>Controller:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Log4j2\n@RestController\n@RequiredArgsConstructor\n@RequestMapping(&quot;/test&quot;)\npublic class Controller{\n    private final Service service;\n    ArrayList&lt;Thread&gt; threadList = new ArrayList&lt;Thread&gt;();\n\n    @PostMapping(&quot;/moveObject&quot;)\n    public void move(@PathVariable Integer noOfObj) throws InterruptedException{\n       for(int i=0;i&lt;noOfobj;i++){\n       Thread newThread = new Thread(service);\n       newThread.setDaemon(true);\n       newThread.start();\n       threadList.add(newThread);\n       threadList.get(i).start();\n    }\n    }\n    @PostMapping(&quot;/endMovement&quot;)\n    public void endMove() throws InterruptedExecption{\n        int size = threadList.size();\n        service.setisThreadRunning(false);\n        //i dont think this is needed, but i just do it to try ensure all \n        //threads are closed\n        for(int i=0;i&lt;size;i++){\n            service.setisThreadRunning(false);\n        }\n        threadList.clear();\n    }\n\n}\n\n</code></pre>\n<p>and lastly, a shutdown hook to ensure that even the end rest call is not executed, all threads should close before shutting down</p>\n<pre class=\"lang-java prettyprint-override\"><code>@PreDestroy\npublic void onExit(){\n   service.setisThreadRunning(false);\n}\n</code></pre>\n<p>Is this possible to do in spring reactive programming? (using Mono/flux) as I am unsure how to wrap this in a reactive way.</p>\n",
    "question_id": 72429901,
    "tags": [
      "java",
      "multithreading",
      "spring-boot",
      "spring-mvc"
    ],
    "score": 2,
    "is_answered": false,
    "view_count": 69,
    "last_edit_date": 1653917510
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/54c04cb22ca948af2708c2fa054fcf58?s=256&d=identicon&r=PG",
      "account_id": 1301815,
      "user_type": "registered",
      "user_id": 1251549,
      "link": "https://stackoverflow.com/users/1251549/cherry",
      "reputation": 31771,
      "display_name": "Cherry",
      "accept_rate": 29
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/72580556/load-balancing-for-thread-pool-in-java",
    "last_activity_date": 1654919342,
    "creation_date": 1654902668,
    "answer_count": 1,
    "title": "Load balancing for thread pool in java",
    "body": "<p>Disclaimer: this is not the same as <a href=\"https://stackoverflow.com/questions/14415343/kind-of-load-balanced-thread-pool-in-java\">this one</a>.</p>\n<p>There are some tasks that can consume both network and CPU. Sometimes performance sticks into a network, sometimes into the CPU. So depending on that I need different thread number that can not be precisely set before a program run. Ideally, each task should log its time (and some other parameters) and if time increases -&gt; thread pool decreases threads otherwise when a task is completed faster -&gt; number of threads should be increasing.</p>\n<p>Of course, there should be protection from continuous load balancing: e.g. when the system adds 1 thread and remove it, then repeat this again and again because task time changes.</p>\n<p>Does java offer something similar to this?</p>\n",
    "question_id": 72580556,
    "tags": [
      "java",
      "multithreading"
    ],
    "score": -1,
    "is_answered": true,
    "view_count": 110
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/49c522ddb886ec08a37597bd38ef941d?s=256&d=identicon&r=PG&f=y&so-version=2",
      "account_id": 11238865,
      "user_type": "registered",
      "user_id": 8243973,
      "link": "https://stackoverflow.com/users/8243973/ansar-samad",
      "reputation": 759,
      "display_name": "Ansar Samad",
      "accept_rate": 38
    },
    "content_license": "CC BY-SA 3.0",
    "link": "https://stackoverflow.com/questions/45265777/data-inconsistency-in-multithreaded-environment",
    "last_activity_date": 1654850384,
    "creation_date": 1500817518,
    "answer_count": 1,
    "title": "Data inconsistency in multithreaded environment",
    "body": "<p>I have created an application which reads &amp; writes into a remote file. I have different files (<code>A.properties</code>, <code>B.properties</code>, <code>C.properties</code>) in different directories (<code>folder-1</code>, <code>folder-2</code>, <code>folder-3</code>). Each directory has the same filename with different data.</p>\n\n<p>I have implemented concurrency in my application by using the <code>LockRegistry</code> provided by <a href=\"https://stackoverflow.com/questions/24771092/java-synchronization-locking-across-multiple-files#24771796\">this other answer</a>. The issue is that if a thread is accessing <code>A.properties</code> while another thread accesses <code>B.properties</code>, the <code>propertyMap</code> displayed to the end user will contain both  data from property files. How can I resolve this issue?</p>\n\n<p>My code:</p>\n\n<pre><code>public class UDEManager\n{\n    private Map&lt;String, String&gt; propertyMap  = new TreeMap&lt;&gt;();\n    HttpSession session = null;\n\n    public UDEPropertyManager()\n    {\n        super();\n    }\n\n    public void init(ServletConfig config) throws ServletException\n    {\n        super.init(config);\n    }\n\n    protected void doGet(HttpServletRequest request, HttpServletResponse response)\n        throws ServletException, IOException\n    {\n        doPost(request, response);\n    }\n\n    protected void doPost(HttpServletRequest request, HttpServletResponse response)\n        throws ServletException, IOException\n    {\n        // Code for calling thread for read/write operations into remote\n        // file and fill the propertyMap\n    }\n}\n\nclass WebAppProperty implements Runnable\n{\n    private WebApp webapp; // folder-1\n    private String propertyFile; // A.properties\n    private String keyValue; //messages-title=Messages\n    private LockType mode;\n\n    public String getPropertyFile()\n    {\n        return propertyFile;\n    }\n\n    public void setPropertyFile(String propertyFile)\n    {\n        this.propertyFile = propertyFile;\n    }\n\n    @Override\n    public void run()\n    {\n        try {\n            LockRegistry.INSTANCE.acquire(propertyFile, mode);\n\n            if (this.mode == LockType.WRITE) {\n                writeToPropertyFile();\n            } else if (this.mode == LockType.READ) {\n                getProperty(this.webapp, this.propertyFile);\n            }\n        } catch (Exception ie) {\n            sysoutAndLog(\"Thread is Interrupted\");\n            ie.printStackTrace();\n        } finally {\n            LockRegistry.INSTANCE.release(propertyFile, mode);\n        }\n    }\n\n    private boolean getProperty(WebApp webapp, String property)\n    {\n        try {\n            // read from file and put it into Map instance variable\n            // of calling class (UDEManager)\n            propertyMap.put(key, value);\n        } catch(Exception e) {\n            sysoutAndLog(\"Error while reading property \");\n            e.printStackTrace();\n        }\n        return false;\n    }\n\n    private void writeToPropertyFile()\n    {\n        try {\n            // Write data into remote file\n        } catch (Exception e) {\n            sysoutAndLog(\"exception while writing to file.\");\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre>\n",
    "question_id": 45265777,
    "tags": [
      "java",
      "multithreading",
      "concurrency",
      "concurrenthashmap"
    ],
    "score": 0,
    "is_answered": false,
    "view_count": 252,
    "last_edit_date": 1501101757
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/3b860d47d80fc72f0e8264b7613186bb?s=256&d=identicon&r=PG",
      "account_id": 25073739,
      "user_type": "registered",
      "user_id": 18972846,
      "link": "https://stackoverflow.com/users/18972846/techgeek",
      "reputation": 316,
      "display_name": "TechGeek"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/72557561/how-to-prevent-main-thread-from-blocking-when-i-am-listening-on-bluetooth-device",
    "last_activity_date": 1654849523,
    "creation_date": 1654765541,
    "answer_count": 1,
    "title": "How to prevent main thread from blocking when I am listening on bluetooth devices in a Xamarin Android app?",
    "body": "<p>I have an app that I need to function as a bluetooth server, it will listen on incoming bluetoooth connections and print the message sent from those devices. I have managed to make some progress though I fear that I have might made a mistake calling a blocking method in the main thread of my app, that is the User Interface thread. When I call <code> clientSocket= serverSocket.Accept();</code> everything in my app stops, i use a switcher to call the method that has the above line, the switcher shows like its turning on but hangs due to a method that imolements a blocking call till a bluetooth device connects to the socket. How can I avoid that effect on the main thread of my app because I believe once a bluetooth device connects to the app then the blocking call will be removed and the switcher will resume to being checked. I have thought about using a new thread to accept the socket but how will I display the data received from the device to a UI TextView element I have in my app since manipulation of TextViews and other UI is not allowed from a non-UI thread, Thank you</p>\n<pre><code>server_switch.Click += (o, e) =&gt;\n            {\n                //check the check status of the switch and start and disable gatt accordingly\n                Switch myswitch = o as Switch;\n                if (myswitch.Checked)\n                {\n                    Log.Debug(&quot;Check Status Enabled&quot;, myswitch.Checked.ToString());\n                    myswitch.Checked = true;\n                    //switch the adapter mode and request for visibility\n                    switch (_adapter.ScanMode)\n                    {\n                        case ScanMode.Connectable:\n                            MakeVisibleFor300Seconds();\n                            break;\n                        case ScanMode.None:\n                            MakeVisibleFor300Seconds();\n                            break;\n                        case ScanMode.ConnectableDiscoverable:\n                                //do nothing, adapter in required mode\n                                Log.Debug(&quot;Adapter Mode&quot;,\n                                    &quot;Connectable Discoverable:&quot; +\n                                    (_adapter.ScanMode == ScanMode.ConnectableDiscoverable).ToString());\n                                break;\n                    }\n                      //create a new thread and run\n                    \n                    var newThread= new SocketListener(display_data, serverSocket);\n                    newThread.Start();\n\n                    }\n\n                }\n                else\n                {\n                    //the switch is disabled\n                    Log.Debug(&quot;Check Status Enabled&quot;, myswitch.Checked.ToString());\n                }\n            };\n</code></pre>\n<p><em><strong>Class for accepting new connections</strong></em></p>\n<pre><code>  //create a new class for listening on connections and displaying message to the textview\n    public class SocketListener : Thread\n    {\n        private TextView _data;\n        private BluetoothServerSocket mysocket;\n\n        private Stream output, input;\n        //declare default ctor for reflections\n        public SocketListener()\n        {\n            \n        }\n        //declare the custom ctor\n        public SocketListener(TextView display, BluetoothServerSocket socket)\n        {\n            mysocket = socket;\n            _data = display;\n        }\n        //override run and implement a blocking call\n        public override void Run()\n        {\n            //NB: This implements a blocking call till a device connects\n            BluetoothSocket source_device = mysocket.Accept();\n            //get the input and output streams\n            output = source_device.OutputStream;\n            input = source_device.InputStream;\n            //check if data is available and write it to our object\n            StreamReader reader = new StreamReader(input);\n            string dat=&quot;&quot;;\n            string line;\n            while ((line = reader.ReadLine()) != null)\n            {\n                dat += line;\n            }\n\n            _data.Text = dat;\n        }\n    }\n</code></pre>\n",
    "question_id": 72557561,
    "tags": [
      "java",
      "c#",
      "android",
      "multithreading",
      "bluetooth"
    ],
    "score": 0,
    "is_answered": true,
    "view_count": 138,
    "last_edit_date": 1654849523
  },
  {
    "owner": {
      "profile_image": "https://lh3.googleusercontent.com/-gzazL12Nyf0/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3rdfDMa-wgbKRz71aMyczgKnKB5Opw/mo/photo.jpg?sz=256",
      "account_id": 16108109,
      "user_type": "registered",
      "user_id": 11627119,
      "link": "https://stackoverflow.com/users/11627119/jacob-goldverg",
      "reputation": 47,
      "display_name": "Jacob Goldverg"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/72567117/changing-the-number-of-running-steps-by-increasing-the-step-pool-size-in-spring",
    "last_activity_date": 1654843263,
    "creation_date": 1654812148,
    "answer_count": 1,
    "title": "Changing the number of running steps by increasing the step pool size in Spring Batch",
    "body": "<p>This is a compound question regarding how changing size of the thread pool sizes at run-time affects the spring batch run-time system.</p>\n<p>To start I would like to do a verbiage clarification: concurrency = # of running steps and parallelism = # threads per step.</p>\n<p>For a clear understanding of how I am using spring batch to do my processing. Currently I have a large number of files(200+) that are being generated and I am using Spring Batch to transfer the files where each step maps to 1 file.\nEverything about the job is dynamic, as in the number of steps and each step's reader and writer is distinct to that step. So no step shares readers or writers. There is a thread pool dedicated to running the steps concurrently, and then each step has its own thread pool so we can do parallelism per step. When combined with commit interval this gives great throughput and control.</p>\n<p>So my questions are:</p>\n<ol>\n<li>How can I change the number of running steps after the Job has started?</li>\n<li>How can I change the commit interval after a step has started processing?</li>\n</ol>\n<p>So lets consider an example of why I would like to do this and what exactly I mean by change &quot;running steps&quot; and &quot;commit interval&quot;.</p>\n<p>Consider the case you have a total of 300 steps to process with a step thread pool size 5. I begin processing and realize that I have more resources to utilize, I would like to change the thread count to say 8.\nWhen I actually do this at run-time what I experience is that the thread pool does increase but the number of running steps does not change. Why is that?</p>\n<p>Following a similar logic say I have more memory to utilize, I would then like to increase my commit interval at run-time. I have not found anything in the StepExecution class that would let me change the commit interval surprisingly. Why not?</p>\n<p>What is interesting is that for parallelism I am able to change the number of running threads by simply increasing that thread pool's size. From simply changing the number of parallel threads I noticed massive increase in throughput.</p>\n<p>If you would like more information I can provide code, and link to the repository.</p>\n<p>Thank you very much.</p>\n",
    "question_id": 72567117,
    "tags": [
      "java",
      "spring",
      "multithreading",
      "spring-batch"
    ],
    "score": 1,
    "accepted_answer_id": 72570061,
    "is_answered": true,
    "view_count": 275
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/9e9ee1e1f1b74a7909d5b65d0626f6ea?s=256&d=identicon&r=PG&f=y&so-version=2",
      "account_id": 16264338,
      "user_type": "registered",
      "user_id": 11744870,
      "link": "https://stackoverflow.com/users/11744870/blueryse",
      "reputation": 29,
      "display_name": "BlueRyse"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/72547510/threads-logic-in-java",
    "last_activity_date": 1654778339,
    "creation_date": 1654698502,
    "answer_count": 1,
    "title": "Threads logic in Java",
    "body": "<p>I'm trying to resolve a university exercise. The class <code>AImpl</code> has a method <code>ma(B b)</code> that creates and runs two threads. These threads have to call <code>mb1()</code> and <code>mb2()</code> (they are simple methods that just print a text, so I didn't include them). The calling thread should then wait for <code>mb1()</code> to terminate before finishing.</p>\n<p>My logic is:</p>\n<p>The first thread enters and after finishing the execution of <code>b.mb1()</code> starts to <code>wait()</code> on the current object, releasing the mutex. Then the second thread runs and it does the same. When they are both waiting, the calling thread calls <code>notifyAll()</code> on the object, waking both of them. They execute <code>b.mb2()</code> and then terminate.</p>\n<p>The problem is that when the first thread starts waiting with <code>object.wait()</code>, the control flow doesn't return on the calling thread and the program enters in a deadlock.</p>\n<p>Where is my logic flawed?</p>\n<pre><code>public class AImpl{\n    public static Object object = new Object();\n\n    public static void main(String[] args) throws InterruptedException {\n        BImpl b = new BImpl();\n        AImpl.ma(b);\n    }\n\n    public static void ma(B b) throws InterruptedException {\n        Thread thread = new Thread() {\n            @Override\n            public void run() {\n                b.mb1();\n\n                synchronized(object){\n                    try {\n                        object.wait();\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n                b.mb2();\n\n                System.out.println(&quot;Thread finished&quot;);\n            }\n        };\n\n        Thread thread1 = new Thread() {\n            @Override\n            public void run() {\n                b.mb1();\n\n                synchronized(object){\n                    try {\n                        object.wait();\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n                b.mb2();\n\n                System.out.println(&quot;Thread finished&quot;);\n            }\n        };\n        thread.run();\n        thread1.run();\n\n        synchronized(object){\n            object.notifyAll();\n        }\n\n        System.out.println(&quot;Program finished.&quot;);\n    }\n}\n</code></pre>\n",
    "question_id": 72547510,
    "tags": [
      "java",
      "multithreading",
      "synchronization"
    ],
    "score": 1,
    "is_answered": true,
    "view_count": 159,
    "last_edit_date": 1654734839
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/6a1391d455ff78871000dacdd83ac490?s=256&d=identicon&r=PG",
      "account_id": 9148659,
      "user_type": "registered",
      "user_id": 6803950,
      "link": "https://stackoverflow.com/users/6803950/zy-sun",
      "reputation": 195,
      "display_name": "zy_sun"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/72556212/why-isnt-this-multithreading-efficient-in-the-for-loop-in-this-code",
    "last_activity_date": 1654765626,
    "creation_date": 1654759342,
    "answer_count": 2,
    "title": "Why isn&#39;t this multithreading efficient in the for loop in this code?",
    "body": "<p>I want to use multithreading to speed up queries in a for loop code in Spring.</p>\n<p>Some people say that: the thread pool get method is Blocking methods, so it is no different from writing without threads.</p>\n<p>So how does this code work with thread acceleration in a Java loop?</p>\n<p>Some languages, such as C# ,JS , use <code>await remoteCall(id)</code>, use 'await' Whether the same problem exists ?</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Data\nclass ResultDto {\n    private BaseData baseData;\n}\n</code></pre>\n<pre class=\"lang-java prettyprint-override\"><code>@Data\npublic class BaseData {\n    public String baseInfo;\n    public String remoteInfo;\n}\n</code></pre>\n<pre class=\"lang-java prettyprint-override\"><code>ExecutorService exector = Executors.newCachedThreadPool();\n\npublic List&lt;ResultDto&gt; queryAll(List&lt;String&gt; ids) throws ExecutionException, InterruptedException {\n\n    List&lt;ResultDto&gt; res = new ArrayList&lt;&gt;();\n\n    for (String id : ids) {\n        ResultDto resultDto = new ResultDto();\n        BaseData baseData = new BaseData();\n        baseData.setBaseInfo(&quot;baseData&quot; + id);\n\n        //using thread  blocking ?\n        String remoteResult = exector.submit(() -&gt; remoteCall(id)).get();\n\n        baseData.setRemoteInfo(remoteResult);\n        resultDto.setBaseData(baseData);\n        res.add(resultDto);\n    }\n\n    return res;\n}\n\nString remoteCall(String id) {\n    return &quot; httpUtils.get()&quot; + id;\n}\n</code></pre>\n<p>With my limited experience with multithread Programing, my code looks ugly.\nHow to improve it?\nPlease help me rewrite the code below.</p>\n",
    "question_id": 72556212,
    "tags": [
      "java",
      "spring",
      "multithreading",
      "asynchronous",
      "async-await"
    ],
    "score": 0,
    "accepted_answer_id": 72556469,
    "is_answered": true,
    "view_count": 101,
    "last_edit_date": 1654765626
  },
  {
    "owner": {
      "profile_image": "https://i.stack.imgur.com/KCuvK.jpg?s=256&g=1",
      "account_id": 8705495,
      "user_type": "registered",
      "user_id": 6513683,
      "link": "https://stackoverflow.com/users/6513683/wubbalubbadubbdubb",
      "reputation": 151,
      "display_name": "WubbaLubbaDubbDubb",
      "accept_rate": 80
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/72525288/forkpooltask-join-concurrentmodificationexception",
    "last_activity_date": 1654719209,
    "creation_date": 1654568552,
    "answer_count": 1,
    "title": "ForkPoolTask.join() ConcurrentModificationException",
    "body": "<p>I'm getting a very strange error here that I can't quite understand. As it stands I'm making a crawler program that uses ForkJoinTasks to scan for links on the page and then crawl those as well. However, when I use .join() to collect the tasks, I sometimes get ConcurrentModificationExceptions pointing to that line.</p>\n<pre><code>Spider[] newSpiders = crawlForURLs(&quot;a&quot;, &quot;href&quot;).stream()\n        .filter(url -&gt; SpiderUtils.isLinkURLValid(url))\n        .map(url -&gt; new Spider(url).fork()).toArray(Spider[]::new);\n\nfor (Spider c : newSpiders) {\n    Image[] crawledImages = c.join();\n}\n</code></pre>\n<p>The line in question is c.join(). I tried surrounding it in a ReentrantLock just to see what would happen but it made no difference.</p>\n<p>Full stack trace: <a href=\"https://pastebin.com/qCJte65Q\" rel=\"nofollow noreferrer\">https://pastebin.com/qCJte65Q</a></p>\n<p>Lines of code are:\nat com.eulerity.hackathon.imagefinder.Spider.compute (Spider.java:85) (<code>Image[] crawledImages = c.join();</code>)</p>\n<p>at com.eulerity.hackathon.imagefinder.ImageFinder.doPost (ImageFinder.java:45) <code>images = SpiderUtils.commonPool.invoke(baseSpider);</code></p>\n<p>I honestly can't figure out why this is the case, but if you need to see another part of my code please don't hesitate to ask. Thank you!</p>\n",
    "question_id": 72525288,
    "tags": [
      "java",
      "multithreading",
      "concurrentmodification",
      "forkjoinpool"
    ],
    "score": 0,
    "accepted_answer_id": 72551685,
    "is_answered": true,
    "view_count": 162,
    "last_edit_date": 1654572378
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/0a3a3387d11d1a59a3a0338bd9a4473f?s=256&d=identicon&r=PG",
      "account_id": 30818,
      "user_type": "registered",
      "user_id": 84278,
      "link": "https://stackoverflow.com/users/84278/steve",
      "reputation": 21241,
      "display_name": "Steve",
      "accept_rate": 74
    },
    "content_license": "CC BY-SA 3.0",
    "link": "https://stackoverflow.com/questions/877096/how-can-i-pass-a-parameter-to-a-java-thread",
    "last_activity_date": 1654717055,
    "creation_date": 1242643021,
    "answer_count": 19,
    "title": "How can I pass a parameter to a Java Thread?",
    "body": "<p>Can anyone suggest to me how I can pass a parameter to a thread?</p>\n\n<p>Also, how does it work for anonymous classes?</p>\n",
    "question_id": 877096,
    "tags": [
      "java",
      "multithreading"
    ],
    "score": 338,
    "accepted_answer_id": 877113,
    "is_answered": true,
    "view_count": 452744,
    "last_edit_date": 1329298159
  },
  {
    "owner": {
      "profile_image": "https://lh6.googleusercontent.com/-qCwENZDh52k/AAAAAAAAAAI/AAAAAAAADjY/4vqCcXX96N4/photo.jpg?sz=256",
      "account_id": 12929247,
      "user_type": "registered",
      "user_id": 9348806,
      "link": "https://stackoverflow.com/users/9348806/akash-das",
      "reputation": 163,
      "display_name": "Akash Das"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/71328425/java-thread-cooperation-with-three-threads-prints-extra-numbers",
    "last_activity_date": 1646282321,
    "creation_date": 1646250794,
    "answer_count": 1,
    "title": "Java Thread Cooperation with Three Threads Prints Extra Numbers",
    "body": "<p>I am trying to print three AP sequences (in increments of 3) by three threads as follows:</p>\n<ul>\n<li>Thread-1 is printing the sequence <code>1, 4, 7, 10, ...</code></li>\n<li>Thread-2 is printing the sequence <code>2, 5, 8, ...</code></li>\n<li>Thread-3 is printing the sequence <code>3, 6, 9, ...</code></li>\n</ul>\n<p>A thread should wait while any other threads are taking their turns to print a number of their sequence. The threads should cooperate with each other to print the numbers sequentially from 1 to LIMIT (an integer; here LIMIT = 10).</p>\n<h2>Expected Output</h2>\n<p>(For LIMIT = 10)</p>\n<pre><code>1 (printed by Thread-1)\n2 (printed by Thread-2)\n3 (printed by Thread-3)\n4 (printed by Thread-1)\n5 (printed by Thread-2)\n6 (printed by Thread-3)\n7 (printed by Thread-1)\n8 (printed by Thread-2)\n9 (printed by Thread-3)\n10 (printed by Thread-1)\n</code></pre>\n<h2>Actual Output</h2>\n<p>(For LIMIT = 10)</p>\n<pre><code>1 (printed by Thread-1)\n2 (printed by Thread-2)\n3 (printed by Thread-3)\n4 (printed by Thread-1)\n5 (printed by Thread-2)\n6 (printed by Thread-3)\n7 (printed by Thread-1)\n8 (printed by Thread-2)\n9 (printed by Thread-3)\n10 (printed by Thread-1)\n11 (printed by Thread-2)\n12 (printed by Thread-3)\n</code></pre>\n<h2>Code</h2>\n<pre><code>class PrintingSequences {\n    private static final int LIMIT = 10;\n    int counter = 1;\n    boolean isPrinting = false;\n\n    // prints 1, 4, 7, 10, ...\n    synchronized void printAPStartingFrom1() {\n        while (counter &lt;= LIMIT) {\n            while (isPrinting || counter % 3 != 1) {\n                try {\n                    wait();\n                } catch (InterruptedException e) {\n                    System.out.println(e);\n                    Thread.currentThread().interrupt();\n                }\n            }\n            isPrinting = true;\n            System.out.println(counter++ + &quot; (printed by &quot; + Thread.currentThread().getName() + &quot;)&quot;);\n            isPrinting = false;\n            notifyAll();\n        }\n    }\n\n    // prints 2, 5, 8, 11, ...\n    synchronized void printAPStartingFrom2() {\n        while (counter &lt;= LIMIT) {\n            while (isPrinting || counter % 3 != 2) {\n                try {\n                    wait();\n                } catch (InterruptedException e) {\n                    System.out.println(e);\n                    Thread.currentThread().interrupt();\n                }\n            }\n            isPrinting = true;\n            System.out.println(counter++ + &quot; (printed by &quot; + Thread.currentThread().getName() + &quot;)&quot;);\n            isPrinting = false;\n            notifyAll();\n        }\n    }\n\n    // prints 3, 6, 9, 12, ...\n    synchronized void printAPStartingFrom3() {\n        while (counter &lt;= LIMIT) {\n            while (isPrinting || counter % 3 != 0) {\n                try {\n                    wait();\n                } catch (InterruptedException e) {\n                    System.out.println(e);\n                    Thread.currentThread().interrupt();\n                }\n            }\n            isPrinting = true;\n            System.out.println(counter++ + &quot; (printed by &quot; + Thread.currentThread().getName() + &quot;)&quot;);\n            isPrinting = false;\n            notifyAll();\n        }\n    }\n}\n\npublic class TripleThreadCommunication {\n    public static void main(String[] args) {\n        PrintingSequences naturalNumbers = new PrintingSequences();\n\n        new Thread(&quot;Thread-1&quot;) {\n            @Override\n            public void run() {\n                naturalNumbers.printAPStartingFrom1();\n            }\n        }.start();\n\n        new Thread(&quot;Thread-2&quot;) {\n            @Override\n            public void run() {\n                naturalNumbers.printAPStartingFrom2();\n            }\n        }.start();\n\n        new Thread(&quot;Thread-3&quot;) {\n            @Override\n            public void run() {\n                naturalNumbers.printAPStartingFrom3();\n            }\n        }.start();\n    }\n}\n</code></pre>\n<p>The program has three different synchronized methods: <code>printAPStartingFrom1()</code>, <code>printAPStartingFrom2()</code>, <code>printAPStartingFrom3()</code>, invoked by Thread-1, Thread-2, and Thread-3 respectively. The threads cooperate with each other using <code>wait()</code> and <code>notifyAll()</code> methods.</p>\n<p>Why is the output consistently involving two additional numbers which are exceeding the given limit of 10, i.e., 11 and 12?</p>\n",
    "question_id": 71328425,
    "tags": [
      "java",
      "multithreading",
      "thread-safety",
      "java-threads",
      "thread-synchronization"
    ],
    "score": 0,
    "accepted_answer_id": 71332202,
    "is_answered": true,
    "view_count": 252,
    "last_edit_date": 1646251571
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/9579d46f3906911c55cfbe5c7087789d?s=256&d=identicon&r=PG&f=y&so-version=2",
      "account_id": 221733,
      "user_type": "registered",
      "user_id": 479886,
      "link": "https://stackoverflow.com/users/479886/nullpointerexception",
      "reputation": 36369,
      "display_name": "NullPointerException",
      "accept_rate": 61
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/35622593/process-p-runtime-getruntime-exec-will-run-asynchronously",
    "last_activity_date": 1646264176,
    "creation_date": 1456390845,
    "answer_count": 1,
    "title": "Process p = Runtime.getRuntime().exec() will run asynchronously?",
    "body": "<p>Starting from this situation:</p>\n<pre><code>        for (String certificateSha1:certificateSha1List){\n            Process p = Runtime.getRuntime().exec(new String [] {&quot;security&quot;, &quot;delete-certificate&quot;, &quot;-Z&quot;, certificateSha1}, null , new File(this.workDir+&quot;&quot;) );      \n            \n            Helpers.asynchOutputWrite(new InputStreamReader(p.getInputStream()), standardOutput);\n        }\n</code></pre>\n<p>And noting that Helpers.asynchOutputWrite generates a new thread which will write the parametrized stream into that output file. Will these threads overlap themselves writing into the file? or will the next iteration of the for wait until exec() method has finalized?</p>\n",
    "question_id": 35622593,
    "tags": [
      "java",
      "multithreading",
      "process",
      "runtime",
      "runtime.exec"
    ],
    "score": 0,
    "is_answered": true,
    "view_count": 709,
    "last_edit_date": 1646264176
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/fa54191534d8fd4ef49d9776f0749acb?s=256&d=identicon&r=PG",
      "account_id": 24290154,
      "user_type": "registered",
      "user_id": 18235332,
      "link": "https://stackoverflow.com/users/18235332/eric",
      "reputation": 41,
      "display_name": "eric"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/71317154/what-is-the-difference-between-constructor-and-static-code-for-thread-setdefaul",
    "last_activity_date": 1646255220,
    "creation_date": 1646192084,
    "answer_count": 0,
    "title": "What is the difference between constructor and static code for &quot;Thread.setDefaultUncaughtExceptionHandler&quot; function",
    "body": "<p>What is the difference between constructor and static code?</p>\n<p>Why <code>Thread.setDefaultUncaughtExceptionHandler</code>  can not work in constructor?</p>\n<p>Source code 1:</p>\n<pre><code>class MyUncaughtExceptionHandler implements\n        Thread.UncaughtExceptionHandler {\n    @Override\n    public void uncaughtException(Thread t, Throwable e) {\n        System.out.println(&quot;caught &quot; + e.getMessage());\n    }\n}\npublic class CaughtExceptionThread extends Thread{\n\n    static {\n        Thread.setDefaultUncaughtExceptionHandler(new MyUncaughtExceptionHandler());\n    }\n}\n</code></pre>\n<p>Source code 2:</p>\n<pre><code>class MyUncaughtExceptionHandler implements\n        Thread.UncaughtExceptionHandler {\n    @Override\n    public void uncaughtException(Thread t, Throwable e) {\n        System.out.println(&quot;caught &quot; + e.getMessage());\n    }\n}\npublic class CaughtExceptionThread extends Thread{\n\n    public CaughtExceptionThread() {\n        Thread.setDefaultUncaughtExceptionHandler(new MyUncaughtExceptionHandler());\n    }\n}\n</code></pre>\n<p>Test Code:</p>\n<pre><code>public class DefaultExceptionHandler extends CaughtExceptionThread{\n\n    public static void main(String[] args) {\n        ExecutorService es =\n                Executors.newCachedThreadPool();\n        es.execute(new ExceptionThread());\n        es.shutdown();\n    }\n}\n</code></pre>\n<p>Why source code 1 is working but source code 2 is not?</p>\n",
    "question_id": 71317154,
    "tags": [
      "java",
      "multithreading"
    ],
    "score": 0,
    "is_answered": false,
    "view_count": 25,
    "last_edit_date": 1646255220
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/ca28b66512a728493d8e339dfbfdf0f0?s=256&d=identicon&r=PG&f=y&so-version=2",
      "account_id": 11951921,
      "user_type": "registered",
      "user_id": 8745360,
      "link": "https://stackoverflow.com/users/8745360/deepika-swarup",
      "reputation": 67,
      "display_name": "Deepika Swarup"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/71311675/getting-java-lang-illegalstateexception-no-thread-bound-request-found-when-usin",
    "last_activity_date": 1646246685,
    "creation_date": 1646152151,
    "answer_count": 1,
    "title": "Getting java.lang.IllegalStateException: No thread-bound request found when using Kafka Consumer to hit API",
    "body": "<p>My requirement is to fetch cookie from the API requests and then pass on the same cookie to subsequent requests in order to maintain session using the same JsessionID.</p>\n<p>For that I am trying to fetch cookie using HttpHeaders by Autowiring HttpServletRequests.\nIf I hit an API using Controller I don't get any exception and I am able to fetch all the request attributes but if I run Kafka and API runs through Kafka Consumer, I am getting below exception:</p>\n<p><em>java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request.</em></p>\n<pre><code>  @Autowired\n  HttpServletRequest req;\n  \n  @Autowired\n  HttpServletResponse res;\n \n public ResponseBean putData() {\n\n    String jsessionId = null;\n    String id = null;\n\n    // Creating Headers for request\n    String authValue = req.getHeader(&quot;authorization&quot;);\n    String headerCookie = req.getHeader(&quot;Cookie&quot;);\n\n\n    HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.set(&quot;authorization&quot;, authValue);\n    httpHeaders.setContentType(MediaType.APPLICATION_JSON);\n    httpHeaders.set(HttpHeaders.COOKIE, headerCookie);\n\n\n    HttpEntity httpEntity = new HttpEntity(httpHeaders);\n\n    ResponseEntity&lt;String&gt; responseEntity = restTemplate.exchange\n            (&quot;https://url&quot;, HttpMethod.POST, httpEntity, String.class);\n    jsessionId = responseEntity.getHeaders().getFirst(&quot;Set-Cookie&quot;);\n\n\n    if (jsessionId !=null &amp;&amp; jsessionId.contains(&quot;JSESSION&quot;)) {\n        logger.info(&quot;New login session created&quot;);\n        id = jsessionId.substring(jsessionId.indexOf('=') + 1, jsessionId.indexOf(';'));\n       \n        Cookie cookie = new Cookie(&quot;JSESSIONID&quot;, id);\n        res.addCookie(cookie);\n    }\n</code></pre>\n<p>}</p>\n<p>PS- I am not using SpringSecurity.</p>\n<p>Can anyone please help me in fixing the above issue.</p>\n",
    "question_id": 71311675,
    "tags": [
      "java",
      "multithreading",
      "spring-boot",
      "kafka-consumer-api",
      "httpsession"
    ],
    "score": 1,
    "accepted_answer_id": 71327704,
    "is_answered": true,
    "view_count": 3074,
    "last_edit_date": 1646200945
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/f80c32df1d3e07e85e4806dcaeb01d58?s=256&d=identicon&r=PG",
      "account_id": 241158,
      "user_type": "registered",
      "user_id": 511804,
      "link": "https://stackoverflow.com/users/511804/alexandr",
      "reputation": 9333,
      "display_name": "Alexandr",
      "accept_rate": 56
    },
    "content_license": "CC BY-SA 3.0",
    "link": "https://stackoverflow.com/questions/33097230/reusing-jax-rs-client-in-multi-threaded-environment-with-resteasy",
    "last_activity_date": 1646243274,
    "creation_date": 1444723255,
    "answer_count": 4,
    "title": "Reusing JAX RS Client in multi-threaded environment (with resteasy)",
    "body": "<p>According to the documentation, </p>\n\n<blockquote>\n  <p>\"Clients are heavy-weight objects that manage the client-side\n  communication infrastructure. Initialization as well as disposal of a\n  Client instance may be a rather expensive operation. It is therefore\n  advised to construct only a small number of Client instances in the\n  application. \"</p>\n</blockquote>\n\n<p>Ok, I'm trying to cache Client itself and WebTarget instances in a static variable, the someMethod() is invoked in multi-threaded environment:</p>\n\n<pre><code>private static Client client = ClientBuilder.newClient();\nprivate static WebTarget webTarget = client.target(\"someBaseUrl\");\n...\npublic static String someMethod(String arg1, String arg2)\n{\n    WebTarget target = entrTarget.queryParam(\"arg1\", arg1).queryParam(\"arg2\", arg2);\n    Response response = target.request().get();\n    final String result = response.readEntity(String.class);\n    response.close();\n    return result;\n}\n</code></pre>\n\n<p>But sometimes (not always) I'm get an exception:</p>\n\n<blockquote>\n  <p>Invalid use of BasicClientConnManager: connection still allocated.\n  Make sure to release the connection before allocating another one.</p>\n</blockquote>\n\n<p>How can Client/WebTarget be reused/cached correctly? Is it possible with JAX RS Client API? Or I have to use some framework-specific features (resteasy/jersey) Could you provide some example or documentation?</p>\n",
    "question_id": 33097230,
    "tags": [
      "java",
      "multithreading",
      "jersey",
      "jax-rs",
      "resteasy"
    ],
    "score": 22,
    "is_answered": true,
    "view_count": 16067
  },
  {
    "owner": {
      "profile_image": "https://lh3.googleusercontent.com/-RP1GwpkAYX4/AAAAAAAAAAI/AAAAAAAAAEc/fknm-MHAJYU/photo.jpg?sz=256",
      "account_id": 15545149,
      "user_type": "registered",
      "user_id": 11214643,
      "link": "https://stackoverflow.com/users/11214643/delark",
      "reputation": 1170,
      "display_name": "Delark"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/71325131/nested-spin-lock-vs-volatile-check",
    "last_activity_date": 1646234484,
    "creation_date": 1646234484,
    "answer_count": 0,
    "title": "Nested spin-lock vs volatile check",
    "body": "<p>I was about to write something about this, but maybe it is better to have a second opinion before appearing like a fool...</p>\n<p>So the idea in the next piece of code (android's room package v2.4.1, RoomTrackingLiveData), is that the winner thread is kept alive, and is forced to check for contention that may have entered the process (coming from losing threads) while computing.\nWhile fail CAS operations performed by these losing threads keep them out from entering and executing code, preventing repeating signals (mComputeFunction.call() OR postValue()).</p>\n<pre><code>    final Runnable mRefreshRunnable = new Runnable() {\n        @WorkerThread\n        @Override\n        public void run() {\n            if (mRegisteredObserver.compareAndSet(false, true)) {\n                mDatabase.getInvalidationTracker().addWeakObserver(mObserver);\n            }\n            boolean computed;\n            do {\n                computed = false;\n                if (mComputing.compareAndSet(false, true)) {\n                    try {\n                        T value = null;\n                        while (mInvalid.compareAndSet(true, false)) {\n                            computed = true;\n                            try {\n                                value = mComputeFunction.call();\n                            } catch (Exception e) {\n                                throw new RuntimeException(&quot;Exception while computing database&quot;\n                                        + &quot; live data.&quot;, e);\n                            }\n                        }\n                        if (computed) {\n                            postValue(value);\n                        }\n                    } finally {\n                        mComputing.set(false);\n                    }\n                }\n            } while (computed &amp;&amp; mInvalid.get());\n        }\n    };\n\n    final Runnable mInvalidationRunnable = new Runnable() {\n        @MainThread\n        @Override\n        public void run() {\n            boolean isActive = hasActiveObservers();\n            if (mInvalid.compareAndSet(false, true)) {\n                if (isActive) {\n                    getQueryExecutor().execute(mRefreshRunnable);\n                }\n            }\n        }\n    };\n</code></pre>\n<p>The most obvious thing here is that atomics are being used for everything they are not good at:</p>\n<p>Identifying losers and ignoring winners (what reactive patterns need).</p>\n<p>AND a happens once behavior, performed by the loser thread.</p>\n<p>So this is completely counter intuitive to what atomics are able to achieve, since they are extremely good at defining winners, AND anything that requires a &quot;happens once&quot; becomes impossible to ensure state consistency (the last one is suitable to start a philosophical debate about concurrency, and I will definitely agree with any conclusion).</p>\n<p>If atomics are used as: &quot;Contention checkers&quot; and &quot;Contention blockers&quot; then we can implement the exact principle with a volatile check of an atomic reference after a successful CAS.</p>\n<p>And checking this volatile against the snapshot/witness during every other step of the process.</p>\n<pre><code>      private final AtomicInteger invalidationCount = new AtomicInteger();\n\n\n      private final IntFunction&lt;Runnable&gt; invalidationRunnableFun = invalidationVersion -&gt; (Runnable) () -&gt; {\n          if (invalidationVersion != invalidationCount.get()) return;\n          try {\n              T value = computeFunction.call();\n              if (invalidationVersion != invalidationCount.get()) return; //In case computation takes too long...\n              postValue(value);\n          } catch (Exception e) {\n              e.printStackTrace();\n          }\n      };\n      getQueryExecutor().execute(invalidationRunnableFun.apply(invalidationCount.incrementAndGet()));\n</code></pre>\n<p>In this case, each thread is left with the individual responsibility of checking their position in the contention lane, if their position moved and is not at the front anymore, it means that a new thread entered the process, and they should stop further processing.</p>\n<p>This alternative is so laughably simple that my first question is:</p>\n<p>Why didn't they do it like this?</p>\n<p>Maybe my solution has a flaw... but the thing about the first alternative (the nested spin-lock) is that it follows the idea that an atomic CAS operation cannot be verified a second time, and that a verification can only be achieved with a cmpxchg process.... which is... false.</p>\n<p>It also follows the common (but wrong) believe that what you define after a successful CAS is the sacred word of GOD... as I've seen code seldom check for concurrency issues once they enter the if body.</p>\n<pre><code>            if (mInvalid.compareAndSet(false, true)) {\n                // Ummm... yes... mInvalid is still true...\n                // Let's use a second atomicReference just in case...\n            }\n</code></pre>\n<p>It also follows common code conventions that involve &quot;double-&lt;enter something&gt;&quot; in concurrency scenarios.</p>\n<p>So only because the first code follows those ideas, is that I am inclined to believe that my solution is a valid and better alternative.</p>\n<p>Even though there is an argument in favor of the &quot;nested spin-lock&quot; option, but does not hold up much:</p>\n<p>The first alternative is &quot;safer&quot; precisely because it is SLOWER, so it has MORE time to identify contention at the end of the current of incoming threads.</p>\n<p>BUT is not even 100% safe because of the &quot;happens once&quot; thing that is impossible to ensure.</p>\n<p>There is also a behavior with the code, that, when it reaches the end of a <strong>continuos flow</strong> of incoming threads, 2 signals are dispatched one after the other, the second to last one, and then the last one.</p>\n<p>But IF it is safer because it is slower, wouldn't that defeat the goal of using atomics, since their usage is supposed to be with the aim of being a better performance alternative in the first place?</p>\n",
    "question_id": 71325131,
    "tags": [
      "java",
      "multithreading",
      "concurrency",
      "atomic",
      "compare-and-swap"
    ],
    "score": 0,
    "is_answered": false,
    "view_count": 111
  },
  {
    "owner": {
      "profile_image": "https://i.stack.imgur.com/WDIU2.jpg?s=256&g=1",
      "account_id": 7280482,
      "user_type": "registered",
      "user_id": 5550425,
      "link": "https://stackoverflow.com/users/5550425/roman-horbovyi",
      "reputation": 75,
      "display_name": "Roman Horbovyi"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/71212008/can-another-thread-see-an-effectively-immutable-object-in-an-inconsistent-state",
    "last_activity_date": 1646233694,
    "creation_date": 1645471877,
    "answer_count": 3,
    "title": "Can another thread see an effectively immutable object in an inconsistent state if it is published with a volatile reference?",
    "body": "<p>According to Java Concurrency in Action if we have the following class:</p>\n<pre><code>public class Wrapper {\n  private int num;\n\n  public Wrapper(int num) {\n    this.num = num;\n  }\n\n  public void assertCorrectness() {\n    if (num != num)\n      throw new AssertionError(&quot;This is false&quot;);\n  }\n}\n</code></pre>\n<p>and we initialise an instance of this class and publish it in a non-safe way (through a simple public field for example), then the assertCorrectness() might indeed throw an AssertionError, if called from another thread. In other words, this means that some another thread might see an up-to-date reference to the instance, but the state of the instance itself could be out-of-date (so a thread can see an object exists but it is in a partially constructed / inconsistent state).</p>\n<p>On the other hand, it is said that publishing an instance of this class through a volatile reference is considered safe. However it was my understanding that volatile just guarantees that any thread will always see an up-to-date version of a reference, but not the object's state being referenced. So we can be sure that if one thread assigns a new instance of the Wrapper class to a volatile field, then all the other threads will see that the reference was updated. But is there a risk that they will still see an object in an inconsistent / partially constructed state?</p>\n",
    "question_id": 71212008,
    "tags": [
      "java",
      "multithreading",
      "concurrency"
    ],
    "score": 4,
    "accepted_answer_id": 71212240,
    "is_answered": true,
    "view_count": 136
  },
  {
    "owner": {
      "profile_image": "https://i.stack.imgur.com/ixvj4.png?s=256&g=1",
      "account_id": 4890996,
      "user_type": "registered",
      "user_id": 3942142,
      "link": "https://stackoverflow.com/users/3942142/jayendra-bhatt",
      "reputation": 1347,
      "display_name": "jayendra bhatt",
      "accept_rate": 36
    },
    "content_license": "CC BY-SA 3.0",
    "link": "https://stackoverflow.com/questions/33384822/why-to-use-a-readlock",
    "last_activity_date": 1646226073,
    "creation_date": 1446015714,
    "answer_count": 4,
    "title": "Why to use a readlock?",
    "body": "<p>I read that a write lock is exclusive and a read lock is shared , so a piece of code which in readlock anyway  can be accessed by multiple threads . What if no read lock is acquired by the threads in contention . Any way they are going to read only . Also what if a Thread acquiring a readlock tries to write something ?</p>\n\n<p>Thanks</p>\n",
    "question_id": 33384822,
    "tags": [
      "java",
      "multithreading",
      "readwritelock"
    ],
    "score": 5,
    "is_answered": true,
    "view_count": 4694
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/fd320b2ee6e007375c49892457ea7842?s=256&d=identicon&r=PG",
      "account_id": 24314867,
      "user_type": "registered",
      "user_id": 18256231,
      "link": "https://stackoverflow.com/users/18256231/hadsag",
      "reputation": 11,
      "display_name": "hadsag"
    },
    "closed_date": 1646219981,
    "link": "https://stackoverflow.com/questions/71320990/unlock-inputstream-java",
    "last_activity_date": 1646216748,
    "creation_date": 1646216350,
    "answer_count": 0,
    "title": "unlock InputStream Java",
    "body": "<p>I have these two threads: t1 and t2. t1 is always listening to messages from the server, but t2 is only notified when a message is sent. The reason to lock ObjectInputStream is that the message waits for confirmation of recipient and message-id.</p>\n<p>The question: why does t1 never release the lock on ois?</p>\n<p><strong>t1 method</strong></p>\n<pre><code>public void run() {\n    Object o;\n    while (!Thread.interrupted()) {\n        try {\n            synchronized (ois) {\n                System.out.println(&quot;t1: locked ois&quot;);\n                o = ois.readObject();\n            }\n            System.out.println(&quot;t1: unlocked ois&quot;);\n            if (o.getClass().isAssignableFrom(Model.Message.class)) {\n                receiveMessage((Message) o);\n            }\n            if (o.getClass().isAssignableFrom(ArrayList.class)) {\n                updateUsers((ArrayList&lt;Model.User&gt;) o);\n            }\n        } catch (EOFException e) {\n            System.out.println(&quot;stopped&quot;);\n            t2.stop();\n            t1.stop();\n        } catch (IOException | ClassNotFoundException e) {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException ex) {\n                ex.printStackTrace();\n            }\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre>\n<p><strong>t2 method</strong></p>\n<pre><code>public void run() {\n        while (!Thread.interrupted()) {\n            try {\n                Message currMessage = messageBuffer.get();\n                System.out.println(&quot;t2: waiting to lock ois&quot;);\n                synchronized (ois) {\n                    System.out.println(&quot;t2: locked ois&quot;);\n                    oos.writeObject(currMessage);\n                    oos.flush();\n                    int currID = -1;\n                    while (currID &lt; 0) {\n                        currID = ois.readInt();\n                        currMessage.setCurrId(currID);\n                    }\n                }\n            } catch(IOException | InterruptedException e){\n                e.printStackTrace();\n            }\n\n        }\n    }\n}\n</code></pre>\n<p><strong>The buffer that regulates t2</strong></p>\n<pre><code>public class Buffer&lt;T&gt; implements Serializable {\nprivate static final long serialVersionUID = -5886308724572898536L;\nprivate LinkedList&lt;T&gt; buffer = new LinkedList&lt;T&gt;();\n\npublic synchronized void put(T obj) {\n    buffer.addLast(obj);\n    notifyAll();\n}\n\npublic synchronized T get() throws InterruptedException {\n    while(buffer.isEmpty()) {\n        wait();\n    }\n    return buffer.removeFirst();\n}\n\npublic int size() {\n    return buffer.size();\n}\n}\n</code></pre>\n<p>The output</p>\n<pre><code>t1: locked ois\nt2: waiting to lock ois\n</code></pre>\n",
    "question_id": 71320990,
    "tags": [
      "java",
      "multithreading",
      "synchronization",
      "inputstream"
    ],
    "score": 1,
    "closed_reason": "Duplicate",
    "is_answered": false,
    "view_count": 35,
    "last_edit_date": 1646216748
  },
  {
    "owner": {
      "profile_image": "https://lh3.googleusercontent.com/a-/AOh14GiAodSydlQ6OSWarwkzr-_d2qQsh_c6dIkeK2PS=k-s256",
      "account_id": 23525175,
      "user_type": "registered",
      "user_id": 17571825,
      "link": "https://stackoverflow.com/users/17571825/nickthefreak97",
      "reputation": 33,
      "display_name": "NickTheFreak97"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/71096361/monitor-java-synchronized-methods-how-to-schedule-an-activity-in-a-non-blocking",
    "last_activity_date": 1646216677,
    "creation_date": 1644704567,
    "answer_count": 2,
    "title": "Monitor/Java synchronized methods, how to schedule an activity in a non-blocking way?",
    "body": "<p>So, basically the whole idea is that I have to simulate the entrance of a school. N students queue at four turnstiles and then they join a random classroom. When the first student joins that classroom a lecture starts and <strong>lasts for a time T</strong>, after which the lecture ends and students go home.</p>\n<p>I'm specifically struggling at the &quot;lasts for a time T&quot; part. Here is what I tried:</p>\n<p>StudentThread:</p>\n<pre><code>@Override\npublic void run() {\n    try {\n        /** Some uninteresting code**/\n        classroom.joinClass(studentID);\n       \n    }catch(InterruptedException e) {\n        \n    }\n}\n</code></pre>\n<p>Classroom:</p>\n<pre><code>private static final int LECTURE_DURATION = 3000;\n \npublic synchronized void joinClass(UUID student) throws InterruptedException {\n            this.students.add(student);\n            \n            if( students.size() == 1 ) {\n                lecture = true;\n                new ScheduledThreadPoolExecutor(1).schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        while( !students.isEmpty() )\n                            students.remove(0);\n                        \n                        lecture = false;\n                        notifyAll();\n                    }\n                }, LECTURE_DURATION, TimeUnit.MILLISECONDS);\n                \n            }\n            \n            while( lecture )\n                wait();\n        }\n</code></pre>\n<p>The apparent problem with this solution is that the first student joining a classroom will block the access to all the others, basically never leaving the joinClass method until the lecture ends. I assume it's because of that schedule call. I also can only use synchronized methods, no semaphores otherwise it would've been relatively easy. What should I do in this case?</p>\n",
    "question_id": 71096361,
    "tags": [
      "java",
      "multithreading",
      "synchronized",
      "monitor"
    ],
    "score": 0,
    "is_answered": true,
    "view_count": 256
  },
  {
    "owner": {
      "user_type": "does_not_exist",
      "display_name": "user16037629"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/69973062/why-cant-server-and-client-be-started-together",
    "last_activity_date": 1636974569,
    "creation_date": 1636972832,
    "answer_count": 2,
    "title": "Why can&#39;t server and client be started together?",
    "body": "<p>Relevant code:</p>\n<pre class=\"lang-java prettyprint-override\"><code> @Test\n    public void serverTest() throws IOException {\n        GameServer server = new GameServer();\n        server.start(9000);\n        GameClient client1 = new GameClient();\n        GameClient client2 = new GameClient();\n        client1.startConnection(&quot;localhost&quot;, 9000);\n        client2.startConnection(&quot;localhost&quot;, 9000);\n        client1.sendMessage(&quot;Hey I am client 1&quot;);\n        client2.sendMessage(&quot;Hey I am client 2&quot;);\n\n    }\n</code></pre>\n<pre class=\"lang-java prettyprint-override\"><code>public class GameServer {\n    private ServerSocket serverSocket;\n\n    public void start(int port) throws IOException {\n        System.out.println(&quot;Server started !!!&quot;);\n        serverSocket = new ServerSocket(port);\n        while (true) {\n            new Thread(new GameClientHandler(serverSocket.accept())).start();\n        }\n    }\n\n    public void stop() throws IOException {\n        serverSocket.close();\n    }\n\n\n   private static class GameClientHandler implements Runnable {\n        private Socket clientSocket;\n        private PrintWriter out;\n        private BufferedReader in;\n\n        public GameClientHandler(Socket socket) {\n            this.clientSocket = socket;\n        }\n\n        @Override\n        public void run() {\n            System.out.println(Thread.currentThread().getName());\n            try {\n                out = new PrintWriter(clientSocket.getOutputStream(), true);\n                in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n\n                String inputLine = in.readLine();\n                while ((inputLine = in.readLine()) != null){\n                    System.out.print(inputLine);\n                }\n\n\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n\n\n\n            try {\n                in.close();\n                out.close();\n                clientSocket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n\n        }\n    }\n</code></pre>\n<p>Why can't the server and client be started together in the <code>@Test</code>? I think it gets stuck in the infinite while loop but at the same time, shouldn't there be context switching with the new threads started after accepting the connection?</p>\n<p>I expected at least the name of the 2 new threads to be printed but it doesn't happen.</p>\n",
    "question_id": 69973062,
    "tags": [
      "java",
      "multithreading"
    ],
    "score": 1,
    "accepted_answer_id": 69973382,
    "is_answered": true,
    "view_count": 55,
    "last_edit_date": 1636973221
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/6ebe86c740cbc6df07e23cf0109fae16?s=256&d=identicon&r=PG&f=y&so-version=2",
      "account_id": 9966483,
      "user_type": "registered",
      "user_id": 7374044,
      "link": "https://stackoverflow.com/users/7374044/user7374044",
      "reputation": 157,
      "display_name": "user7374044"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/69967003/multiple-writers-and-readers-in-microservices-approach",
    "last_activity_date": 1636935423,
    "creation_date": 1636922495,
    "answer_count": 0,
    "title": "Multiple writers and readers in microservices approach",
    "body": "<p>I've spent some time today on stackoverflow.com and haven't found an answer for my challenge.</p>\n<h1>The challenge</h1>\n<p>I would like to create a Spring Boot based microservice I can scale easily. That microservice will be writing some entries (e.g. Product) to database and reading them. This service will be deployed as a <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/deployment/\" rel=\"nofollow noreferrer\">k8s deployment</a> . Microservice saves data in AWS RDS MySQL instance. I will be scaling the microservice by embedded k8s  Deployment mechanisms.</p>\n<h1>Questions</h1>\n<ol>\n<li>How can I create an spring boot based app that will handle saving data across many threads and across many instances of the app?</li>\n<li>I've read some posts that in that case there should be some queue and from the queue only once instance and one thread should save the data but I guess it's cumbersome. I expect that there will be more and more traffic and as a consequence -&gt; more and more messages in a queue to process.</li>\n<li>Can you recommend some books ideally about that problem (in my words &quot;multithreading and multi-instances writes synchronization problem).</li>\n</ol>\n<p>Thank you for any help.</p>\n",
    "question_id": 69967003,
    "tags": [
      "java",
      "multithreading",
      "spring-boot",
      "microservices",
      "scalability"
    ],
    "score": 0,
    "is_answered": false,
    "view_count": 158,
    "last_edit_date": 1636935423
  },
  {
    "owner": {
      "profile_image": "https://lh3.googleusercontent.com/a/AATXAJzLkOQelMMXYxAJxRKLvxqRtrmM6VXMlnw9PvD0=k-s256",
      "account_id": 23184907,
      "user_type": "registered",
      "user_id": 17282180,
      "link": "https://stackoverflow.com/users/17282180/iosiv",
      "reputation": 25,
      "display_name": "Iosiv"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/69967482/alternate-between-two-threads-using-only-wait-and-notify",
    "last_activity_date": 1636927783,
    "creation_date": 1636926840,
    "answer_count": 1,
    "title": "Alternate between two threads using only wait() and notify()",
    "body": "<p>I'm working on an excercise about threads in java and I'm required to do the following:\nSuppose you have two threads, let's say player1 and player2, both sharing a Ball object. The goal is to make one of them have the ball for 1 second, then drop it and make the second player do the same thing, a couple of times.\nMore specifically, I have two classes like this (Player2 is the same, except for the name):</p>\n<pre><code>class Player1 extends Thread{\n\n    private Ball ball;\n\n    public Player1 (Ball ball) {\n        this.ball=ball;\n        this.setName(&quot;Player 1&quot;);\n    }\n\n    @Override\n    public void run() {\n        for (int i=0;i&lt;25;i++){\n            try{\n                ball.takeBall(); //Player takes the ball\n                sleep(1000);\n                ball.dropBall(); //Player drops the ball\n            }catch (Exception e){\n\n            }\n        }\n    }\n}\n</code></pre>\n<p>The goal is to write the methods <code>takeBall()</code> and <code>dropBall()</code>in a way that makes the two threads alternate.</p>\n<p>This is my attempt.</p>\n<pre><code>\npublic class Ball{\n\n    boolean ballInUse = false;\n\n    public synchronized void takeBall() throws InterruptedException {\n        System.out.println(&quot;Ball taken by -&gt; &quot;+Thread.currentThread().getName());\n\n        while (ballInUse){\n           wait();\n       }\n\n       ballInUse = true;\n    }\n\n\n    public synchronized void dropBall() throws InterruptedException {\n        System.out.println(&quot;Ball dropped by -&gt; &quot;+Thread.currentThread().getName());\n        ballInUse = false;\n        notify();\n    }\n\n}\n\n//Edited to show the main class\n\nclass MyMainClass\n    public static void main(String args[]) {\n\n        Ball ball = new Ball();\n\n        Player1 player1 = new Player1(ball);\n        Player2 player2 = new Player2(ball);\n\n        player1.start();\n        player2.start();\n        \n    }// main\n\n}\n\n</code></pre>\n<p>It kind of makes sense in my head that since the variable <code>ballInUse</code> only becomes false after the ball has been dropped by the other thread, the two threads should alternate between these two methods.\nObviously there's something wrong with that idea, since this is what I'm getting:</p>\n<pre><code>Ball taken by -&gt; Player 1\nBall taken by -&gt; Player 2\nBall dropped by -&gt; Player 1\nBall taken by -&gt; Player 1\nBall dropped by -&gt; Player 1\nBall taken by -&gt; Player 1\nBall dropped by -&gt; Player 1\nBall taken by -&gt; Player 1\n</code></pre>\n<p>It seems like the second thread never gets notified from the second method. I'm surely missing an important point here, so any hints would be appreciated.</p>\n",
    "question_id": 69967482,
    "tags": [
      "java",
      "multithreading",
      "wait"
    ],
    "score": 0,
    "accepted_answer_id": 69967575,
    "is_answered": true,
    "view_count": 257,
    "last_edit_date": 1636927386
  },
  {
    "owner": {
      "profile_image": "https://i.stack.imgur.com/17qiv.jpg?s=256&g=1",
      "account_id": 23051250,
      "user_type": "registered",
      "user_id": 17168037,
      "link": "https://stackoverflow.com/users/17168037/tanmay-mandaogane",
      "reputation": 5,
      "display_name": "Tanmay Mandaogane"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/69957844/how-to-add-synchronization-in-following-lambda-exp",
    "last_activity_date": 1636926387,
    "creation_date": 1636834136,
    "answer_count": 1,
    "title": "how to add synchronization in following lambda exp?",
    "body": "<pre><code>   {\nList&lt;Integer&gt; list = new ArrayList&lt;&gt;(10000);\n        \nIntStream.range(1, 10000).forEach(list::add);\n\nThread reader = new Thread(() -&gt;  {\n            list.forEach(i -&gt; System.out.println(&quot;r &quot; + i));\n        }, &quot;t1&quot;);\n}\n</code></pre>\n<p>Can synchronized blocks be used for some of the code blocks written in lambda expression . With respect to the following code snippet :</p>\n",
    "question_id": 69957844,
    "tags": [
      "java",
      "multithreading",
      "list",
      "lambda",
      "synchronization"
    ],
    "score": 0,
    "accepted_answer_id": 69957970,
    "is_answered": true,
    "view_count": 276,
    "last_edit_date": 1636926387
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/bfe77bf1a0c97d310396079b2c85a7e3?s=256&d=identicon&r=PG&f=y&so-version=2",
      "account_id": 20262549,
      "user_type": "registered",
      "user_id": 14860590,
      "link": "https://stackoverflow.com/users/14860590/zexed640",
      "reputation": 167,
      "display_name": "zexed640"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/69960082/final-listt-and-thread-safety",
    "last_activity_date": 1636890815,
    "creation_date": 1636860971,
    "answer_count": 1,
    "title": "final List&lt;T&gt; and thread safety",
    "body": "<p>I'm trying to understand how does <code>final</code> field acts in multi-threaded environment.</p>\n<p>I read these related posts:</p>\n<p><a href=\"https://stackoverflow.com/questions/7144915/final-fields-and-thread-safety\">final fields and thread-safety</a></p>\n<p><a href=\"https://stackoverflow.com/questions/6457109/java-concurrency-is-final-field-initialized-in-constructor-thread-safe\">Java concurrency: is final field (initialized in constructor) thread-safe?</a></p>\n<p><a href=\"https://stackoverflow.com/questions/4449252/java-final-field-freeze-on-object-reachable-from-final-fields\">Java: Final field freeze on object reachable from final fields</a></p>\n<p>and tried to simulate situation where <code>final</code> field will prevent threads from working with not fully constructed object.</p>\n<pre><code>public class Main {\n    public static void main(String[] args) {\n        new _Thread().start();\n        new Dummy();\n    }\n\n    static class _Thread extends Thread {\n        static Dummy dummy;\n\n        @Override\n        public void run() {\n            System.out.println(dummy.getIntegers().size() == 10_000);\n        }\n    }\n\n    static class Dummy {\n        private final List&lt;Integer&gt; integers = new ArrayList&lt;&gt;();\n\n        public Dummy() {\n            _Thread.dummy = this;\n\n            for (int a = 0; a &lt; 10_000; a++) {\n                integers.add(a);\n            }\n        }\n\n        public List&lt;Integer&gt; getIntegers() {\n            return integers;\n        }\n    }\n}\n</code></pre>\n<p>So as I understood, <code>_Thread</code> will stop execution on <code>getIntegers()</code> and wait until loop finish filling collection. But whether there is a <code>final</code> modifier or not on field <code>integers</code>, result of <code>run()</code> is unpredictable. Also I know that there is a possibility of NPE.</p>\n",
    "question_id": 69960082,
    "tags": [
      "java",
      "multithreading",
      "final"
    ],
    "score": 0,
    "accepted_answer_id": 69960265,
    "is_answered": true,
    "view_count": 479,
    "last_edit_date": 1636890815
  },
  {
    "owner": {
      "profile_image": "https://lh3.googleusercontent.com/a/AATXAJynPZiDBDs71AjXvsPBCToWWKmYqFbwB2ssAvX0=k-s256",
      "account_id": 23182000,
      "user_type": "registered",
      "user_id": 17279700,
      "link": "https://stackoverflow.com/users/17279700/darius-boengiu",
      "reputation": 21,
      "display_name": "Darius Boengiu"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/69954623/i-have-to-create-an-application-where-i-need-to-use-threads-but-they-dont-work",
    "last_activity_date": 1636857098,
    "creation_date": 1636809559,
    "answer_count": 1,
    "title": "I have to create an application where I need to use threads, but they don&#39;t work as they should",
    "body": "<p>I have this code where every person is represented by a special Thread that is instantiated with random ticket data and every 5 seconds a FestivalStatisticsThread wakes up and reads the new data from the gate and generates statistics (how many people have enterd and with what type of ticket).</p>\n<pre><code>public class Main {\n    public static void main(String[] args) throws InterruptedException {\n\n        FestivalGate gate = new FestivalGate();\n        FestivalAttendeeThread festivalAttendee;\n        FestivalStatisticsThread statsThread = new FestivalStatisticsThread(gate);\n        TicketType ticketType;\n        for (int i = 1; i &lt; 85_000; i++) {\n            ticketType = TicketType.randomTicket();\n            festivalAttendee = new FestivalAttendeeThread(ticketType, gate);\n            festivalAttendee.start();\n            festivalAttendee.join();\n\n        }\n\n        statsThread.start();\n\n        System.out.println(gate.getValidatedTickets().size());\n\n    }\n}\n</code></pre>\n<p>The problem is that I did not find a way to wake up that thread every 5 second and generate statisitics, the only way I could do it is by generating the statistics only once at the end\nThe second problem is that I should use join after I start the festivalAttendee thread, otherwise the list where I store the ticket types doesn't store all of them, although is synchronized.</p>\n<p>I will also leave here the code that does the inner workings of my code:</p>\n<pre><code>public class FestivalGate {\n    private List&lt;TicketType&gt; validatedTickets = Collections.synchronizedList(new ArrayList&lt;&gt;());\n    public List&lt;TicketType&gt; getValidatedTickets() {\n        return validatedTickets;\n    }\n\n}\n</code></pre>\n<hr />\n<pre><code>public class FestivalAttendeeThread extends Thread {\n\n    TicketType ticketType;\n    FestivalGate festivalGate;\n\n    public FestivalAttendeeThread(TicketType ticketType, FestivalGate festivalGate) {\n        this.ticketType = ticketType;\n        this.festivalGate = festivalGate;\n    }\n\n    @Override\n    public synchronized void run() {\n        this.festivalGate.getValidatedTickets().add(ticketType);\n    }\n\n}\n</code></pre>\n<hr />\n<pre><code>public class FestivalStatisticsThread extends Thread {\n\n    private int NR_OF_FULL;\n    private int NR_OF_FULL_VIP;\n    private int NR_OF_FREE_PASS;\n    private int NR_OF_ONE_DAY;\n    private int NR_OF_ONE_DAY_VIP;\n    private int TOTAL_NUMBER_OF_PEOPLE;\n\n    private FestivalGate gate;\n\n    public FestivalStatisticsThread(FestivalGate gate) {\n        this.gate = gate;\n    }\n\n    @Override\n    public void run() {\n        calculateNumberOfEachTicketType();\n        calculateNumberOfPeople();\n        showStats();\n        try {\n            Thread.sleep(5000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    private void calculateNumberOfEachTicketType() {\n        synchronized (this.gate.getValidatedTickets()) {\n            for (TicketType ticketType : this.gate.getValidatedTickets()) {\n                if (ticketType.equals(TicketType.FULL)) {\n                    NR_OF_FULL += 1;\n                } else if (ticketType.equals(TicketType.FULL_VIP)) {\n                    NR_OF_FULL_VIP += 1;\n                } else if (ticketType.equals(TicketType.FREE_PASS)) {\n                    NR_OF_FREE_PASS += 1;\n                } else if (ticketType.equals(TicketType.ONE_DAY)) {\n                    NR_OF_ONE_DAY += 1;\n                } else if (ticketType.equals(TicketType.ONE_DAY_VIP)) {\n                    NR_OF_ONE_DAY_VIP += 1;\n                }\n            }\n        }\n    }\n\n\n    private void calculateNumberOfPeople() {\n        TOTAL_NUMBER_OF_PEOPLE +=\n                NR_OF_FULL +\n                        NR_OF_FULL_VIP +\n                        NR_OF_FREE_PASS +\n                        NR_OF_ONE_DAY +\n                        NR_OF_ONE_DAY_VIP\n        ;\n    }\n\n    public void showStats() {\n        System.out.println(\n                TOTAL_NUMBER_OF_PEOPLE + &quot; people have entered &quot; + &quot;\\n&quot; +\n                        NR_OF_FULL + &quot; have full tickets &quot; + &quot;\\n&quot; +\n                        NR_OF_FREE_PASS + &quot; have free passes &quot; + &quot;\\n&quot; +\n                        NR_OF_FULL_VIP + &quot; have full vip passes &quot; + &quot;\\n&quot; +\n                        NR_OF_ONE_DAY + &quot; have one day passes &quot; + &quot;\\n&quot; +\n                        NR_OF_ONE_DAY_VIP + &quot; have one day vip passes&quot;\n        );\n        System.out.println(&quot;-----------------------------------------------------------&quot;);\n        System.out.println(&quot;-----------------------------------------------------------&quot;);\n    }\n\n\n}\n</code></pre>\n",
    "question_id": 69954623,
    "tags": [
      "java",
      "multithreading",
      "concurrency",
      "thread-safety"
    ],
    "score": -2,
    "is_answered": false,
    "view_count": 105,
    "last_edit_date": 1636809638
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/df5e4bae59e1c0f2e390095d2142fe1a?s=256&d=identicon&r=PG",
      "account_id": 22856176,
      "user_type": "registered",
      "user_id": 17001012,
      "link": "https://stackoverflow.com/users/17001012/riggel",
      "reputation": 11,
      "display_name": "Riggel"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/69946372/activity-takes-a-long-time-to-load",
    "last_activity_date": 1636837830,
    "creation_date": 1636735813,
    "answer_count": 0,
    "title": "Activity takes a long time to load",
    "body": "<p>My activity contains only ViewPager. I generate questions and insert them into fragments. My ViewPager contains 30 elements.I have a menu from where I launch the activity, when I first start the activity, it starts 3 seconds on average, then faster. I get ANRs in my developer console <strong>Input dispatching timed out</strong>. I decided to track programmatically the time between <code>onCreate()</code> and <code>onWindowFocusChanged()</code> calls.</p>\n<ul>\n<li>2021-11-12 09:08:39.190/TAG: ONCREATE</li>\n<li>2021-11-12 09:08:39.369/TAG: ONRESUME</li>\n<li>2021-11-12 09:08:41.301/TAG: onWindowFocusChanged<br>\nI believe that the problem is in creating fragments for ViewPager.I decided to create fragments for it using background threads.</li>\n</ul>\n<pre><code>    @Override\n    public void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        new Handler(getMainLooper()).post(new Runnable() {\n                @Override\n                public void run() {\n                    for (int i = 0; i &lt;= 14; i++){\n                        fragmentsType1.add(QuestionFragment1.newInstance(questions.get(i)));\n                    }\n                }\n            });\n\n            new Handler(getMainLooper()).post(new Runnable() {\n                @Override\n                public void run() {\n                    for (int i = 15; i &lt;= 29; i++){\n                        fragmentsType2.add(QuestionFragment2.newInstance(questions.get(i)));\n                    }\n                }\n            });\n\n            //I insert everything into 1 list so that there are no problems with locks\n            fragments.addAll(fragmentsType1);\n            fragments.addAll(fragmentsType2);\n    }\n</code></pre>\n<pre><code>        @Override\n        public Fragment getItem(int position) {\n            return fragments.get(position);\n        }\n</code></pre>\n<p>But I am getting error in <code> FragmentPagerAdapter.getItem()</code> that the size of the list is 0. Because <code>getItem()</code> is called while the fragments have not been created yet. What should I do?<br>\nHere is my Fragment.</p>\n<pre><code>public class QuestionFragment1 extends Fragment implements TestActivity.DataFragmentListener {\n\n    private OnAnswerSelectedListener callBack;\n    private Question question;\n    private int questionPosition;\n    private int answerState;\n    private int correctAnswerIndex;\n    private int incorrectAnswerIndex;\n    private boolean isGameOver = false;\n\n    private ImageView[] buttons;\n\n    private TextView title;\n    private ImageView image1;\n    private ImageView image2;\n    private ImageView image3;\n    private ImageView image4;\n\n    public QuestionFragment1(){}\n\n    @Override\n    public void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        getFragmentArguments();\n    }\n\n    @Nullable\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.questionFragment, container, false);\n        initWidgets(view);\n        setQuestion();\n        setClickListeners();\n\n        return view;\n    }\n\n    @Override\n    public void onAttach(Context context) {\n        super.onAttach(context);\n        boolean isNullListeners = ((TestActivity)context).checkIsNullArrayListeners();\n        if (isNullListeners){\n           ((TestActivity)context).initListeners();\n        }\n        ((TestActivity)context).registerDataFragmentListener(this);\n    }\n\n    @Override\n    public void onDestroy() {\n        ((TestActivity) Objects.requireNonNull(getActivity())).unregisterDataFragmentListener(this);\n        super.onDestroy();        \n    }\n\n    public static QuestionFragment1 newInstance(Question question, int questionPosition){\n        QuestionFragment1 fragment = new QuestionFragment1();\n        Bundle bundle = new Bundle();\n        bundle.putSerializable(&quot;Question&quot;, question);\n        bundle.putInt(&quot;QuestionPosition&quot;, questionPosition);\n        fragment.setArguments(bundle);\n\n        return fragment;\n    }\n\n    public void setCallBackListener(OnAnswerSelectedListener callBack){\n        this.callBack = callBack;\n    }\n\n    private void getFragmentArguments(){\n        question = (Question) (getArguments() != null ? getArguments().getSerializable(&quot;Question&quot;) : null);\n        questionPosition = getArguments().getInt(&quot;QuestionPosition&quot;);\n    }\n\n    private void setQuestion(){\n        title.setText(Html.fromHtml(question.getTitle()));\n        image1.setImageResource(question.getAnswers().get(0).getImagePath());\n        image2.setImageResource(question.getAnswers().get(1).getImagePath());\n        image3.setImageResource(question.getAnswers().get(2).getImagePath());\n        image4.setImageResource(question.getAnswers().get(3).getImagePath());\n\n    }\n\n    private void initWidgets(View view){\n        title = view.findViewById(R.id.title);\n        image1 = view.findViewById(R.id.image1);\n        image2 = view.findViewById(R.id.image2);\n        image3 = view.findViewById(R.id.image3);\n        image4 = view.findViewById(R.id.image4);\n\n        buttons = new ImageView[]{\n                image1,\n                image2,\n                image3,\n                image4};\n    }\n\n    private void setClickListeners(){\n        image1.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                checkAnswer(question.getAnswers().get(0), 0);\n            }\n        });\n\n        image2.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                checkAnswer(question.getAnswers().get(1), 1 );\n            }\n        });\n\n        image3.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                checkAnswer(question.getAnswers().get(2), 2);\n            }\n        });\n\n        image4.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                checkAnswer(question.getAnswers().get(3), 3);\n            }\n        });\n    }\n\n    private void btnsSetEnableOff(){\n        image1.setEnabled(false);\n        image2.setEnabled(false);\n        image3.setEnabled(false);\n        image4.setEnabled(false);\n    }\n\n    private void checkAnswerState(){\n        if (answerState == 1){\n            btnsSetEnableOff();\n            buttons[correctAnswerIndex].setBackground(getResources().getDrawable(R.drawable.question_type3_correct_answer_background));\n        }else if (answerState == -1){\n            btnsSetEnableOff();\n            buttons[incorrectAnswerIndex].setBackground(getResources().getDrawable(R.drawable.question_type3_incorrect_answer_background));\n            buttons[correctAnswerIndex].setBackground(getResources().getDrawable(R.drawable.question_type3_correct_answer_background));\n        }\n    }\n\n    private void checkAnswer(Question answer, int btnPos){\n        if (question.isCorrectAnswer(answer)){\n            answerState = 1;\n            btnsSetEnableOff();\n            buttons[btnPos].setBackground(getResources().getDrawable(R.drawable.question_type3_correct_answer_background));\n            callBack.onAnswerSelected(questionPosition, answerState, btnPos, 0);\n        }else {\n            answerState = -1;\n            btnsSetEnableOff();\n            buttons[btnPos].setBackground(getResources().getDrawable(R.drawable.question_type3_incorrect_answer_background));\n            for (int i = 0; i &lt; question.getAnswers().size(); i++){\n                if (question.isCorrectAnswer(question.getAnswers().get(i))){\n                    buttons[i].setBackground(getResources().getDrawable(R.drawable.question_type3_correct_answer_background));\n                    callBack.onAnswerSelected(questionPosition, answerState, i, btnPos);\n                }\n            }\n        }\n\n    }\n\n    private void checkIsGameOver(){\n        if (isGameOver){\n            btnsSetEnableOff();\n        }\n    }\n\n    @Override\n    public void onDataUpdate(int answersState, int correctAnswerIndex, int incorrectAnswerIndex, boolean isGameOver) {\n        this.answerState = answersState;\n        this.correctAnswerIndex = correctAnswerIndex;\n        this.incorrectAnswerIndex = incorrectAnswerIndex;\n        this.isGameOver = isGameOver;\n        checkIsGameOver();\n        checkAnswerState();\n    }\n\n    @Override\n    public Question getQuestion() {\n        return question;\n    }\n}\n</code></pre>\n",
    "question_id": 69946372,
    "tags": [
      "java",
      "android",
      "multithreading"
    ],
    "score": 0,
    "is_answered": false,
    "view_count": 80,
    "last_edit_date": 1636837830
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/b94f53a1a380088d443c247a40760efb?s=256&d=identicon&r=PG&f=y&so-version=2",
      "account_id": 13234323,
      "user_type": "registered",
      "user_id": 9556897,
      "link": "https://stackoverflow.com/users/9556897/chrempl",
      "reputation": 91,
      "display_name": "chrempl"
    },
    "content_license": "CC BY-SA 3.0",
    "link": "https://stackoverflow.com/questions/49516601/jstack-in-mixed-mode-wrongtypeexception-no-suitable-match-for-type-of-address",
    "last_activity_date": 1636815741,
    "creation_date": 1522163582,
    "answer_count": 3,
    "title": "jstack in mixed mode: WrongTypeException: No suitable match for type of address",
    "body": "<p>I'm trying to run jstack on ubuntu in mixed mode: </p>\n\n<pre><code> $ jstack -m 7219     \n</code></pre>\n\n<p>The result is this exception:</p>\n\n<pre><code>Attaching to process ID 7219, please wait...\nDebugger attached successfully.\nServer compiler detected.\n  JVM version is 25.162-b12\n  Exception in thread \"main\" java.lang.reflect.InvocationTargetException\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at  sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)        \n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at sun.tools.jstack.JStack.runJStackTool(JStack.java:140)\n    at sun.tools.jstack.JStack.main(JStack.java:106)\n Caused by: java.lang.RuntimeException: Unable to deduce type of thread from address 0x00007f02cc002800 (expected type JavaThread, CompilerThread, ServiceThread, JvmtiAgentThread, or SurrogateLockerThread)\n    at sun.jvm.hotspot.runtime.Threads.createJavaThreadWrapper(Threads.java:166)\n    at sun.jvm.hotspot.runtime.Threads.first(Threads.java:150)\n    at sun.jvm.hotspot.tools.PStack.initJFrameCache(PStack.java:200)\n    at sun.jvm.hotspot.tools.PStack.run(PStack.java:71)\n    at sun.jvm.hotspot.tools.PStack.run(PStack.java:58)\n    at sun.jvm.hotspot.tools.PStack.run(PStack.java:53)\n    at sun.jvm.hotspot.tools.JStack.run(JStack.java:66)\n    at sun.jvm.hotspot.tools.Tool.startInternal(Tool.java:260)\n    at sun.jvm.hotspot.tools.Tool.start(Tool.java:223)\n    at sun.jvm.hotspot.tools.Tool.execute(Tool.java:118)\n    at sun.jvm.hotspot.tools.JStack.main(JStack.java:92)\n    ... 6 more\n  Caused by: sun.jvm.hotspot.types.WrongTypeException: No suitable match for type of address 0x00007f02cc002800\n    at sun.jvm.hotspot.runtime.InstanceConstructor.newWrongTypeException(InstanceConstructor.java:62)\n    at sun.jvm.hotspot.runtime.VirtualConstructor.instantiateWrapperFor(VirtualConstructor.java:80)\n    at sun.jvm.hotspot.runtime.Threads.createJavaThreadWrapper(Threads.java:162)\n    ... 16 more\n</code></pre>\n\n<p>The process with PID 7219 was started with the same user as jstack.</p>\n",
    "question_id": 49516601,
    "tags": [
      "java",
      "multithreading",
      "ubuntu",
      "jstack"
    ],
    "score": 7,
    "is_answered": true,
    "view_count": 4034,
    "last_edit_date": 1522218833
  },
  {
    "owner": {
      "profile_image": "https://lh5.googleusercontent.com/-D7rYoxutbUQ/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3rcj2iqwDWelRoBTdcO2OUjuXPXUSg/photo.jpg?sz=256",
      "account_id": 16870141,
      "user_type": "registered",
      "user_id": 12198808,
      "link": "https://stackoverflow.com/users/12198808/pm-p",
      "reputation": 27,
      "display_name": "Pm P"
    },
    "closed_date": 1636816474,
    "link": "https://stackoverflow.com/questions/69955201/lock-not-getting-revoked-without-a-println-statement-in-java",
    "last_activity_date": 1636813720,
    "creation_date": 1636813720,
    "answer_count": 0,
    "title": "Lock not getting revoked without a println statement in java",
    "body": "<p>I am a beginner in Java language. I have a client server application. In this application, there is a need for mutual exclusion for the resources to be accessed onto the server by multiple clients.</p>\n<p>I am trying to achieve mutual exclusion by using a lock variable. But I don't known why the lock variable doesn't get updated when the current thread is done with it's job without a println statement in the loop.</p>\n<p>Below is the code snippet for the server.java file -</p>\n<pre><code>int shown = 0;\nint value = server.lock;\nwhile(value != 1) {\n  if(shown == 0) {\n      System.out.println(&quot;Server is busy. Please wait&quot;);\n      shown++;\n   }\n   value = server.lock;\n   // Below statement.\n   System.out.print(&quot;\\t&quot;);\n  }\nshown = 0;\nserver.lock--;\n</code></pre>\n<p>The lock variable is updated always to 1 whenever the work of the current thread is done</p>\n<p>The code  works perfectly  with a println statement but doesn't work without it. Like the while keeps on repeating. I don't know why.</p>\n<p>Any help is appreciated.</p>\n<p>Thank you,</p>\n<p>P. Parekh</p>\n",
    "question_id": 69955201,
    "tags": [
      "java",
      "multithreading",
      "client-server"
    ],
    "score": 0,
    "closed_reason": "Duplicate",
    "is_answered": false,
    "view_count": 20
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/aa0490fa29da8a5d40dd219d9f13dccb?s=256&d=identicon&r=PG",
      "account_id": 49729,
      "user_type": "registered",
      "user_id": 148208,
      "link": "https://stackoverflow.com/users/148208/justin-kredible",
      "reputation": 8364,
      "display_name": "Justin Kredible",
      "accept_rate": 74
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/69950945/blockingqueue-with-slow-producer-and-fast-consumers",
    "last_activity_date": 1636813384,
    "creation_date": 1636769792,
    "answer_count": 2,
    "title": "BlockingQueue with slow producer and fast consumers",
    "body": "<p>I'm writing a Java command line application that scrapes a website and downloads video files. The video files range in size from a few megs to 20 GB or more. This means downloading a file can take as little as a few seconds to as much as a few hours. I've decided to implement a produce/consumer pattern to handle the scraping and downloading of files. A producer thread scrapes the site and retrieves the links to the video files and puts those links into an object and puts that object into an unbounded blocking queue. There are N consumer threads that handle the download. They retrieve the objects containing the URLs from the blocking queue and each thread downloads the file. The object that the producer puts on the queue contains the URL along with some other information that the consumer will need to save the file to the correct location in local storage. Before a file is downloaded, the consumer thread first checks if the file already exists in local storage. If the file exists, the download is skipped and the next object is pulled from the queue. If a consumer experiences a problem while downloading a file (connection reset, etc.), the consumer puts the object containing the URL into a separate queue for failed requests and sleeps for 15 minutes. This allows the application to deal with temporary network interruptions. While the producer is active, it checks the failed URLs queue and removes those URLs from that queue and puts them back into the main queue.</p>\n<p>After implementing this initial design, I quickly realized that I had a problem. Because I'm using a blocking queue and the worker threads are polling without a timeout, once the producer was finished, it couldn't just complete its execution because it needed to hang around to put failed URLs back into the queue. My first attempt at a solution was to remove the second &quot;failure&quot; queue and have workers put failed URLs back into the main queue. This meant that the application now had N consumers and N + 1 producers. This approach would allow the main producer thread to just exit when it was finished because it didn't have to worry about putting failed requests back into the queue. Once that problem was solved, there was still another problem. The problem of notifying the worker threads that they could exit once the queue was empty. A blocking queue has no mechanism for the producer to signal that it won't be putting more data to the queue. I thought about having the consumers poll the queue with a timeout and have the primary producer set some sort of flag when it exits. When a consumer times out, it checks the flag. If the flag is set, the consumer exits, if not set, it polls the queue again. While this approach will work, I don't like the design. I don't like the idea of having threads sitting around unnecessarily and I hate even more the use of a magic flag. The only interaction between producer and consumers should be via the queue. The consumers have no knowledge of the producer and checking a magic flag breaks that principle.</p>\n<p>I ditched the blocking queue and decided to use a regular non-blocking queue. To prevent the worker threads from exiting as soon as they started, I used a <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CyclicBarrier.html\" rel=\"nofollow noreferrer\">CyclicBarrier</a>. When a worker thread starts, it waits at the barrier before polling the queue. Meanwhile, the producer thread was coded to lower the barrier once the queue contained 10 x N URLs. Once the barrier was lowered, the worker threads would begin processing the Queue. This approach quickly failed because in some cases the consumers would consume the queue faster than the producer could replenish it. This happens in cases where a large number of files are already stored on disk so the consumers don't need to download anything. Once the queue was empty, the consumers exited, even though the producer was still scraping the site looking for URLs.</p>\n<p>This tells me that I need to use a blocking queue. I'm continuing to try to find a clean, elegant solution that doesn't depend on timeouts and magic flags. I would love to hear your approach to solving this problem given the requirements.</p>\n<p>UPDATE:\nI finally settled on a solution based on comments made by user Martin James. Since these were comments and not an answer, there isn't an answer for me to accept. If Martin summarizes his comments into an answer, I'll accept it. Now here's the solution.</p>\n<p>When the producer thread completes, it places N objects into the queue that contain <code>null</code> as the value for the URL. I updated the consumer thread to check for a <code>null</code> URL when they pull an object from the queue. If the URL is <code>null</code>, the consumer exits. This approach solves the notification to consumers that the producer is complete. However, it doesn't solve the problem of consumers putting URLs into the queue after the producer has exited. To solve that problem, I switched to a priority blocking queue. I made the object that gets put into the queue a <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html\" rel=\"nofollow noreferrer\">Comparable</a> and the <code>compareTo</code> logic was coded such that objects with <code>null</code> values for the URL will always be last in the queue. So when the producer exits and it places the terminating objects in the queue, if/when a consumer places an object back into the queue, those objects will always be ahead of the terminating objects.</p>\n<p>Thanks all for the comments and feedback. Very much appreciated.</p>\n",
    "question_id": 69950945,
    "tags": [
      "java",
      "multithreading",
      "queue"
    ],
    "score": 1,
    "is_answered": false,
    "view_count": 378,
    "last_edit_date": 1636812716
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/0105d720803ed2616466c6d825ec2ae9?s=256&d=identicon&r=PG&f=y&so-version=2",
      "account_id": 4475927,
      "user_type": "registered",
      "user_id": 3641058,
      "link": "https://stackoverflow.com/users/3641058/learning-developer",
      "reputation": 52,
      "display_name": "Learning Developer"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/68802148/completeablefuture-for-a-large-dataset",
    "last_activity_date": 1629125145,
    "creation_date": 1629113822,
    "answer_count": 0,
    "title": "CompleteableFuture for a large dataset",
    "body": "<p>I have multi-threaded Spring Boot application in which I am reading data from table in batches (the table contains around 1 million records).</p>\n<p>I am getting into Java heap memory issues, and I am unable to find a workaround. Below is the code sample.</p>\n<p>I call the Spring Boot REST API which then calls this code. Here I am reading from db in the main thread in batches, then passing the batches to thread pool <code>executorService</code> and then finally processing the result in another thread pool <code>resultProcessor</code>.</p>\n<p>The <code>Worker</code> class <code>implements Callable&lt;WorkerResult&gt;</code></p>\n<pre><code>    ExecutorService executorService = Executors.newFixedThreadPool(15);\n    Long workerCount = 0L;\n    ExecutorService resultProcessor = Executors.newFixedThreadPool(10);\n    List&lt;CompletableFuture&lt;WorkerResult&gt;&gt; futures = new ArrayList&lt;&gt;();\n\n    while (workerCount &lt; totalData) {\n\n        List&lt;Model&gt; dbRecords = repo.getData(workerCount,workerCount+rp,date);\n        workerCount += rp + 1;\n\n        try {\n                futures.add(CompletableFuture.supplyAsync(() -&gt; {\n                    try {\n                        return new Worker(dbRecords).call(); // Here for each record third party api is called\n                    } catch (Exception ex) {\n                        throw new CompletionException(ex);\n                    }\n                    // Or return default value\n                }, executorService).thenApplyAsync(result -&gt; {\n\n                    service.resultReceived(result); // update the results into db\n                    return result;\n                }, resultProcessor));\n            \n\n        } catch (RejectedExecutionException e) {\n            logData(&quot;Can't submit anymore tasks  %s &quot;, e.getMessage());\n        }\n    }\n}\n</code></pre>\n<p>Outside the while loop once I have read all data from DB, then I call the <code>CompletableFuture.allOf</code> method to finish any remaining tasks.\nBelow is the code for that:</p>\n<pre><code>try {\n    CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).join();\n\n    executorService.shutdown();\n    executorService.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS);\n    resultProcessor.shutdown();\n    resultProcessor.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS);\n} catch (InterruptedException e) {\n    e.printStackTrace();\n}\n</code></pre>\n<p>Here, if I do not add the <code>CompletableFuture.allOf</code>, the result is returned from this method without completing all tasks in the queues.</p>\n<p>Instead of calling <code>CompletableFuture.allOf</code>, I have tried <code>futures.foreach(CompletableFuture::join)</code> but my issue didn't resolve that way either.</p>\n<p>Currently, I have assigned 1GB ram to the Tomcat server, therefore I face heap space error after some 100 thousand records are processed successfully.</p>\n<p>What can I do here to get rid of this error and improve code efficiency as well, also the solution should be in Java 8 and not the latest versions if possible.</p>\n<p>I don't know how much data will be in real this is a test environment data.</p>\n",
    "question_id": 68802148,
    "tags": [
      "java",
      "multithreading",
      "executorservice"
    ],
    "score": 0,
    "is_answered": false,
    "view_count": 707,
    "last_edit_date": 1629125145
  },
  {
    "owner": {
      "profile_image": "https://i.stack.imgur.com/1fiLn.jpg?s=256&g=1",
      "account_id": 19582383,
      "user_type": "registered",
      "user_id": 14331146,
      "link": "https://stackoverflow.com/users/14331146/saintka",
      "reputation": 33,
      "display_name": "Saintka"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/68791080/multithreading-incorrect-change-value",
    "last_activity_date": 1629103252,
    "creation_date": 1629026779,
    "answer_count": 2,
    "title": "Multithreading: incorrect change value",
    "body": "<p>I create n independent threads, after the transaction method is executed, the values ​​must change (money must go from one account to another), but after execution, the values ​​do not change. By default, in the save method I add 10000 to each account. 9 transactions should occur and after that the program should terminate.</p>\n<p>Entity Account:</p>\n<pre><code>@Entity\n@Table\n@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\npublic class Account {\n    @Id\n    @Column(name = &quot;id&quot;)\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    @Getter\n    private long id;\n\n    @Column(name= &quot;money&quot;)\n    @Getter\n    @Setter\n    private int money;\n\n    public static AtomicInteger numberTransaction = new AtomicInteger();\n\n    public int withdrawal(int value) {\n       return money += value;\n    }\n\n    public int send(int value) {\n       return money -= value;\n    }\n}\n</code></pre>\n<p>Service:</p>\n<pre><code>@Service\npublic class AccountService extends Thread {\n    private final AccountRepository accountRepository;\n\n    private ReentrantLock lock = new ReentrantLock();\n\n    public AccountService(AccountRepository accountRepository) {\n        this.accountRepository = accountRepository;\n    }\n\n    public Iterable&lt;Account&gt; findAllAccount() {\n        return accountRepository.findAll();\n    }\n\n    public Account save(Account account) {\n        account.setMoney(10000);\n        return accountRepository.save(account);\n    }\n\n    public Long countAccount() {\n        return accountRepository.count();\n    }\n\n    public Account update(Account category) {\n        return accountRepository.save(category);\n    }\n\n    public void delete(Long id) {\n        accountRepository.deleteById(id);\n    }\n\n    public void transaction(Long accountIdOne, Long accountIdTwo, int value) {\n        Account accountOne = accountRepository.findById(accountIdOne).orElseThrow();\n        Account accountTwo = accountRepository.findById(accountIdTwo).orElseThrow();\n        lock.lock();\n        try {\n            accountOne.withdrawal(value);\n            this.update(accountOne);\n            accountTwo.send(value);\n            this.update(accountTwo);\n            Account.numberTransaction.incrementAndGet();\n        } finally {\n            lock.unlock();\n        }\n\n\n    }\n\n    public void test() {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                while (Account.numberTransaction.get() &lt; 10) {\n                    int sleep = (int) (Math.random() * (2000 - 1000)) + 1000;\n                    try {\n                        transaction(1L, 2L, 1000);\n                        Thread.sleep(sleep);\n                    } catch (InterruptedException exception) {\n                        exception.printStackTrace();\n                    }\n                }\n            }\n        }).start();\n    }\n}\n</code></pre>\n<p>Test:</p>\n<pre><code>@Test\nvoid contextLoads() throws InterruptedException {\n    Account account = new Account();\n    Account account1 = new Account();\n\n    accountService.save(account);\n    accountService.save(account1);\n\n    for(int i = 0; i &lt; accountService.countAccount(); i++) {\n        accountService.test();\n        accountService.join();\n\n    }\n}\n</code></pre>\n",
    "question_id": 68791080,
    "tags": [
      "java",
      "spring",
      "multithreading"
    ],
    "score": 0,
    "is_answered": true,
    "view_count": 174,
    "last_edit_date": 1629103252
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/1498ae2e1f631e9b3c6a6c2ea8e65f8f?s=256&d=identicon&r=PG&f=y&so-version=2",
      "account_id": 18250480,
      "user_type": "registered",
      "user_id": 13285583,
      "link": "https://stackoverflow.com/users/13285583/jason-rich-darmawan",
      "reputation": 1691,
      "display_name": "Jason Rich Darmawan"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/68796254/will-creating-more-threads-than-available-processors-have-performance-overhead",
    "last_activity_date": 1629093183,
    "creation_date": 1629072992,
    "answer_count": 1,
    "title": "Will creating more threads than available processors have performance overhead?",
    "body": "<p>My goal is to handle WebSocket connections inside threads. If I use <code>in a new Thread</code>, the number of WebSocket connections that the server can handle is unknown. If I use <code>in a Thread pool</code>, the number of WebSocket connections that the server can handle is the thread pool size.</p>\n<p>I am not sure about the correlation between available processors and threads. Does 1 processor execute 1 thread at a time?</p>\n<p>My expected result: Creating more threads than the available processors is not advisable and you should re-design how you handle the WebSocket connections.</p>\n<p>in a new Thread</p>\n<pre><code>final Socket socket = serverSocket.accept();\n\nnew Thread(new WebSocket(socket, listener)).start();\n</code></pre>\n<p>in a Thread pool</p>\n<pre><code>final ExecutorService es = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());\n\nfinal Socket socket = serverSocket.accept();\n\nes.execute(new WebSocket(socket, listener));\n</code></pre>\n<p>To avoid confusion, the <code>WebSocket</code> class is a custom class that implements <code>Runnable</code>. As far I know, Java SE does not have a WebSocket server, only a WebSocket client.</p>\n",
    "question_id": 68796254,
    "tags": [
      "java",
      "multithreading",
      "sockets",
      "websocket"
    ],
    "score": 2,
    "accepted_answer_id": 68796545,
    "is_answered": true,
    "view_count": 498,
    "last_edit_date": 1629093183
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/3a97334841a1e42ce096e1e220116af2?s=256&d=identicon&r=PG",
      "account_id": 931371,
      "user_type": "registered",
      "user_id": 961204,
      "link": "https://stackoverflow.com/users/961204/jobless91",
      "reputation": 33,
      "display_name": "jobless91"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/68784557/how-to-identify-name-or-any-contextual-info-of-thread-a-when-it-interrupts-threa",
    "last_activity_date": 1629087703,
    "creation_date": 1628953893,
    "answer_count": 1,
    "title": "How to identify name or any contextual info of thread A when it interrupts thread B?",
    "body": "<p>I found one question on similar lines : <a href=\"https://stackoverflow.com/questions/32008437/interrupt-with-name-identifier-sigaction-linux\">Interrupt with name identifier [Sigaction - Linux]</a></p>\n<ol>\n<li>How to identify name or any contextual info of thread A when it interrupts thread B?</li>\n<li>Even if we get name of thread A, there is chance there could be multiple threads with same name as mentioned here : <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#interrupt--\" rel=\"nofollow noreferrer\">https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#interrupt--</a>\n<code>Every thread has a name for identification purposes. More than one thread may have the same name. If a name is not specified when a thread is created, a new name is generated for it.</code></li>\n<li>Does this mean I would have to create custom thread inheriting &quot;java.lang.Thread&quot;?</li>\n</ol>\n<p>Code Sample</p>\n<pre><code>Thread threadA = new Thread(new Runnable() {\npublic void run() {\n    try {\n      Thread.sleep(500);\n    } catch (InterruptedException ex) { }\n    System.out.println(&quot;I am going to interrupt, catch me if you can&quot;);\n    threadB.interrupt();\n  }\n});\n\nThread threadB = new Thread(new Runnable() {\npublic void run() {\n    try {\n            System.out.println(&quot;threadB going to be interrupted&quot;);\n            Thread.sleep(5000);\n        } catch (InterruptedException e) {\n            //How to find name or any contextual info of threadA here?\n            Thread.currentThread().interrupt();\n        }\n    \n  }\n});\n\nthreadB.start();\nthreadA.start();\n</code></pre>\n<p>If this is not possible directly, is there any workaround or trick?</p>\n",
    "question_id": 68784557,
    "tags": [
      "java",
      "multithreading",
      "concurrency"
    ],
    "score": 2,
    "accepted_answer_id": 68793486,
    "is_answered": true,
    "view_count": 94,
    "last_edit_date": 1629087703
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/9cb4a3b6403a046b36c58ef75c21c219?s=256&d=identicon&r=PG&f=y&so-version=2",
      "account_id": 5237252,
      "user_type": "registered",
      "user_id": 4185468,
      "link": "https://stackoverflow.com/users/4185468/uttam",
      "reputation": 435,
      "display_name": "uttam",
      "accept_rate": 32
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/63354899/parallel-execution-of-directed-acyclic-graph-of-tasks",
    "last_activity_date": 1629042563,
    "creation_date": 1597136374,
    "answer_count": 2,
    "title": "Parallel execution of directed acyclic graph of tasks",
    "body": "<p>I have a list of tasks <code>[Task-A,Task-B,Task-C,Task-D, ...]</code>.<br />\nOne task can be optionally dependent on other tasks.</p>\n<p>For example:<br />\nA can be dependent on 3 tasks: B, C and D<br />\nB can be dependent on 2 tasks: C and E</p>\n<p>It's basically a directed acyclic graph and execution of a task should happen only after the dependent tasks are executed.</p>\n<p>Now it might happen that at any point of time, there are multiple tasks that are ready for execution. In such a case, we can run them in parallel.</p>\n<p>Any idea on how to implement such an execution while having as much parallelism as possible?</p>\n<pre class=\"lang-java prettyprint-override\"><code>class Task{\n     private String name;\n     private List&lt;Task&gt; dependentTasks;\n     \n     public void run(){\n     // business logic\n     }\n}\n</code></pre>\n",
    "question_id": 63354899,
    "tags": [
      "java",
      "multithreading",
      "algorithm",
      "concurrency",
      "directed-acyclic-graphs"
    ],
    "score": 7,
    "is_answered": true,
    "view_count": 3385,
    "last_edit_date": 1620542397
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/5688c2b503f6ee4aac1be047292d0e5e?s=256&d=identicon&r=PG&f=y&so-version=2",
      "account_id": 12642689,
      "user_type": "registered",
      "user_id": 9398584,
      "link": "https://stackoverflow.com/users/9398584/just-me",
      "reputation": 421,
      "display_name": "Just Me"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/68746177/scheduling-memory-bound-tasks-in-java",
    "last_activity_date": 1629015407,
    "creation_date": 1628701227,
    "answer_count": 1,
    "title": "Scheduling memory-bound tasks in java",
    "body": "<p>Suppose I have a large batch of memory-bound tasks that are quite independent of one another. To make things concrete, let's say I can allocate 30GB for the heap and that each task requires on average about 3GB of memory at its peak, but with some variability both over time and from task to task. A few tasks here and there might even require 6GB.</p>\n<p>In this case, it seems more efficient to try to run 10 (or arguably even more) tasks concurrently, and if / when we bump into the memory limit have the task wait, much the same as we do with other shared resources like I/O, specific memory addresses (which are accessed through locks), etc.</p>\n<p>Is it possible do this in Java? More generally\n<strong>What's the best way to handle memory-bound task scheduling in Java?</strong></p>\n<h2>Some Related Questions and &quot;Close Misses&quot;</h2>\n<p><a href=\"https://stackoverflow.com/q/3442706/9398584\">This question</a> asks whether it's possible to have threads in java wait for memory instead of throwing an OOM exception, but the answers seem to focus on why this is a bad idea to begin with - perhaps because the question suggests the number of threads is unreasonable. Also, I guess treating all memory requests as equal can lead to deadlocks. So I want to emphasize that here we are talking about only about 10 tasks, and the desire to &quot;max out&quot; the memory usage seems like a very natural one. I do not mind wrapping my tasks by some suitable logic that will distinguish their memory requests as having lower priority. I can even accept a solution where I need to identify the class whose instances are filling up the memory and maybe add some suitable counter - but I'd prefer a platform-independent solution that works &quot;out of the box&quot;, if there is one.</p>\n<p><a href=\"https://stackoverflow.com/q/20104393/9398584\">This question</a> also also asks about scheduling memory-bound tasks but seems to presuppose a specific solution framework.</p>\n",
    "question_id": 68746177,
    "tags": [
      "java",
      "multithreading",
      "memory-management",
      "scheduler"
    ],
    "score": 1,
    "is_answered": false,
    "view_count": 366,
    "last_edit_date": 1628704400
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/c4269e3a7210fb1a98b7de6f4ecd5336?s=256&d=identicon&r=PG&f=y&so-version=2",
      "account_id": 8446407,
      "user_type": "registered",
      "user_id": 6336910,
      "link": "https://stackoverflow.com/users/6336910/tom-chen",
      "reputation": 43,
      "display_name": "Tom Chen"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/68785125/whiletrue-make-the-cpu-can-not-read-the-latest-value-of-shared-variable",
    "last_activity_date": 1629002962,
    "creation_date": 1628958175,
    "answer_count": 4,
    "title": "while(true) make the cpu can not read the latest value of shared variable",
    "body": "<p>I have this java code:</p>\n<pre><code>class FlagChangeThread implements Runnable {\n    private boolean flag = false;\n    public boolean isFlag() {return flag;}\n    public void run() {\n        try {Thread.sleep(300);} catch (Exception e) {}\n        // change value of flag to true\n        flag=true;\n        System.out.println(&quot;FlagChangeThread flag=&quot;+flag);\n    }\n}\npublic class WhileLoop {\n    public static void main(String[] args) {\n        FlagChangeThread fct = new FlagChangeThread();\n        new Thread(fct).start();\n        while (true){\n            // but fct.isFlag() always get false\n            boolean flag = fct.isFlag();\n            if(flag){\n                System.out.println(&quot;WhileLoop flag=&quot;+flag);\n                break;\n            }\n        }\n    }\n}\n\n</code></pre>\n<p>When i run this code, the whole program only print below message and stuck forever:</p>\n<pre><code>FlagChangeThread flag=true\n</code></pre>\n<p>But when i add some sleep times to the while loop of main thread, just like this:</p>\n<pre><code>class FlagChangeThread implements Runnable {\n    private boolean flag = false;\n    public boolean isFlag() {return flag;}\n    public void run() {\n        try {Thread.sleep(300);} catch (Exception e) {}\n        // change value of flag to true\n        flag=true;\n        System.out.println(&quot;FlagChangeThread =&quot;+flag);\n    }\n}\npublic class WhileLoop {\n    public static void main(String[] args) throws InterruptedException {\n        FlagChangeThread fct = new FlagChangeThread();\n        new Thread(fct).start();\n        while (true){\n            Thread.sleep(1);\n            boolean flag = fct.isFlag();\n            if(flag){\n                System.out.println(&quot;WhileLoop flag=&quot;+flag);\n                break;\n            }\n        }\n    }\n}\n</code></pre>\n<p>Run it again, the whole program print below message and exit normally:</p>\n<pre><code>FlagChangeThread =true\nWhileLoop flag=true\n</code></pre>\n<p>I know that declare flag varible to be volatile also fix this problem, becuase when the flag be changed it will be write back to main memory and invalid other cpu's cache line of the flag varible.</p>\n<p>But, I have such confusing:</p>\n<ol>\n<li><p>Why fct.isFlag() in the while loop of main thread can't get the latest value without some sleep?</p>\n</li>\n<li><p>After the flag be changed to true, even thought it is in the thread's working memory right now, but in some point of the future, it will be eventually write back to main memory. Why the main thread can't read this updated value by calling fct.isFlag()? Didn’t it get the flag value from the main memory and copy to main thread's working memory every time it call the fct.isFlag()?</p>\n</li>\n</ol>\n<p>Any body can help me?</p>\n",
    "question_id": 68785125,
    "tags": [
      "java",
      "multithreading",
      "volatile",
      "cpu-cache"
    ],
    "score": 3,
    "is_answered": true,
    "view_count": 196
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/ab43c5c6d5678f78588a90913b8f544c?s=256&d=identicon&r=PG&f=y&so-version=2",
      "account_id": 13705940,
      "user_type": "registered",
      "user_id": 9889573,
      "link": "https://stackoverflow.com/users/9889573/bcarmel",
      "reputation": 91,
      "display_name": "bcarmel"
    },
    "closed_date": 1629041333,
    "link": "https://stackoverflow.com/questions/68786081/is-it-worth-multithreading-creating-new-objects-in-java",
    "last_activity_date": 1628973041,
    "creation_date": 1628966011,
    "answer_count": 1,
    "title": "Is it worth multithreading creating new objects in Java?",
    "body": "<p>I want to create 1 million instances of class HumanInfo, which takes as input an instance of class Human, for which there's lots of extra data I don't need. Class Human won't let me modify the fields, so I created HumanInfo so that I can modify those fields.</p>\n<pre><code>    public class Human {\n        String name;\n        double height;\n        double weight;\n        //thousands of other fields and extraneous information that cannot be modified within Human\n    }\n    \n    public class HumanInfo {\n        String name;\n        double height;\n    }\n    \n    public HumanInfo(Human human) {\n        this.name = human.name;\n        this.height = human.height;\n    }\n</code></pre>\n<p>I tried multithreading this task because there are so many objects to make (and then store in a HashMap). However, it does not go any faster (and sometimes slower) than if I create all instances on a single thread. Is there a reason why multithreading does not help here? Is it because the task of copying information over is too simple to benefit? Is there a different way to speed up this process of creating objects? My real example is different from this, but I believe the idea is the same.</p>\n",
    "question_id": 68786081,
    "tags": [
      "java",
      "multithreading"
    ],
    "score": -2,
    "accepted_answer_id": 68786399,
    "closed_reason": "Needs details or clarity",
    "is_answered": true,
    "view_count": 80
  },
  {
    "owner": {
      "profile_image": "https://lh5.googleusercontent.com/-kZ6I3Z1pZR4/AAAAAAAAAAI/AAAAAAAAAAA/AKxrwcb_NhR3Q7JgAnrbJvIajAMxUXMGTg/mo/photo.jpg?sz=256",
      "account_id": 15183229,
      "user_type": "registered",
      "user_id": 10955997,
      "link": "https://stackoverflow.com/users/10955997/siddharth-teli",
      "reputation": 107,
      "display_name": "Siddharth Teli"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/61711333/reading-from-writing-to-network-stream-simultaneously",
    "last_activity_date": 1628970832,
    "creation_date": 1589110674,
    "answer_count": 0,
    "title": "Reading from &amp; writing to network stream simultaneously",
    "body": "<pre><code>public class twowaychat {\n\n    ServerSocket server;\n    Socket socket;\n    BufferedReader read;\n    BufferedWriter write;\n    String temp, temp1;\n\n    twowaychat() {\n\n        Thread thread1 = new Thread(&quot;Read-Client&quot;) {\n\n            public void run() {\n                try {\n                    do {\n\n                        temp = read.readLine();\n\n                        System.out.print(temp);\n                    } while (!(temp.equals(&quot;Exit&quot;)));\n                    close();\n                } catch (Exception e) {\n                    System.out.print(&quot;Line 30 error     :&quot; + e.toString());\n                }\n\n            }\n        };\n        Thread thread2 = new Thread(&quot;Write-Client&quot;) {\n            public void run() {\n                try {\n                    Scanner scan = new Scanner(System.in);\n\n                    do {\n                        temp1 = scan.next();\n                        write.write(temp1);\n\n                    } while (!(temp.equals(&quot;Exit&quot;)));\n                    close();\n                } catch (Exception e) {\n                    System.out.print(&quot;Line 53 error     :&quot; + e.toString());\n                }\n            }\n        };\n        try {\n\n            server = new ServerSocket(4368);\n            socket = server.accept();\n            System.out.println(&quot;Connected &quot;);\n            read = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            write = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));\n\n            thread1.start();\n            thread2.start();\n        } catch (Exception e) {\n            System.out.println(&quot;Line 72 error     :&quot; + e.toString());\n        }\n\n    }\n\n    protected void close() {\n        try {\n            System.out.print(&quot;Closing Connection&quot;);\n            read.close();\n            write.close();\n            socket.close();\n\n        } catch (Exception e) {\n            System.out.print(e.toString());\n        }\n\n    }\n\n    public static void main(String args[]) {\n        twowaychat obj = new twowaychat();\n    }\n}\n</code></pre>\n<p>I want to build a chatting program. So client &amp; server can chat. I have used two threads in both client &amp; server to read &amp; write from &amp; to streams respectively. But this program is not working at all just prints &quot;Connected&quot;. My client program also follows the same structure as the above server program.<br />\nI want a program where client &amp; server can keep sending &amp; receiving messages till Exit is entered.</p>\n",
    "question_id": 61711333,
    "tags": [
      "java",
      "multithreading",
      "sockets",
      "bufferedreader",
      "bufferedwriter"
    ],
    "score": 2,
    "is_answered": false,
    "view_count": 185,
    "last_edit_date": 1628970832
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/fef318f74b7cd37638a80805bb3dd836?s=256&d=identicon&r=PG&f=y&so-version=2",
      "account_id": 22439943,
      "user_type": "registered",
      "user_id": 16644640,
      "link": "https://stackoverflow.com/users/16644640/44ly",
      "reputation": 5,
      "display_name": "44ly"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/68760729/how-do-i-run-2-threads-alternately",
    "last_activity_date": 1628930828,
    "creation_date": 1628784017,
    "answer_count": 7,
    "title": "How do I run 2 Threads alternately",
    "body": "<p>I am new to Threading and I'm trying to make Output look like: aAbBcCdDeE... .\nI searched and tried a lot of stuff but nothing really made it work. In the Exercise you are supposed to do it with a global boolean variable but I didn't really find anything useful and am kinda lost. I appreciate the help!</p>\n<pre><code>public class ABCThread implements Runnable {\n    char c;\n\n    public ABCThread(char c) {\n        this.c = c;\n    }\n\n    @Override\n    public synchronized void run() {\n\n        for (char i = 0; i &lt; 26; i++) {\n            System.out.println(c++);\n            try {\n                Thread.sleep(500);\n\n            } catch (InterruptedException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n        }\n\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n\n        Thread t1 = new Thread(new ABCThread('a'));\n        Thread t2 = new Thread(new ABCThread('A'));\n\n        t1.start();\n        t2.start();\n\n    }\n\n}\n</code></pre>\n<p>Output:</p>\n<pre class=\"lang-none prettyprint-override\"><code>a\nA\nB\nb\nC\nc\nd\nD\ne\nE\nf\nF\nG\ng\nH\nh\nI\ni\nJ\nj\n</code></pre>\n",
    "question_id": 68760729,
    "tags": [
      "java",
      "multithreading"
    ],
    "score": 0,
    "accepted_answer_id": 68761907,
    "is_answered": true,
    "view_count": 272,
    "last_edit_date": 1628785071
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/1498ae2e1f631e9b3c6a6c2ea8e65f8f?s=256&d=identicon&r=PG&f=y&so-version=2",
      "account_id": 18250480,
      "user_type": "registered",
      "user_id": 13285583,
      "link": "https://stackoverflow.com/users/13285583/jason-rich-darmawan",
      "reputation": 1691,
      "display_name": "Jason Rich Darmawan"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/67576652/why-does-wait100-cause-synchronized-method-to-fail-in-multi-threaded",
    "last_activity_date": 1621344860,
    "creation_date": 1621283430,
    "answer_count": 2,
    "title": "Why does wait(100) cause synchronized method to fail in multi threaded?",
    "body": "<p>I am referencing from Baeldung.com. Unfortunately, the article does not explain why this is not a thread safe code. <a href=\"https://www.baeldung.com/java-testing-multithreaded\" rel=\"nofollow noreferrer\">Article</a></p>\n<p>My goal is to understand how to create a thread safe method with the synchronized keyword.</p>\n<p><strong>My actual result is</strong>: The count value is 1.</p>\n<pre><code>package NotSoThreadSafe;\n\npublic class CounterNotSoThreadSafe {\n  private int count = 0;\n  public int getCount() { return count; }\n  // synchronized specifies that the method can only be accessed by 1 thread at a time.\n  public synchronized void increment() throws InterruptedException { int temp = count; wait(100); count = temp + 1; }\n}\n\n</code></pre>\n<p>My expected result is: The count value should be 10 because of:</p>\n<ol>\n<li>I created 10 threads in a pool.</li>\n<li>I executed <code>Counter.increment()</code> 10 times.</li>\n<li>I make sure I only test after the CountDownLatch reached 0.</li>\n<li>Therefore, it should be 10. However, if you release the <code>lock</code> of synchronized using <code>Object.wait(100)</code>, the method become not thread safe.</li>\n</ol>\n<pre><code>package NotSoThreadSafe;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass CounterNotSoThreadSafeTest {\n  @Test\n  void incrementConcurrency() throws InterruptedException {\n    int numberOfThreads = 10;\n    ExecutorService service = Executors.newFixedThreadPool(numberOfThreads);\n    CountDownLatch latch = new CountDownLatch(numberOfThreads);\n    CounterNotSoThreadSafe counter = new CounterNotSoThreadSafe();\n    for (int i = 0; i &lt; numberOfThreads; i++) {\n      service.execute(() -&gt; {\n        try { counter.increment(); } catch (InterruptedException e) { e.printStackTrace(); }\n        latch.countDown();\n      });\n    }\n    latch.await();\n    assertEquals(numberOfThreads, counter.getCount());\n  }\n}\n</code></pre>\n",
    "question_id": 67576652,
    "tags": [
      "java",
      "multithreading"
    ],
    "score": 0,
    "accepted_answer_id": 67583683,
    "is_answered": true,
    "view_count": 144,
    "last_edit_date": 1621284525
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/8bc3a7335b927521188678577f8cfcd4?s=256&d=identicon&r=PG&f=y&so-version=2",
      "account_id": 1062801,
      "user_type": "registered",
      "user_id": 1064076,
      "link": "https://stackoverflow.com/users/1064076/arun-kumar",
      "reputation": 6664,
      "display_name": "Arun Kumar",
      "accept_rate": 59
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/67477822/synchronized-vs-atomicreference",
    "last_activity_date": 1621342771,
    "creation_date": 1620681530,
    "answer_count": 0,
    "title": "synchronized vs AtomicReference",
    "body": "<p>I am trying to compose system design in which a module works on shared resource.\nSo to avoid the data being modified by other concurrent requests, I have few queries related to concurrent requests/thread safety :</p>\n<p><strong>QUESTIONS :</strong></p>\n<p>a) Do I need <code>synchronized</code> block if my application is not creating any explicit thread(like Thread/Runnable) but receiving concurrent  HTTP requests ( like a testing tool Load Runner).</p>\n<p>b) Is the <code>AutomicRefrence&lt;BigDecimal&gt;</code> is a good alternative of synchronized(objectField) block when application is not multi-threaded in nature but processing concurrent HTTP requests.</p>\n",
    "question_id": 67477822,
    "tags": [
      "java",
      "spring",
      "multithreading",
      "synchronization",
      "mutual-exclusion"
    ],
    "score": 0,
    "is_answered": false,
    "view_count": 326,
    "last_edit_date": 1621342771
  },
  {
    "owner": {
      "profile_image": "https://lh3.googleusercontent.com/-GLkF4bZir6M/AAAAAAAAAAI/AAAAAAAAAMQ/F902rk_Qd38/photo.jpg?sz=256",
      "account_id": 10496819,
      "user_type": "registered",
      "user_id": 7736755,
      "link": "https://stackoverflow.com/users/7736755/polcio",
      "reputation": 3,
      "display_name": "Polcio"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/67584453/why-does-my-wikipedia-crawler-fail-when-using-cachedthreadpool-but-not-when-usin",
    "last_activity_date": 1621334085,
    "creation_date": 1621333730,
    "answer_count": 0,
    "title": "Why does my Wikipedia crawler fail when using CachedThreadPool but not when using FixedThreadPool?",
    "body": "<p>I wrote a little Java program that allows me to track the life status of famous people, notifying me when someone on my &quot;watch list&quot; dies. I used Wikipedia's APIs to fetch the data, which is then processed using custom methods. I know there are much better ways to crawl Wikipedia but I wanted to practice my Java as I hadn't touched it in a while.</p>\n<p>For now, I can add new people, save them to a local &quot;database&quot; and view the list of people I've added and their life status. The program will update all entries every time it's booted.</p>\n<p>In the beginning the application was single-threaded and updating the database entries took 20 seconds (for a list of 50 people). It was way too slow, so I implemented an <code>ExecutorService</code> to speed things up by starting API calls concurrently.</p>\n<p>My crawler class looks something like this:</p>\n<pre class=\"lang-java prettyprint-override\"><code>    public class Scraper implements Callable&lt;Person&gt; {\n\n        private Person person;\n\n        public Scraper(Person person) {\n            this.person = person;\n        }\n\n        public synchronized Person scrape() {\n            // API call using info from this.person and operations to get the life status\n            return new Person(/* with updated parameters */);\n        }\n\n        @Override\n        public Person call() throws Exception {\n            return scrape();\n        }\n    }\n</code></pre>\n<p>The code for updating all entries looks like this:</p>\n<pre class=\"lang-java prettyprint-override\"><code>    ExecutorService threadPool = Executors.newFixedThreadPool(20);\n    ArrayList&lt;Callable&lt;Person&gt;&gt; callables = new ArrayList&lt;&gt;();\n\n    // people is the HashMap containing tracked people\n    people.values().forEach(person -&gt; callables.add(new Scraper(person)));\n\n    try {\n        for(Future&lt;Person&gt; f : threadPool.invokeAll(callables)) {\n            Person p = f.get();\n\n            // updating old values with p\n        }\n        catch(Exception e) {\n            // exception handling\n        }\n        finally {\n            threadPool.shutdown();\n        }\n</code></pre>\n<p>Initially I used <code>ExecutorService threadPool = Executors.newCachedThreadPool();</code>, but almost every time I booted the program some entries got updated the wrong way: some people had other people's page names, so their life status could get mixed up.</p>\n<p>Then I switched to <code>ExecutorService threadPool = Executors.newFixedThreadPool(n);</code> and now, no matter the number <code>n</code> I choose, updating always works flawlessly without conflicts.</p>\n<p>Why is that? I learned that <code>CachedThreadPool</code>s and <code>FixedThreadPool</code>s operate almost in the same way, except <code>CachedThreadPool</code> doesn't have a thread limit and might re-use already initialized threads. Although the reusing of threads might be where the problem lies, every <code>Scraper</code> object has its own <code>Person</code> object, so I don't understand where the issue is.</p>\n<p>Thanks in advance.</p>\n",
    "question_id": 67584453,
    "tags": [
      "java",
      "multithreading",
      "url",
      "concurrency",
      "synchronized"
    ],
    "score": 0,
    "is_answered": false,
    "view_count": 48,
    "last_edit_date": 1621334085
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/a7262084269a8efdceb3d74c040bf177?s=256&d=identicon&r=PG&f=y&so-version=2",
      "account_id": 21624444,
      "user_type": "registered",
      "user_id": 15948953,
      "link": "https://stackoverflow.com/users/15948953/argun",
      "reputation": 51,
      "display_name": "Argun"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/67566923/multithreaded-udp-server-java",
    "last_activity_date": 1621333432,
    "creation_date": 1621242708,
    "answer_count": 1,
    "title": "Multithreaded UDP Server Java",
    "body": "<p>I have two threads, one is listening on a socket and adding to the queue, the other subtracting from the queue and submitting for processing. The second thread has a sleep when the queue is empty. This sleep somehow affects the first thread, that is, if you remove sleep or make it larger, then the delay in socket.receive of the first thread increases. If I keep the sleep as low as possible, it gets better, but not perfect. What am I doing wrong?</p>\n<pre><code>private DatagramSocket socket;\nprivate boolean running, listenthreadwork;\nprivate byte[] buf = new byte[256];\nprivate List&lt;IUDPListener&gt; listeners = new ArrayList&lt;IUDPListener&gt;();\nprivate Thread runnerThread, listenerThread;\nprivate ConcurrentLinkedQueue&lt;MyObject&gt; list = new ConcurrentLinkedQueue&lt;MyObject&gt;();\n\npublic void init(int port) throws SocketException\n{\n    socket = new DatagramSocket(port);\n    \n    runnerThread = new Thread(this::listenLoopUDP);\n    runnerThread.setName(&quot;listenLoopUDP&quot;);\n    \n    listenerThread = new Thread(this::listenerThreadUDP);\n    listenerThread.setName(&quot;listenerThreadUDP&quot;);\n    \n    running = true;\n    listenthreadwork = true;\n    runnerThread.start();\n    listenerThread.start();\n}\n\nprivate void listenerThreadUDP() {\n    while (listenthreadwork == true) {\n        MyObjectinfo = null;\n        synchronized (list) {\n            if (!list.isEmpty()) {\n                info = list.poll();\n            }\n        }\n        if (info != null) {\n            for (IUDPListener listener : listeners) {\n                listener.msgReceived(info);\n            }\n        } else {\n            try {\n                Thread.sleep(10);//Somehow affects listenLoopUDP\n            } catch (InterruptedException e) {\n                Log.write(e);\n            }\n        }\n    }\n}\n\npublic void listenLoopUDP() {\n    while (running) {\n        DatagramPacket packet = new DatagramPacket(buf, buf.length);\n\n        try {\n            socket.receive(packet);\n        } catch (IOException e) {\n            if (socket.isClosed()) {\n                running = false;\n                continue;\n            } else {\n                Log.write(e);\n                socket.close();\n            }\n        }\n        \n        String received = new String(packet.getData());\n\n        MyObject info = new MyObject(received);\n        synchronized (list) {\n            list.offer(info);\n        }\n    }\n\n    listenthreadwork = false;\n    try {\n        listenerThread.join();\n    } catch (InterruptedException e) {\n        Log.write(e);\n    }\n}\n</code></pre>\n<p>I have a simple client with timer</p>\n<pre><code>public class TestClient {\n    private DatagramSocket socket;\n    private InetAddress address;\n    private int count = 0;    \n\n    public TestClient() {\n        try {\n            socket = new DatagramSocket();\n        } catch (SocketException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        try {\n            address = InetAddress.getByName(&quot;localhost&quot;);\n        } catch (UnknownHostException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n\n    public void sendEcho(String msg) {\n        msg = msg + count++;\n        ByteBuffer bb = ByteBuffer.allocate(256);\n        bb.order(ByteOrder.LITTLE_ENDIAN);\n        bb.put(msg.getBytes());\n        DatagramPacket packet = new DatagramPacket(bb.array(), bb.capacity(), address, 15000);\n        try {\n            socket.send(packet);\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n\n    public void close() {\n        socket.close();\n    }\n}\n\n    TestClient client = new TestClient();\n    Timer timer = new Timer(false);\n    timer.schedule(new TimerTask() {\n    \n        @Override\n        public void run() {\n            client.send(&quot;hello&quot;);\n        }\n    \n    }, 1, 1);\n</code></pre>\n<p>But in server I get message something like this<br />\n2021-05-17 20:04:48.320<br />\n2021-05-17 20:04:48.335<br />\n2021-05-17 20:04:48.351<br />\n2021-05-17 20:04:48.367<br />\n2021-05-17 20:04:48.382</p>\n<p>It doesn't even help to remove it or not run listenerThread</p>\n<pre><code>        synchronized (list) {\n            list.offer(info);\n        }\n</code></pre>\n",
    "question_id": 67566923,
    "tags": [
      "java",
      "multithreading",
      "udp"
    ],
    "score": 1,
    "accepted_answer_id": 67569728,
    "is_answered": true,
    "view_count": 185,
    "last_edit_date": 1621328791
  },
  {
    "owner": {
      "profile_image": "https://i.stack.imgur.com/Losy8.jpg?s=256&g=1",
      "account_id": 17020749,
      "user_type": "registered",
      "user_id": 12313402,
      "link": "https://stackoverflow.com/users/12313402/vijay",
      "reputation": 1278,
      "display_name": "Vijay"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/64346783/activity-crashed-if-we-close-it-back-before-java-thread-completes-the-task",
    "last_activity_date": 1621329456,
    "creation_date": 1602651065,
    "answer_count": 1,
    "title": "Activity crashed if we close it (back) before java thread completes the task",
    "body": "<p>I created a thread in Oncreate of an activity and then after the task ends then it makes changes to the UI of the activity. The task takes 5-6 seconds that's why I used the thread.</p>\n<p>Here is the code:</p>\n<pre><code>Thread thread = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                final String folderSize = calculateFolderSize(); // my work \n                runOnUiThread(new Runnable() {\n                    @Override\n                    public void run() {\n                        textView.setText(folderSize + &quot; GB&quot;);\n                    }\n                });\n            }\n        });\n        \n        thread.start();\n</code></pre>\n<p>Everything works fine, I start the activity then the size is calculated and then the textView gets updated and shows the size. It takes 6 seconds on average.</p>\n<p><strong>The problem</strong> - when I open the activity then the thread starts in the OnCreate method. If I press the back button before the thread completes then my application crashes in 6 seconds (when the thread completes its work).</p>\n<p>What is the solution to this problem, is there any alternative or I need to stop the thread in back pressed in that activity.</p>\n",
    "question_id": 64346783,
    "tags": [
      "java",
      "android",
      "multithreading"
    ],
    "score": 0,
    "accepted_answer_id": 64347286,
    "is_answered": true,
    "view_count": 109,
    "last_edit_date": 1621329456
  },
  {
    "owner": {
      "profile_image": "https://i.stack.imgur.com/EXXAH.jpg?s=256&g=1",
      "account_id": 1749879,
      "user_type": "registered",
      "user_id": 1599213,
      "link": "https://stackoverflow.com/users/1599213/to-kra",
      "reputation": 3381,
      "display_name": "To Kra",
      "accept_rate": 33
    },
    "content_license": "CC BY-SA 3.0",
    "link": "https://stackoverflow.com/questions/27034958/how-to-explicitly-release-countdownlatch",
    "last_activity_date": 1621279534,
    "creation_date": 1416472295,
    "answer_count": 5,
    "title": "How to explicitly release CountDownLatch",
    "body": "<p>Is there any way to explicitly release <code>CountDownLatch</code> - means without do <code>countDown()</code>.</p>\n\n<p>E.g.: Let say I am waiting for 100 threads to do <code>countDown()</code>, but if something fails, I would like to release this latch without anymore waiting. I was thinking to <code>getCount()</code> on latch &amp; then in for cycle do <code>countDown()</code>, but its not optimal way. </p>\n\n<p>Any suggestions / ideas ?</p>\n",
    "question_id": 27034958,
    "tags": [
      "java",
      "multithreading",
      "countdownlatch"
    ],
    "score": 2,
    "is_answered": true,
    "view_count": 2456,
    "last_edit_date": 1422293900
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/b56bb0a666ad86c3e614238c5273b052?s=256&d=identicon&r=PG&f=y&so-version=2",
      "account_id": 21628450,
      "user_type": "registered",
      "user_id": 15952428,
      "link": "https://stackoverflow.com/users/15952428/mark-8882",
      "reputation": 3,
      "display_name": "Mark_8882"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/67573852/how-do-i-make-2-threads-work-simultaneously-on-adding-something-to-a-list-and-re",
    "last_activity_date": 1621271417,
    "creation_date": 1621269817,
    "answer_count": 1,
    "title": "How do I make 2 threads work simultaneously on adding something to a list and removing something from the list in an infinite loop in Java?",
    "body": "<p>Im working on some Code which is supposed to be having 2 Threads. One of those Threads adds random Books from a filled list1 to a different book list2 and the other removes Books from the same list2 both in an infinite loop.\nThe second Thread waits a little before starting, so the first Thread has enough time to fill up the List2 with some Books to remove.</p>\n<p>Heres what I came up with right now:</p>\n<pre><code>public class BookFabric implements Runnable {\n\nprivate List&lt;Book&gt; bookList = new ArrayList&lt;Book&gt;();\n\nprivate List&lt;Book&gt; filledBookList = new ArrayList&lt;Book&gt;();\n\npublic BookFabric() {\n}\n\npublic BookFabric(List&lt;Book&gt; list) {\n\n    this.filledBookList = list;\n}\n\nprivate void addBook(Book b) {\n    bookList.add(b);\n}\n\npublic void addRandomBook() {\n\n    Random rand = new Random();\n    addBook(filledBookList.get(rand.nextInt(filledBookList.size())));\n    System.out.println(&quot;Book added&quot;);\n\n}\n\npublic void deleteRandomBook() {\n    int r = 0;\n    if (!bookList.isEmpty()) {\n        while (r &gt; bookList.size()) {\n            r = (int) ((Math.random() * 50));\n        }\n        Book b = null;\n        b = bookList.remove(r);\n        if (b.equals(null)) {\n            System.out.println(&quot;Random Book removed&quot;);\n        }\n    }\n}\n\npublic void showBooks() {\n    for (Book temp : bookList) {\n        System.out.println(temp.getBookName());\n\n    }\n\n}\n\n@Override\npublic void run() {\n\n    while (true) {\n        try {\n            this.addRandomBook();\n        } catch (Exception e) {\n        }\n\n    }\n }\n}\n\n\n   public class Book {\n\n    String bookName;\n    \n    public Book(String name) {\n        this.bookName = name;\n    }\n\n    public String getBookName() {\n        return bookName;\n    }\n    \n    \n}\n\n\n\n\npublic class Thread1 extends BookFabric implements Runnable {\n\n\nBookFabric b; \n\npublic Thread1(BookFabric bF) {\n    this.b = bF;\n}\n\n\n@Override\npublic void run() {\n    \n    while(true) {\n            try {\n                Thread.sleep(5);\n                b.deleteRandomBook();\n            } catch (InterruptedException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n\n\n    }\n} \n</code></pre>\n<p>}</p>\n<pre><code> public class Main {\n\n\n      public static void main(String[] args) {\n\n       List&lt;Book&gt; bookList = new ArrayList&lt;Book&gt;(); \n       \n       Book b1 = new Book(&quot;first book&quot;);\n       Book b2 = new Book(&quot;second book &quot;);\n       Book b3 = new Book(&quot;third book&quot;);\n       \n       bookList.add(b1);\n       bookList.add(b2);\n       bookList.add(b3);\n       \n       BookFabric b = new BookFabric(bookList);\n       \n       Thread1 t = new Thread1(b);\n       \n       Thread t1 = new Thread(b);\n       Thread t2 = new Thread(t);\n       \n       t1.start();\n       t2.start();\n   }\n\n}\n</code></pre>\n<p>t1 in the Main Method works as intended. It Creates Random Books in an infinite loop. But for some reason t2 doesent even start at all and doesent end up removing any of those created random books from the list. Im pretty much out of ideas in this one. Would be very thankful for any kind of ideas on what I can do differently.</p>\n",
    "question_id": 67573852,
    "tags": [
      "java",
      "multithreading"
    ],
    "score": 0,
    "accepted_answer_id": 67574197,
    "is_answered": true,
    "view_count": 73
  },
  {
    "owner": {
      "profile_image": "https://graph.facebook.com/1156441754401375/picture?type=large",
      "account_id": 9122040,
      "user_type": "registered",
      "user_id": 6787187,
      "link": "https://stackoverflow.com/users/6787187/alpit-anand",
      "reputation": 1213,
      "display_name": "Alpit Anand",
      "accept_rate": 71
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/67572673/function-not-able-to-be-sync-between-two-threads",
    "last_activity_date": 1621266722,
    "creation_date": 1621265278,
    "answer_count": 1,
    "title": "Function not able to be sync between two threads",
    "body": "<p>I have been trying to use the executor service. However, I am failing to see the sync output.\nLike one thread should hold the lock, execute the loop and then the next thread.</p>\n<p>Can someone point what I am doing wrong?</p>\n<pre><code>    public class Arc implements Runnable {\n    public synchronized void run() {\n        int  c = 0;\n        for (int i = 0; i &lt; 10; i++) {\n            System.out.print(c++ + &quot; &quot;);\n        }\n\n    }\n}\n\n\nclass ArcTest {\n    public static void main(String args[]) {\n        Arc arc = new Arc();\n\n        ExecutorService executorService = Executors.newFixedThreadPool(10);\n        executorService.execute(new Arc());\n        executorService.execute(new Arc());\n        executorService.shutdown();\n\n    }\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>0 1 2 3 4 5 6 7 0 1 2 3 8 9 4 5 6 7 8 9 \n</code></pre>\n",
    "question_id": 67572673,
    "tags": [
      "java",
      "multithreading"
    ],
    "score": 0,
    "accepted_answer_id": 67573072,
    "is_answered": true,
    "view_count": 42,
    "last_edit_date": 1621265603
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/c551b230c2f77d087c7bda85d8b20736?s=256&d=identicon&r=PG&f=y&so-version=2",
      "account_id": 8851961,
      "user_type": "registered",
      "user_id": 6637207,
      "link": "https://stackoverflow.com/users/6637207/mordowiciel",
      "reputation": 91,
      "display_name": "mordowiciel",
      "accept_rate": 25
    },
    "content_license": "CC BY-SA 3.0",
    "link": "https://stackoverflow.com/questions/40197514/java-how-can-i-check-if-the-serversocket-accepted-the-connection",
    "last_activity_date": 1621222152,
    "creation_date": 1477173761,
    "answer_count": 3,
    "title": "Java - how can I check if the ServerSocket.accept()ed the connection?",
    "body": "<p>I'm trying to write simple server-client chat solution. For test purposes, I'm creating an array of 2 serverThreads, which are responsible for sending and receiving messages from the clients connected.</p>\n\n<p>I'd like a server to reject a connections after the number of connected clients reach a maximum value. However, even though the server do not accept the connection, the socket on client side is created. Methods socket.isBound and isConnected both return true value.</p>\n\n<p>So back to the main question. <strong>Do you have any ideas how could I reject the client from connecting when the ServerSocket will not be able to .accept() additional connection?</strong></p>\n\n<p>Here's the code of the Server class.</p>\n\n<pre><code>public class Server {\n\nprivate ServerSocket serverSocket = null;\nprivate ServerThread serverThread[] = new ServerThread[2];\nprotected volatile int clientCount = 0;\n\npublic Server (int port){\n   try {\n       System.out.println(\"Binding to port \" + port + \" ...\");\n       serverSocket = new ServerSocket (port);\n       System.out.println(\"Binded to port \" + port + \".\");\n   } catch (IOException e) {\n       System.out.println(\"Failed binding to the port: \" + e.getMessage());\n        }\n}\n\npublic void addThread (Socket socket){\n\n   System.out.println (\"Client connected at socket: \" + socket);\n   serverThread[clientCount] = new ServerThread (this, socket);\n   try {\n       serverThread[clientCount].open();\n       serverThread[clientCount].start();\n   } catch (IOException e) {e.getMessage();}\n\n}\n\npublic void waitForClient () {\n\n   boolean isLogPrinted = false;\n\n   while (true){\n       try {\n           if (clientCount &lt; serverThread.length){\n               System.out.println (\"Waiting for connection...\");\n               isLogPrinted = false;\n               addThread (serverSocket.accept());\n               clientCount++;\n               System.out.println(\"Client count: \" + clientCount);\n           }\n           else {\n               if (!isLogPrinted){\n                    System.out.println(\"MAXIMUM NUMBER OF CLIENTS REACHED! (\" + clientCount + \").\");\n                    isLogPrinted = true;\n               }\n           }\n       } catch (IOException e) {\n           System.out.println(\"Error while waiting for new clients to connect: \" + e.getMessage());\n            }\n   }\n}\n\npublic synchronized void broadcastMessages (String msg){\n   for (int i = 0; i &lt; clientCount; i++)\n       serverThread[i].sendMessage(msg);\n}\n\npublic static void main (String args[]){\n   Server server = new Server (4200);\n   server.waitForClient();\n }\n\n}\n</code></pre>\n",
    "question_id": 40197514,
    "tags": [
      "java",
      "multithreading",
      "sockets",
      "server",
      "client-server"
    ],
    "score": 0,
    "is_answered": true,
    "view_count": 5979,
    "last_edit_date": 1477176104
  },
  {
    "owner": {
      "profile_image": "https://lh4.googleusercontent.com/-qppNtT-hLks/AAAAAAAAAAI/AAAAAAAAAAA/AAnnY7pK5M5owjrXVau33ScI3xdldvJyNw/mo/photo.jpg?sz=256",
      "account_id": 13982631,
      "user_type": "registered",
      "user_id": 10098446,
      "link": "https://stackoverflow.com/users/10098446/mohendra-amatya",
      "reputation": 381,
      "display_name": "Mohendra Amatya"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/67553393/does-final-field-guarantee-the-field-values-to-be-visible-in-a-different-thread",
    "last_activity_date": 1621218404,
    "creation_date": 1621142079,
    "answer_count": 3,
    "title": "Does final field guarantee the field values to be visible in a different thread?",
    "body": "<p>I am using <code>JCStress</code> to test for the final variable. I know that <code>final</code> can be used to make sure that when you construct an object, another thread accessing that object doesn't see that object in a partially constructed state.\nNow I have a class <strong>A.java</strong> as such</p>\n<pre><code>public class A {\n    final int f;\n\n    A() {\n        this.f = 42;\n    }\n\n}\n</code></pre>\n<p>According to my knowledge, the constructor should be executed as such</p>\n<pre><code>A temp = &lt;new&gt;\ntemp.f = 42\n&lt;freeze value&gt;\nfv = temp\n</code></pre>\n<p>Now I'm using the below-mentioned test.</p>\n<pre><code>@JCStressTest\n@State\npublic class FinalField {\n    A a;\n\n    @Actor\n    public void writer() {\n        a = new A();\n    }\n\n    @Actor\n    public void reader(I_Result result) {\n        A ta = a;\n        if (ta != null) {\n            result.r1 = ta.f; \n        }\n    }\n\n}\n</code></pre>\n<p>Now, why is it that I see the value 0 in my output? My CPU architecture is x86, so reordering stores with loads also doesn't make sense. The output I get is</p>\n<pre><code>           0    94,922,153     FORBIDDEN  No default case provided, assume FORBIDDEN                  \n          42    48,638,587     ACCEPTABLE  Final value initialized    \n</code></pre>\n<p>Also, one more thing that I found unusual is that when I declare the field <code>a</code> as <code>static</code>. I get only 42 as my output, and why is that?</p>\n<pre><code>          42   299,477,390     ACCEPTABLE  Final value initialized      \n</code></pre>\n",
    "question_id": 67553393,
    "tags": [
      "java",
      "multithreading",
      "concurrency",
      "jcstress"
    ],
    "score": 3,
    "is_answered": true,
    "view_count": 107,
    "last_edit_date": 1621185635
  },
  {
    "owner": {
      "profile_image": "https://i.stack.imgur.com/1ttMF.jpg?s=256&g=1",
      "account_id": 3234022,
      "user_type": "registered",
      "user_id": 2728631,
      "link": "https://stackoverflow.com/users/2728631/balamurugan-kathiresan",
      "reputation": 67,
      "display_name": "Balamurugan Kathiresan"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/28626848/multithreading-in-apache-poi-workbook",
    "last_activity_date": 1614898390,
    "creation_date": 1424428481,
    "answer_count": 4,
    "title": "Multithreading in Apache POI Workbook",
    "body": "<p>I want to write into HSSFWorkBook or XSSFWorkBook in Multhreading environment. Each thread will do the modification in same or different sheet. </p>\n\n<pre><code>try {\n    String filePath=\"C:/Test.xlsx\";\n    FileInputStream fileInputStream = new FileInputStream(filePath);\n    Workbook workbook = new XSSFWorkbook(fileInputStream);\n    FileOutputStream fos = new FileOutputStream(filePath);\n    workbook.write(fos);\n    fos.close();\n    fileInputStream.close();\n} catch(Exception e) {\n    e.printStackTrace();\n    System.out.println(e.getMessage());\n}\n</code></pre>\n\n<p>While testing this code in LoadTest with MultiThreading in SOAPUI. I got the exception in line:</p>\n\n<pre><code>Workbook workbook = new XSSFWorkbook(fileInputStream);\n</code></pre>\n\n<p>The exception is as follows:</p>\n\n<pre><code>org.apache.poi.POIXMLException: org.apache.poi.openxml4j.exceptions.InvalidFormatException: Package should contain a content type part [M1.13]\n</code></pre>\n",
    "question_id": 28626848,
    "tags": [
      "java",
      "multithreading",
      "excel",
      "apache-poi"
    ],
    "score": 4,
    "is_answered": true,
    "view_count": 13474,
    "last_edit_date": 1526472601
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/e884f4e483fcbe9b3e68b8318b6b0c36?s=256&d=identicon&r=PG&f=y&so-version=2",
      "account_id": 9939598,
      "user_type": "registered",
      "user_id": 7356661,
      "link": "https://stackoverflow.com/users/7356661/jeremyji",
      "reputation": 101,
      "display_name": "JeremyJi"
    },
    "content_license": "CC BY-SA 3.0",
    "link": "https://stackoverflow.com/questions/41391209/spring-transactional-method-called-by-multithreadmulti-request",
    "last_activity_date": 1614874382,
    "creation_date": 1483076449,
    "answer_count": 2,
    "title": "Spring @Transactional method called by multithread(multi-request)",
    "body": "<p>Java web<br>\nSpring MVC framework</p>\n\n<p>In my service level, I wrote a <code>@Transactional</code> method. In that method, I update some data in database and then read the data from the database later.\nWhat surprises me is that when several requests come, inside the same thread, the data change is visible(which is supposed to be), but the data change is not visible in other thread.<br>\nIsn't different threads of one method build as one transaction?<br>\nAnd what should I do if I still want to use transaction and I want the same method called in different threads be in one transaction (the change of the data can be seen by each other)?</p>\n",
    "question_id": 41391209,
    "tags": [
      "java",
      "spring",
      "multithreading",
      "spring-mvc",
      "transactions"
    ],
    "score": 3,
    "accepted_answer_id": 41392530,
    "is_answered": true,
    "view_count": 8962,
    "last_edit_date": 1509367545
  },
  {
    "owner": {
      "profile_image": "https://lh4.googleusercontent.com/--gZ9cWxQ6wI/AAAAAAAAAAI/AAAAAAAAAAA/AMZuucl-KT-rfzc62x3cml-BjJ2AGLej3Q/s96-c/photo.jpg?sz=256",
      "account_id": 20867957,
      "user_type": "registered",
      "user_id": 15328570,
      "link": "https://stackoverflow.com/users/15328570/mr-h",
      "reputation": 33,
      "display_name": "Mr.H"
    },
    "closed_date": 1614853592,
    "link": "https://stackoverflow.com/questions/66472876/threads-and-multithreading",
    "last_activity_date": 1614853894,
    "creation_date": 1614852614,
    "answer_count": 1,
    "title": "Threads and Multithreading",
    "body": "<p>Im not clear with Threads and multithreading. How do they work, do they share the same call stack, and if yes how they can work and kind of parrarel. Can somebody please explain in detail how they work under the hook, and what is this parrarelism in multithreading, im still not getting it. When they share the call stack, and how effectively multithreading works.</p>\n",
    "question_id": 66472876,
    "tags": [
      "java",
      "multithreading"
    ],
    "score": -2,
    "closed_reason": "Needs more focus",
    "is_answered": true,
    "view_count": 69
  },
  {
    "owner": {
      "profile_image": "https://i.stack.imgur.com/K5WPD.jpg?s=256&g=1",
      "account_id": 1298254,
      "user_type": "registered",
      "user_id": 1248724,
      "link": "https://stackoverflow.com/users/1248724/zarathustra",
      "reputation": 2903,
      "display_name": "Zarathustra",
      "accept_rate": 67
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/54485755/java-11-httpclient-leads-to-endless-ssl-loop",
    "last_activity_date": 1614847764,
    "creation_date": 1549048066,
    "answer_count": 4,
    "title": "java 11 HttpClient leads to endless SSL loop",
    "body": "<p>I am using the <em>new</em> <code>java.net.http.HttpClient</code> with the <code>sendAsync</code> method.\nThe <code>HttpClient</code> is inside a Singelton and is created <strong>once</strong> like so:\n<code>HttpClient.newBuilder().build()</code> so really nothing special.</p>\n<p>Those requests can be <code>POST</code> or <code>GET</code> but I don't know which causes the trouble.</p>\n<p>There are just a few requests a day but from time to time one thread uses 100% of a cpu core. And not imminently but after some time when the request has finished.</p>\n<p>So I did a thread dump when there were even 2 of those endless loops occurring, the following 2 threads stood out:</p>\n<pre><code>&quot;HttpClient-4-Worker-5&quot; #144 daemon prio=5 os_prio=0 cpu=511298.10ms elapsed=520.71s tid=0x00007f684403e800 nid=0x2d6b runnable  [0x00007f68ac162000]\n   java.lang.Thread.State: RUNNABLE\n        at jdk.internal.net.http.common.SSLFlowDelegate$Writer.processData(java.net.http@11.0.2/SSLFlowDelegate.java:771)\n        at jdk.internal.net.http.common.SSLFlowDelegate$Writer$WriterDownstreamPusher.run(java.net.http@11.0.2/SSLFlowDelegate.java:645)\n        at jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(java.net.http@11.0.2/SequentialScheduler.java:147)\n        at jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(java.net.http@11.0.2/SequentialScheduler.java:198)\n        at jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(java.net.http@11.0.2/SequentialScheduler.java:271)\n        at jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(java.net.http@11.0.2/SequentialScheduler.java:224)\n        at jdk.internal.net.http.common.SSLFlowDelegate$Writer.triggerWrite(java.net.http@11.0.2/SSLFlowDelegate.java:722)\n        at jdk.internal.net.http.common.SSLFlowDelegate.doHandshake(java.net.http@11.0.2/SSLFlowDelegate.java:1024)\n        at jdk.internal.net.http.common.SSLFlowDelegate.doClosure(java.net.http@11.0.2/SSLFlowDelegate.java:1094)\n        at jdk.internal.net.http.common.SSLFlowDelegate$Reader.unwrapBuffer(java.net.http@11.0.2/SSLFlowDelegate.java:500)\n        at jdk.internal.net.http.common.SSLFlowDelegate$Reader.processData(java.net.http@11.0.2/SSLFlowDelegate.java:389)\n        - locked &lt;0x00000000fba68950&gt; (a java.lang.Object)\n        at jdk.internal.net.http.common.SSLFlowDelegate$Reader$ReaderDownstreamPusher.run(java.net.http@11.0.2/SSLFlowDelegate.java:263)\n        at jdk.internal.net.http.common.SequentialScheduler$SynchronizedRestartableTask.run(java.net.http@11.0.2/SequentialScheduler.java:175)\n        - locked &lt;0x00000000fbbca3e8&gt; (a java.lang.Object)\n        at jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(java.net.http@11.0.2/SequentialScheduler.java:147)\n        at jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(java.net.http@11.0.2/SequentialScheduler.java:198)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@11.0.2/ThreadPoolExecutor.java:1128)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@11.0.2/ThreadPoolExecutor.java:628)\n        at java.lang.Thread.run(java.base@11.0.2/Thread.java:834)\n\n   Locked ownable synchronizers:\n        - &lt;0x00000000fc1ff920&gt; (a java.util.concurrent.ThreadPoolExecutor$Worker)\n\n\n\n\n\n&quot;HttpClient-4-Worker-2&quot; #82 daemon prio=5 os_prio=0 cpu=4266156.67ms elapsed=4311.42s tid=0x00007f6844007000 nid=0x29ee runnable  [0x00007f686fffd000]\n   java.lang.Thread.State: RUNNABLE\n        at jdk.internal.net.http.common.SSLFlowDelegate$Writer.processData(java.net.http@11.0.2/SSLFlowDelegate.java:771)\n        at jdk.internal.net.http.common.SSLFlowDelegate$Writer$WriterDownstreamPusher.run(java.net.http@11.0.2/SSLFlowDelegate.java:645)\n        at jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(java.net.http@11.0.2/SequentialScheduler.java:147)\n        at jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(java.net.http@11.0.2/SequentialScheduler.java:198)\n        at jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(java.net.http@11.0.2/SequentialScheduler.java:271)\n        at jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(java.net.http@11.0.2/SequentialScheduler.java:224)\n        at jdk.internal.net.http.common.SSLFlowDelegate$Writer.triggerWrite(java.net.http@11.0.2/SSLFlowDelegate.java:722)\n        at jdk.internal.net.http.common.SSLFlowDelegate.doHandshake(java.net.http@11.0.2/SSLFlowDelegate.java:1024)\n        at jdk.internal.net.http.common.SSLFlowDelegate.doClosure(java.net.http@11.0.2/SSLFlowDelegate.java:1094)\n        at jdk.internal.net.http.common.SSLFlowDelegate$Reader.unwrapBuffer(java.net.http@11.0.2/SSLFlowDelegate.java:500)\n        at jdk.internal.net.http.common.SSLFlowDelegate$Reader.processData(java.net.http@11.0.2/SSLFlowDelegate.java:389)\n        - locked &lt;0x00000000f97668d0&gt; (a java.lang.Object)\n        at jdk.internal.net.http.common.SSLFlowDelegate$Reader$ReaderDownstreamPusher.run(java.net.http@11.0.2/SSLFlowDelegate.java:263)\n        at jdk.internal.net.http.common.SequentialScheduler$SynchronizedRestartableTask.run(java.net.http@11.0.2/SequentialScheduler.java:175)\n        - locked &lt;0x00000000f97668f0&gt; (a java.lang.Object)\n        at jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(java.net.http@11.0.2/SequentialScheduler.java:147)\n        at jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(java.net.http@11.0.2/SequentialScheduler.java:198)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@11.0.2/ThreadPoolExecutor.java:1128)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@11.0.2/ThreadPoolExecutor.java:628)\n        at java.lang.Thread.run(java.base@11.0.2/Thread.java:834)\n\n   Locked ownable synchronizers:\n        - &lt;0x00000000f9894cc0&gt; (a java.util.concurrent.ThreadPoolExecutor$Worker)\n</code></pre>\n<p>Same observation but on another container where only one thread was affected.</p>\n<pre><code>&quot;HttpClient-3-Worker-2&quot; #120 daemon prio=5 os_prio=0 cpu=1100568.51ms elapsed=1113.79s tid=0x00007eff3003b800 nid=0x479 runnable  [0x00007eff83bf8000]\n   java.lang.Thread.State: RUNNABLE\n        at sun.security.ssl.SSLEngineImpl.wrap(java.base@11.0.1/SSLEngineImpl.java:136)\n        - eliminated &lt;0x00000000f9796e08&gt; (a sun.security.ssl.SSLEngineImpl)\n        at sun.security.ssl.SSLEngineImpl.wrap(java.base@11.0.1/SSLEngineImpl.java:116)\n        - locked &lt;0x00000000f9796e08&gt; (a sun.security.ssl.SSLEngineImpl)\n        at javax.net.ssl.SSLEngine.wrap(java.base@11.0.1/SSLEngine.java:519)\n        at jdk.internal.net.http.common.SSLFlowDelegate$Writer.wrapBuffers(java.net.http@11.0.1/SSLFlowDelegate.java:821)\n        at jdk.internal.net.http.common.SSLFlowDelegate$Writer.processData(java.net.http@11.0.1/SSLFlowDelegate.java:736)\n        at jdk.internal.net.http.common.SSLFlowDelegate$Writer$WriterDownstreamPusher.run(java.net.http@11.0.1/SSLFlowDelegate.java:645)\n        at jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(java.net.http@11.0.1/SequentialScheduler.java:147)\n        at jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(java.net.http@11.0.1/SequentialScheduler.java:198)\n        at jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(java.net.http@11.0.1/SequentialScheduler.java:271)\n        at jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(java.net.http@11.0.1/SequentialScheduler.java:224)\n        at jdk.internal.net.http.common.SSLFlowDelegate$Writer.triggerWrite(java.net.http@11.0.1/SSLFlowDelegate.java:722)\n        at jdk.internal.net.http.common.SSLFlowDelegate.doHandshake(java.net.http@11.0.1/SSLFlowDelegate.java:1024)\n        at jdk.internal.net.http.common.SSLFlowDelegate.doClosure(java.net.http@11.0.1/SSLFlowDelegate.java:1094)\n        at jdk.internal.net.http.common.SSLFlowDelegate$Reader.unwrapBuffer(java.net.http@11.0.1/SSLFlowDelegate.java:500)\n        at jdk.internal.net.http.common.SSLFlowDelegate$Reader.processData(java.net.http@11.0.1/SSLFlowDelegate.java:389)\n        - locked &lt;0x00000000f9797010&gt; (a java.lang.Object)\n        at jdk.internal.net.http.common.SSLFlowDelegate$Reader$ReaderDownstreamPusher.run(java.net.http@11.0.1/SSLFlowDelegate.java:263)\n        at jdk.internal.net.http.common.SequentialScheduler$SynchronizedRestartableTask.run(java.net.http@11.0.1/SequentialScheduler.java:175)\n        - locked &lt;0x00000000f9797030&gt; (a java.lang.Object)\n        at jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(java.net.http@11.0.1/SequentialScheduler.java:147)\n        at jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(java.net.http@11.0.1/SequentialScheduler.java:198)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@11.0.1/ThreadPoolExecutor.java:1128)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@11.0.1/ThreadPoolExecutor.java:628)\n        at java.lang.Thread.run(java.base@11.0.1/Thread.java:834)\n</code></pre>\n<p>Some example code I am using</p>\n<pre><code>httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString())\n                                .thenApply(logResponse());\n</code></pre>\n<p>Java Version</p>\n<pre><code>openjdk version &quot;11.0.2&quot; 2019-01-15\nOpenJDK Runtime Environment (build 11.0.2+9-Debian-3)\nOpenJDK 64-Bit Server VM (build 11.0.2+9-Debian-3, mixed mode, sharing)\n</code></pre>\n<p>The problem also occurs when preferring HTTP 2</p>\n<p><strong>Updates</strong></p>\n<p>Am I using the <code>HttpClient</code> in a wrong way?\nCould this be a Server Problem?\nIs it maybe this bug <a href=\"https://bugs.openjdk.java.net/browse/JDK-8207009\" rel=\"nofollow noreferrer\">https://bugs.openjdk.java.net/browse/JDK-8207009</a>?</p>\n<ul>\n<li>Client connects to a cloudflare service</li>\n<li>When the issue occurs there are is no open connection to cloudflare via netstat visible</li>\n<li>I can pin the problem to http2 + tlsv1.3 (using the nginx docker image: <code>nginx:1.15-alpine</code> with tls1.3 enabled of course)</li>\n</ul>\n<p><strong>Bug appears to be fixed now according to</strong> <a href=\"https://bugs.openjdk.java.net/browse/JDK-8241054\" rel=\"nofollow noreferrer\">https://bugs.openjdk.java.net/browse/JDK-8241054</a></p>\n",
    "question_id": 54485755,
    "tags": [
      "java",
      "multithreading",
      "http",
      "http2",
      "java-11"
    ],
    "score": 26,
    "accepted_answer_id": 54655885,
    "is_answered": true,
    "view_count": 6914,
    "last_edit_date": 1614847764
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/1b4c378601042762d28e041f15ef7c26?s=256&d=identicon&r=PG&f=y&so-version=2",
      "account_id": 4741143,
      "user_type": "registered",
      "user_id": 3833840,
      "link": "https://stackoverflow.com/users/3833840/tamk",
      "reputation": 19,
      "display_name": "TamK"
    },
    "content_license": "CC BY-SA 3.0",
    "link": "https://stackoverflow.com/questions/24720849/print-numbers-1-20-with-two-threads-in-java",
    "last_activity_date": 1614834094,
    "creation_date": 1405240162,
    "answer_count": 6,
    "title": "Print numbers 1-20 with two threads in Java",
    "body": "<p>I'm trying to print numbers 1-20 with two threads:</p>\n\n<ul>\n<li>Even thread - Print only even numbers.</li>\n<li>Odd thread - print only odd numbers.</li>\n</ul>\n\n<p>I also have a lock object for synchronization.</p>\n\n<p>My application is stuck. Can you tell me what is the problem?</p>\n\n<p>My code:</p>\n\n<pre><code>public class runIt\n{\n\n    public static void main(String[] args)\n    {\n        Odd odd = new Odd(\"odd thread\");\n        Even even = new Even(\"even thread\");\n\n        odd._t.start();\n        even._t.start();\n\n        try{\n            odd._t.join();\n            even._t.join();\n        }\n        catch (InterruptedException e){\n            System.out.println(e.getMessage());\n        }   \n    }\n}\n</code></pre>\n\n<hr>\n\n<pre><code>public class Constants{\n    static Object lock = new Object();\n}\n</code></pre>\n\n<hr>\n\n<pre><code>public class Even implements Runnable{\n    Thread  _t;\n    String  _threadName;\n\n    public Even(String threadName){\n        _threadName = threadName;\n        _t = new Thread(this);\n    }\n\n    @Override\n    public void run(){\n        for (int i = 0; i &lt; 20; i++){\n            if (i % 2 == 0){\n                synchronized (Constants.lock){                  \n                    try{\n                        Constants.lock.wait();\n                        Constants.lock.notifyAll();\n                    }\n                    catch (InterruptedException e){\n                        e.printStackTrace();\n                    }\n                    System.out.println(_threadName + \" \" + i + \" \");\n                }\n            }\n        }\n    }\n}\n</code></pre>\n\n<hr>\n\n<pre><code>public class Odd implements Runnable{\n    Thread  _t;\n    String  _threadName;\n\n    public Odd(String threadName){\n        _threadName = threadName;\n        _t = new Thread(this);\n\n    }\n\n    @Override\n    public void run(){\n        for (int i = 0; i &lt; 20; i++){\n            if (i % 2 == 1){\n                synchronized (Constants.lock){                  \n                    try{\n                        Constants.lock.wait();\n                        Constants.lock.notifyAll();\n                    }\n                    catch (InterruptedException e1){\n                        e1.printStackTrace();\n                    }\n                    System.out.println(_threadName + \" \" + i + \" \");\n                }\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>My output should be: </p>\n\n<pre><code>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n</code></pre>\n\n<p>Thank you for the assistance,\nTam.</p>\n",
    "question_id": 24720849,
    "tags": [
      "java",
      "multithreading",
      "thread-safety",
      "deadlock",
      "thread-synchronization"
    ],
    "score": 1,
    "is_answered": true,
    "view_count": 7821,
    "last_edit_date": 1405240357
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/9e7f50c8aa281d791b4d5be24d2c2961?s=256&d=identicon&r=PG",
      "account_id": 1778663,
      "user_type": "registered",
      "user_id": 1621913,
      "link": "https://stackoverflow.com/users/1621913/joeyl",
      "reputation": 1295,
      "display_name": "JoeyL",
      "accept_rate": 85
    },
    "content_license": "CC BY-SA 3.0",
    "link": "https://stackoverflow.com/questions/15631304/asynctask-vs-worker-thread-for-getting-information-from-a-mysql-db",
    "last_activity_date": 1614821754,
    "creation_date": 1364281787,
    "answer_count": 3,
    "title": "AsyncTask vs Worker thread for getting information from a MySQL DB",
    "body": "<p>I understand that I cannot access a MySQL DB from the main thread (UI thread).  So I know now that I have options for doing so.  I can use a worker thread ( Thread t = new Thread() ) to access MySQL db and get what I need or I can do AsyncTask to access MySQL db and get what I need.  </p>\n\n<p>But my question here is, what would be the right way of going about this or the most efficient approach here?  I really want to understand and follow good programming procedures when I come across this. </p>\n\n<p>So retrieving data from a MySQL db: AsyncTask, a worker thread or would there be no difference time, power etc?</p>\n",
    "question_id": 15631304,
    "tags": [
      "java",
      "android",
      "multithreading",
      "android-asynctask"
    ],
    "score": 1,
    "accepted_answer_id": 15631479,
    "is_answered": true,
    "view_count": 990
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/6c15aa84bdb36ba7762921f8da83cbcc?s=256&d=identicon&r=PG&f=y&so-version=2",
      "account_id": 11066982,
      "user_type": "registered",
      "user_id": 8126489,
      "link": "https://stackoverflow.com/users/8126489/paskal",
      "reputation": 23,
      "display_name": "paskal"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/53029722/how-can-i-log-thread-id-of-parent-child-using-aspectj-in-java",
    "last_activity_date": 1614793690,
    "creation_date": 1540715868,
    "answer_count": 1,
    "title": "How can I log Thread Id of Parent &amp; Child using AspectJ in Java",
    "body": "<p>I'm new to AspectJ. Was able to create a simple JUnit and Aspect classes to log ThreadId, which logs Parent Thread Id. But I'm not able to figure out how to log Child ThreadId.</p>\n<p>Given the following snippet of code, I'd like to log Thread Id of both parent and child using AspectJ.</p>\n<p>JUnit:</p>\n<pre><code>@Test\npublic void testExecutorService() {\n    ExecutorService service = Executors.newSingleThreadExecutor();\n    Runnable task = new Runnable() {\n        @Override\n        public void run() {\n            System.out.println(&quot;working on the task&quot;);\n        }\n    };\n    service.submit(task);\n}\n</code></pre>\n<p>Aspect: The following aspect logs Parent ThreadId.</p>\n<pre><code>before() :\n    call(* ExecutorService+.submit(..))\n {\n    System.out.println(&quot;Parent Thread Id: &quot;+Thread.currentThread().getId());\n    //System.out.println(&quot;Child Thread Id: &quot;+??); //?? - how to capture child thread id?\n }\n</code></pre>\n<p>I understand that it is using &quot;before&quot; advice here and also it is intercepting submit method, which might be an issue as well.\nHow can I log child Thread Id along with Parent Thread Id using correct Pointcut expression?</p>\n",
    "question_id": 53029722,
    "tags": [
      "java",
      "multithreading",
      "aop",
      "aspectj"
    ],
    "score": 2,
    "accepted_answer_id": 53105412,
    "is_answered": true,
    "view_count": 701,
    "last_edit_date": 1613840189
  },
  {
    "owner": {
      "profile_image": "https://lh6.googleusercontent.com/-zysTsphgh80/AAAAAAAAAAI/AAAAAAAAACM/Q2h-OaaX0mA/photo.jpg?sz=256",
      "account_id": 8179843,
      "user_type": "registered",
      "user_id": 6157415,
      "link": "https://stackoverflow.com/users/6157415/mike-d3vid-tyson",
      "reputation": 1731,
      "display_name": "Mike D3ViD Tyson"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/43630406/java-lang-arrayindexoutofboundsexception-1-future-get-multithreading",
    "last_activity_date": 1614791985,
    "creation_date": 1493199470,
    "answer_count": 1,
    "title": "java.lang.ArrayIndexOutOfBoundsException: -1 future.get() multithreading",
    "body": "<p>Why does my app throw a</p>\n<blockquote>\n<p>java.lang.ArrayIndexOutOfBoundsException: -1</p>\n</blockquote>\n<p>when I invoke future.get() on java.utils.concurrent.Future??</p>\n<pre><code>   List&lt;Future&gt; tableLoadings = new LinkedList&lt;&gt;();\n   ExecutorService executor = Executors.newFixedThreadPool(8);\n    try{\n        for(Entry&lt;Integer, String&gt; entry: farmIds.entrySet())\n        {   \n            int id = entry.getKey();\n            String username = entry.getValue(); \n            \n            psLog.println(&quot;START ELABORAZIONE FARMACIA ID : &quot;+ id+&quot; TPH_USERNAME : &quot;+username );    \n            /*SdajSdaj*/\n            tableLoadings.add(executor.submit(new StatusMultiThreading(id, username, psLog, connSTORY, connCF, mongoDatabase)));\n        }\n        for (Future&lt;Void&gt; future : tableLoadings) {         \n                try{\n                    future.get();           \n                }catch(Exception e){\n                    psLog.println(&quot;[EE] ERORE ELABORAZIONE THREAD FARMACIA [EE] &quot;+e.getMessage());\n                }\n        }\n    }finally{\n        executor.shutdown(); \n        psLog.println(&quot;END CONSOLIDA STATUS FARMACIE&quot;);\n    }           \n</code></pre>\n<p>this is the log..</p>\n<pre><code>START ELABORAZIONE FARMACIA ID : 62 TPH_USERNAME : A0102987\nSTART ELABORAZIONE FARMACIA ID : 63 TPH_USERNAME : A0103019\nSTART SENDING DATA TO DB FARMID = 66\n...\nSTART SENDING DATA TO DB FARMID = 17\n[EE] ERORE ELABORAZIONE THREAD FARMACIA [EE] java.lang.ArrayIndexOutOfBoundsException: -1\n[EE] ERRORE ELABORAZIONE THREAD FARMACIA [EE] java.lang.ArrayIndexOutOfBoundsException: -1\nEND CONSOLIDA STATUS FARMACIE\n</code></pre>\n<p>I can't find anything wrong if I debug.</p>\n<p>I cannot go inside .get() method, so I don't understand which line of code is invalid.</p>\n",
    "question_id": 43630406,
    "tags": [
      "java",
      "multithreading",
      "indexoutofboundsexception",
      "java.util.concurrent"
    ],
    "score": 1,
    "accepted_answer_id": 43630459,
    "is_answered": true,
    "view_count": 948,
    "last_edit_date": 1614791985
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/8887b6449cf1ee169bfafa91d8348110?s=256&d=identicon&r=PG&f=y&so-version=2",
      "account_id": 14554565,
      "user_type": "registered",
      "user_id": 12682179,
      "link": "https://stackoverflow.com/users/12682179/jon-b",
      "reputation": 61,
      "display_name": "Jon B"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/66460441/copyonwritearraylist-vs-atomicarrays-in-java",
    "last_activity_date": 1614786625,
    "creation_date": 1614786625,
    "answer_count": 0,
    "title": "CopyOnWriteArrayList vs AtomicArrays in Java",
    "body": "<p>I know that CopyOnArrayList rather than locking the list, creates a seperate copies of the list for every modification and multiple threads do access it at the same time but still data consistency is maintained because of cloning, and AtomicArrays will use a lock, and only single thread can access it at a time.</p>\n<p>So CopyOnArrayList will be helpful if we have more read operations.</p>\n<p>Have I got it right till here and is there anymore to it?</p>\n",
    "question_id": 66460441,
    "tags": [
      "java",
      "arrays",
      "multithreading"
    ],
    "score": 0,
    "is_answered": false,
    "view_count": 59
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/2271eda4ebce1e2c9c42a4f705e339c7?s=256&d=identicon&r=PG",
      "account_id": 2521751,
      "user_type": "registered",
      "user_id": 2191979,
      "link": "https://stackoverflow.com/users/2191979/pakira",
      "reputation": 1991,
      "display_name": "Pakira",
      "accept_rate": 37
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/66452567/how-does-this-threadlocal-prevent-the-classloader-from-getting-gced",
    "last_activity_date": 1614778608,
    "creation_date": 1614756860,
    "answer_count": 1,
    "title": "How does this ThreadLocal prevent the Classloader from getting GCed",
    "body": "<p>I am trying to understand how <code>Threadlocal</code> can cause <code>Classloader</code> leak. So for this I have this code</p>\n<pre><code>public class Main {\n    public static void main(String... args) throws Exception {\n        loadClass();\n        while (true) {\n            System.gc();\n            Thread.sleep(1000);\n        }\n    }\n\n    private static void loadClass() throws Exception {\n        URL url = Main.class.getProtectionDomain()\n                .getCodeSource()\n                .getLocation();\n        MyCustomClassLoader cl = new MyCustomClassLoader(url);\n        Class&lt;?&gt; clazz = cl.loadClass(&quot;com.test.Foo&quot;);\n        clazz.newInstance();\n        cl = null;\n    }\n}\n\nclass MyCustomClassLoader extends URLClassLoader {\n    public MyCustomClassLoader(URL... urls) {\n        super(urls, null);\n    }\n\n    @Override\n    protected void finalize() {\n        System.out.println(&quot;*** CustomClassLoader finalized!&quot;);\n    }\n}\n</code></pre>\n<p>Foo.java</p>\n<pre><code>public class Foo {\n    private static final ThreadLocal&lt;Bar&gt; tl = new ThreadLocal&lt;Bar&gt;();\n\n    public Foo() {\n        Bar bar = new Bar();\n        tl.set(bar);\n        System.out.println(&quot;Test ClassLoader: &quot; + this.getClass()\n                .getClassLoader());\n    }\n\n    @Override\n    protected void finalize() {\n        System.out.println(this + &quot; finalized!&quot;);\n    }\n}\n</code></pre>\n<p>Bar.java</p>\n<pre><code>public class Bar {\n    public Bar() {\n        System.out.println(this + &quot; created&quot;);\n        System.out.println(&quot;Bar ClassLoader: &quot; + this.getClass()\n                .getClassLoader());\n    }\n\n    @Override\n    public void finalize() {\n        System.out.println(this + &quot; finalized&quot;);\n    }\n}\n</code></pre>\n<p>After running this code it shows that <code>MyCustomClassloader </code> and <code>Bar</code> finalize is not called, only <code>Foo</code> finalize is called.\nBut when I change Threadlocal to String then all the finalize is called.</p>\n<pre><code>public class Foo {\n    private static final ThreadLocal&lt;String&gt; tl = new ThreadLocal&lt;String&gt;();\n\n    public Foo() {\n        Bar bar = new Bar();\n        tl.set(&quot;some&quot;);\n        System.out.println(&quot;Test ClassLoader: &quot; + this.getClass()\n                .getClassLoader());\n    }\n</code></pre>\n<p>Can you please explain why there is a difference when using ThreadLocal as <code>String</code> vs <code>Bar</code>?</p>\n",
    "question_id": 66452567,
    "tags": [
      "java",
      "multithreading",
      "memory-leaks",
      "garbage-collection"
    ],
    "score": 5,
    "accepted_answer_id": 66458166,
    "is_answered": true,
    "view_count": 275,
    "last_edit_date": 1614778608
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/224c1fc80ce88c3e0f59f420ce575043?s=256&d=identicon&r=PG&f=y&so-version=2",
      "account_id": 5378847,
      "user_type": "registered",
      "user_id": 4284764,
      "link": "https://stackoverflow.com/users/4284764/gerard-martinelli",
      "reputation": 39,
      "display_name": "Gerard Martinelli"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/65407356/thread-synchronization-from-swing-component",
    "last_activity_date": 1608715032,
    "creation_date": 1608634241,
    "answer_count": 1,
    "title": "Thread synchronization from Swing Component",
    "body": "<p>I failed after a lot for tries to synchronize my main task with its substask (thread). I haven't found any example when calling from a swing component.</p>\n<p>I created a white panel on which I display a clip movie.  This works pretty well.\nHowever, as soon, as the Thread terminates, I want to take control back in the main task.  It seems after  &quot;setVisible(true) the next instructions are not executed. I also tried with a loop  issuing  sleep for 1 second, but it was not executed.   Here is my last code.</p>\n<pre><code>     /* Auteur: Gérard MARTINELLI  */\n     import gegeutil.Gegetools;\n     import javax.swing.JFrame;\n     import javax.swing.JOptionPane;\n     import java.io.BufferedReader;\n     import java.io.InputStreamReader;\n     import java.util.Vector;\n     import java.util.concurrent.CountDownLatch;\n     import java.awt.Color;\n     \n     public class JouerClip extends javax.swing.JDialog   \n     \n      \n     /*    Variables et constantes  */\n        \n     public static final long serialVersionUID = 1401213293925293574L;\n     \n     public     static String  titre       =   &quot;&quot;,\n                            film         =   &quot;&quot;;\n     protected  Thread      th           =   new Thread();\n     protected  boolean     inService    =   false,\n                           internal     =   false;\n     public static Process process     =    null;\n     public static  String videoplayer  =   &quot;E:/PotPlayer/PotPlayerMini64.exe&quot;;\n     public static  String pathFilm     =   &quot;F:/Films&quot;;\n     \n        public JouerClip(JFrame owner, String  filmName, boolean inter) // constructeur\n     { \n        super(owner,true);\n        if (Gegetools.isEmpty(filmName)) setVisible(false); \n        film =   filmName;\n        internal = inter;\n         initialize();\n     }\n      \n     public void initialize() \n     {    \n        setSize(1136, 873);\n        getContentPane().setLayout(null);\n        getContentPane().setBackground(Color.WHITE);\n        setLocationRelativeTo(null); \n        th = new Thread() \n        {\n              public void run() \n              {\n                   System.out.println(&quot;Thread  running&quot;);\n                    \n               jouer(pathFilm+&quot;/&quot; + film); \n                   System.out.println(&quot;Thread stopped&quot;);\n                   inService= false;\n              }\n          };\n          inService= true;\n          th.start();\n          setVisible(true);\n          System.out.println(&quot;I continue the main task&quot;);\n          try \n          {\n               CountDownLatch latch = new CountDownLatch(3);\n               latch.await(); // Wait for countdown\n               this.setVisible(false);\n               if (internal) System.exit(0); else this.setVisible(false);\n              } \n         catch (InterruptedException e) \n         {\n                 e.printStackTrace();\n             }\n     }\n     \n     public static void jouer( String path) \n     {\n        //  This works pretty well. \n        // When the clip ends, the videoplayer has  gone. \n     }\n     \n     public static void main(String[] agrs) \n     {\n             new JouerClip(new JFrame(), &quot;Seven.mp4&quot;, true);\n    }\n    } \n</code></pre>\n",
    "question_id": 65407356,
    "tags": [
      "java",
      "multithreading",
      "swing",
      "synchronization"
    ],
    "score": 0,
    "is_answered": false,
    "view_count": 37,
    "last_edit_date": 1608659447
  },
  {
    "owner": {
      "profile_image": "https://lh4.googleusercontent.com/-3wceRLue6UQ/AAAAAAAAAAI/AAAAAAAAAAA/AGDgw-jFXEiKoaQXFCL8wdN74RBXRCEMxA/mo/photo.jpg?sz=256",
      "account_id": 14882061,
      "user_type": "registered",
      "user_id": 10746400,
      "link": "https://stackoverflow.com/users/10746400/alex",
      "reputation": 105,
      "display_name": "Alex"
    },
    "closed_date": 1608656343,
    "link": "https://stackoverflow.com/questions/65382129/how-to-print-lines-in-certain-order-from-different-threads",
    "last_activity_date": 1608655627,
    "creation_date": 1608481717,
    "answer_count": 2,
    "title": "How to print lines in certain order from different threads?",
    "body": "<p>Suppose we have a class:</p>\n<pre class=\"lang-java prettyprint-override\"><code>public class Foo {\n  public void first() { print(&quot;first&quot;); }\n  public void second() { print(&quot;second&quot;); }\n  public void third() { print(&quot;third&quot;); }\n}\n</code></pre>\n<p>The same instance of Foo will be passed to three different threads. Thread A will call first(), thread B will call second(), and thread C will call third(). Design a mechanism and modify the program to ensure that second() is executed after first(), and third() is executed after second().</p>\n<p>My full solution looks like:</p>\n<pre class=\"lang-java prettyprint-override\"><code>class Foo {\n\n    int threadNumber;\n\n    public Foo() {\n        this.threadNumber = 1;\n    }\n\n    synchronized public void first(Runnable printFirst) throws InterruptedException {\n        while (threadNumber != 1) {\n            wait();\n        }\n        // printFirst.run() outputs &quot;first&quot;. Do not change or remove this line.\n        printFirst.run();\n        threadNumber++;\n        notifyAll();\n    }\n\n    synchronized public void second(Runnable printSecond) throws InterruptedException {\n        while (threadNumber != 2) {\n            wait();\n        }\n        // printSecond.run() outputs &quot;second&quot;. Do not change or remove this line.\n        printSecond.run();\n        threadNumber++;\n        notifyAll();\n    }\n\n    synchronized public void third(Runnable printThird) throws InterruptedException {\n        while (threadNumber != 3) {\n            wait();\n        }\n        // printThird.run() outputs &quot;third&quot;. Do not change or remove this line.\n        printThird.run();\n        threadNumber++;\n        notifyAll();\n    }\n}\n</code></pre>\n<p>Currently I don't understand how to pass Runnable object to the synchronized methods (it's one the task conditions):</p>\n<pre class=\"lang-java prettyprint-override\"><code>public class Main {\n    public static void main(String[] args) {\n        Foo foo = new Foo();\n        CustomFirst customFirst = new CustomFirst();\n        CustomSecond customSecond = new CustomSecond();\n        CustomThird customThird = new CustomThird();\n\n        try {\n            foo.first(customFirst);\n            foo.third(customThird);\n            foo.second(customSecond);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre>\n",
    "question_id": 65382129,
    "tags": [
      "java",
      "multithreading",
      "concurrency",
      "thread-safety"
    ],
    "score": 1,
    "closed_reason": "Needs details or clarity",
    "is_answered": false,
    "view_count": 650,
    "last_edit_date": 1608655627
  },
  {
    "owner": {
      "profile_image": "https://i.stack.imgur.com/pVgdB.png?s=256&g=1",
      "account_id": 4130267,
      "user_type": "registered",
      "user_id": 3388381,
      "link": "https://stackoverflow.com/users/3388381/ph0enix",
      "reputation": 763,
      "display_name": "ph0enix",
      "accept_rate": 100
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/65411185/vertx-break-out-of-a-hung-thread",
    "last_activity_date": 1608650160,
    "creation_date": 1608650160,
    "answer_count": 0,
    "title": "Vertx break out of a hung thread",
    "body": "<p>So, the situation is like this: vert.x backend app has a worker Verticle instance that invokes a static method from Service class that in turn invoke a method from a 3rd Java lib that makes some requests and returns the result.</p>\n<p>The problem arises in a specific situation where the 3rd party lib call hangs. The app gets stuck indefinitely at</p>\n<pre><code>java.base@11.0.8/java.net.SocketInputStream.socketRead0(Native Method)\n</code></pre>\n<p>and the vert.x <code>BlockedThreadChecker</code> starts throwing out warnings:</p>\n<pre><code>WARNING: Thread Thread[vert.x-worker-thread-18,5,main]=Thread[vert.x-worker-thread-18,5,main] has been blocked for 61537 ms, time limit is 60000 ms \n</code></pre>\n<p>and the verticle is left unresponsive.</p>\n<p>I was looking for a solution of this issue. Changing the whole 3rd party lib would probably be an option if there was an alternative or time. Worker verticle (which I'm already using) and <code>executeBlocking</code> are not the solution because this is an infinitely blocking operation. I tried recognizing the hang with the separate watchdog verticle and redeploying it; this helped in a way that verticle was useful again but thread checker was still giving out warnings about the Thread blocked.</p>\n<p>The best solution I have come so far is to let a watchdog recognize a hang and do a restart of the whole app, but that seems a bit radical and I would prefer to do it without shutting the app down, if possible. Is there an option I have overlooked?</p>\n<p>Thank you in advance for advice.</p>\n",
    "question_id": 65411185,
    "tags": [
      "java",
      "multithreading",
      "vert.x",
      "vertx-verticle"
    ],
    "score": 1,
    "is_answered": false,
    "view_count": 331
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/305e6fee0c18b570ddbdad5d7b14f0a4?s=256&d=identicon&r=PG&f=y&so-version=2",
      "account_id": 16638377,
      "user_type": "registered",
      "user_id": 12853068,
      "link": "https://stackoverflow.com/users/12853068/art3",
      "reputation": 93,
      "display_name": "Art3"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/65344341/how-can-i-set-task-timeout-in-javafx",
    "last_activity_date": 1608649150,
    "creation_date": 1608221582,
    "answer_count": 1,
    "title": "How can I set Task timeout in JavaFx?",
    "body": "<p>I have a class with one method that get data through usb device and add it into ArrayList:</p>\n<pre><code>public class usbDevice {\n    public Task&lt;Void&gt; readData() {\n        return new Task&lt;Void&gt;() {\n            @Override\n            protected Void call() throws Exception {\n                //read data through usb device and add it into array;\n                return null;\n            }\n        };\n    }\n}\n</code></pre>\n<p>I call this method when press the button inside controller class which extends USB_device class:</p>\n<pre><code>@FXML\nvoid readUSB(ActionEvent event) {\n    try {\n        Parent root = FXMLLoader.load(getClass().getResource(&quot;../resources/loadingPage.fxml&quot;));\n        Scene scene = startButton.getScene();\n\n        root.translateXProperty().set(scene.getWidth());\n        parent.getChildren().add(root);\n\n        Timeline timeline = new Timeline();\n        KeyValue keyValue = new KeyValue(root.translateXProperty(), 0 , Interpolator.EASE_IN);\n        KeyFrame keyFrame = new KeyFrame(Duration.millis(100), keyValue);\n        timeline.getKeyFrames().add(keyFrame);\n\n        timeline.setOnFinished(event1 -&gt; {\n            parent.getChildren().remove(container);\n            Task&lt;Void&gt; readTask = readData();\n            Thread t = new Thread(readTask);\n            t.start();\n        });\n        timeline.play();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n</code></pre>\n<p>But sometimes I get stuck in this method and I need to reconnect to my usb device if after 10 seconds, for example, I did not get the data. How can I set timeout which will reconnect my usb device every 10 seconds in this thread until I get data through it?\nThanks in advance</p>\n",
    "question_id": 65344341,
    "tags": [
      "java",
      "multithreading",
      "javafx",
      "task"
    ],
    "score": 1,
    "accepted_answer_id": 65346950,
    "is_answered": true,
    "view_count": 957,
    "last_edit_date": 1608649150
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/755d6997dd3da1e0bcf0838fa0f00744?s=256&d=identicon&r=PG",
      "account_id": 1039449,
      "user_type": "registered",
      "user_id": 1045851,
      "link": "https://stackoverflow.com/users/1045851/nick-haughton",
      "reputation": 99,
      "display_name": "Nick Haughton",
      "accept_rate": 56
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/14072940/threading-a-paint-method",
    "last_activity_date": 1608621546,
    "creation_date": 1356713787,
    "answer_count": 1,
    "title": "Threading a paint method",
    "body": "<p>I was wondering how I would thread the following code, or just a method in general:</p>\n\n<pre><code>public void run (){\n\n    public void paint(Graphics g) {\n        g.fillRect(20, 20, 20, 20);\n        for (int i = 20; i &lt; 1000; i++) {\n            g.fillRect(20, i, 20, 20);\n            Thread.sleep(10);\n        }\n    }\n}\n</code></pre>\n\n<p>I find that I am unable to make a thread of this code because I get an illegal start of expression error, which is fair but I do not see a way around it.</p>\n",
    "question_id": 14072940,
    "tags": [
      "java",
      "multithreading",
      "swing",
      "paintcomponent",
      "event-dispatch-thread"
    ],
    "score": 4,
    "accepted_answer_id": 14072987,
    "is_answered": true,
    "view_count": 3577,
    "last_edit_date": 1608621546
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/cc09c1f58a042cb0bc789eec3165a3c0?s=256&d=identicon&r=PG&f=y&so-version=2",
      "account_id": 17535511,
      "user_type": "registered",
      "user_id": 12718729,
      "link": "https://stackoverflow.com/users/12718729/lenny",
      "reputation": 21,
      "display_name": "Lenny"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/65396228/does-multi-cores-machines-helps-in-fast-processing-with-multithreading",
    "last_activity_date": 1608573471,
    "creation_date": 1608567369,
    "answer_count": 1,
    "title": "Does multi cores machines helps in fast processing with Multithreading?",
    "body": "<p>I'm getting confused with multiple threads execution within in multiple cores of a machine.</p>\n<p>For example, I've a method which is bulding a 100 story building.</p>\n<pre><code>synchronized buildingStories(){\n\n}\n</code></pre>\n<p>To complete building faster, I decide to use 4 workers (threads). Lets say when T1 will build a floor1 and T2 will build floor2 and so on.</p>\n<p>So once T1 acquired a lock on <code>buildingStories</code> , T2 wont be able to acquire lock and do his build until T1 release it. Even machine is mutli core and other threads or workers have to be in queue until shared resource is free, how multi threading increasing the performance ? At the end Thread have to wait until its turn come and run to core to process it.</p>\n<p>Its very naive quesion, but suggestion would be appreciated to understand.</p>\n",
    "question_id": 65396228,
    "tags": [
      "java",
      "multithreading",
      "multicore"
    ],
    "score": 0,
    "is_answered": true,
    "view_count": 109
  },
  {
    "owner": {
      "profile_image": "https://i.stack.imgur.com/OWvGv.jpg?s=256&g=1",
      "account_id": 14035474,
      "user_type": "registered",
      "user_id": 10138295,
      "link": "https://stackoverflow.com/users/10138295/thenameisviru",
      "reputation": 13,
      "display_name": "TheNameIsViRu"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/65393915/multi-threading-concept-wait-and-notify-inside-asynctask-progressbar-update",
    "last_activity_date": 1608566738,
    "creation_date": 1608558442,
    "answer_count": 1,
    "title": "Multi threading concept wait() and notify() inside AsyncTask ProgressBar update",
    "body": "<p>Here inside background method need to call multiple API request based on the size of the list. But i'm using while(). It is not wait un till request API and get response. So am using thread inside. How to synchronized. Once the API call get success after only need to call next request.</p>\n<pre><code>    private class AsyncPost extends AsyncTask&lt;String, Void, Void&gt; {\n        String strResult = &quot;&quot;;\n\n        @Override\n        protected Void doInBackground(String... params) {\n\n            try {\n\n                GlobalVariables.rqCount=0;\n                mHandler=null;\n                mHandler = new Handler(Looper.getMainLooper()) {\n                    @Override\n                    public void handleMessage(android.os.Message message) {\n                        onProgressUpdate(message.getData().getString(&quot;MessageString&quot;));     \n                    }\n                };\n                strResult = &quot;ENSURE NOT EMPTY&quot;;\n                strResult=getRequestResult(Listactivity.this,50, mHandler);\n\n            }\n            catch (Exception e)\n            {   \n            dialog.dismiss();\n            }\n            return null;\n        }\n\n        @Override\n        protected void onPostExecute(Void resultGetlogin) {\n\n\n            try {\n                dialog.dismiss();\n\n                if(strResult.equals(&quot;Success&quot;)){\n                    CustomDiallog.showAlertDialog(Listactivity.this, &quot;Successfully!!&quot;);\n                }else{\n                    CustomDiallog.showAlertDialog(Listactivity.this, &quot;FAIL!!&quot;);\n                }\n\n            } catch (Exception e) {\n                dialog.dismiss();\n\n            }\n\n        }\n\n        protected void onProgressUpdate(String... values) {\n            dialog.setMessage(&quot;&quot;+values[0]);\n        }\n\n        protected void onPreExecute() {\n\n            dialog = ProgressDialog.show(Sync_Bulk.this, &quot;&quot;, &quot;&quot;);\n        }\n    }\n</code></pre>\n<p>This thread am using but getting crash help me</p>\n<pre><code>    private class getRequestResult(Context context, int allSyncLimit,Handler handler2){\n            new Thread(new Runnable() {\n                @Override\n                public void run() {\n                    try {\n                        inalContext.wait();\n\n                        if (res_result.equals(&quot;Success&quot;)) {\n                            result[0] = &quot;Success&quot;;\n                        } else {\n                            result[0] = &quot;fail&quot;;\n                        }\n                    }catch (Exception e){\n                        e.printStackTrace();\n                    }\n                }\n            }).start();\n\n\n                new Thread(new Runnable() {\n                    @Override\n                    public void run() {\n                        synchronized (finalContext) {\n                            postRequest((Activity) finalContext, list);   // This is Api method and notify() is called\n                        }\n                    }\n                }).start();\n                \n                }\n                \n        }\n</code></pre>\n",
    "question_id": 65393915,
    "tags": [
      "java",
      "android",
      "multithreading",
      "android-asynctask",
      "android-thread"
    ],
    "score": 0,
    "is_answered": true,
    "view_count": 44
  },
  {
    "owner": {
      "profile_image": "https://i.stack.imgur.com/Sotq0.jpg?s=256&g=1",
      "account_id": 15358913,
      "user_type": "registered",
      "user_id": 11080429,
      "link": "https://stackoverflow.com/users/11080429/jens",
      "reputation": 17,
      "display_name": "Jens"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/65391501/timer-in-javafx-updating-label-bindings",
    "last_activity_date": 1608564725,
    "creation_date": 1608548234,
    "answer_count": 2,
    "title": "Timer in JavaFX updating Label (Bindings)",
    "body": "<p>I want to add a clock to my application that tells how long you have been doing the task. To simplify it, I have included a counter that increments every second in a new thread and update the label 'setTimer' with the counter number. For this I have a label fx:id=&quot;setTimer&quot; in my .fxml file and imported it into my class.</p>\n<pre><code> @FXML\n    private Label setTimer;\n</code></pre>\n<p>And created another class in my class that extends the thread TimerTask and increments the counter by one on each call.  Created a new Object 'text', which should always be updated with the current value of the counter.</p>\n<pre><code>    SimpleStringProperty text = new SimpleStringProperty(&quot;undefined&quot;);\n</code></pre>\n<pre><code>public class MyTask extends TimerTask {\n        @Override\n        public void run() {\n            counter++;\n            text.set(Integer.toString(counter));\n        }\n    }\n</code></pre>\n<p>To have this class called every second I created a timer in the initialize method and set it to one second.</p>\n<pre><code>@Override\n    public void initialize(URL url, ResourceBundle resourceBundle) {\n        MyTask myTask = new MyTask();\n        Timer timer = new Timer(true);\n        timer.scheduleAtFixedRate(myTask, 0 , 1000);\n        setTimer.textProperty().bind(text);\n    }\n</code></pre>\n<p>At the moment I get the exception 'Not on FX application thread; currentThread = Timer-0'.</p>\n<p>I've tried many ways to solve my problem, but I haven't gotten to the right point.\nMy idea of ​​what I want to do should be clear, and I would be happy if someone could help me.\nMy Problem is to update the changes of the counter in the GUI.\nIt doesn't have to be solved the way I thought it would, just need a tip on how to best implement it.</p>\n<p>Thank you</p>\n",
    "question_id": 65391501,
    "tags": [
      "java",
      "multithreading",
      "javafx",
      "javafx-bindings"
    ],
    "score": 0,
    "accepted_answer_id": 65391726,
    "is_answered": true,
    "view_count": 742
  },
  {
    "owner": {
      "profile_image": "https://lh3.googleusercontent.com/a-/AOh14GgmDcOPe-PSi6MlH5RQWtXSMao69bzFfbn6ipupXSY=k-s256",
      "account_id": 18432688,
      "user_type": "registered",
      "user_id": 13427401,
      "link": "https://stackoverflow.com/users/13427401/rafay",
      "reputation": 92,
      "display_name": "Rafay"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/65363568/does-the-value-of-atomicreference-will-be-set-lazily-if-we-assign-a-function-to",
    "last_activity_date": 1608555694,
    "creation_date": 1608323592,
    "answer_count": 2,
    "title": "Does the value of AtomicReference will be set lazily if we assign a function to it which returns some array?",
    "body": "<p>I have this piece of code:</p>\n<pre><code>AtomicReference&lt;List&lt;String&gt;&gt; atomicStrings = new AtomicReference&lt;&gt;();\natomicStrings.set(someFunc());\nThread.sleep(10000);\nSystem.out.print(String.join(&quot;,&quot;, atomicStrings.get()); // will this print a,b,c ?\n</code></pre>\n<p>Where</p>\n<pre><code>private List&lt;String&gt; someFunc() {\n    List&lt;String&gt; list = new ArrayList&lt;&gt;();\n\n    new Thread(() -&gt; {\n      try {\n        list.add(&quot;a&quot;);\n        Thread.sleep(1000);\n        list.add(&quot;b&quot;);\n        Thread.sleep(1000);\n        list.add(&quot;c&quot;);\n        Thread.sleep(1000);\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }).start();\n\n    return list;\n}\n</code></pre>\n<p>Of course this is a very poor example but i tried to mimic my real test case here by adding delays. My question here is that since someFunc() returns the array right away and the array elements are populated in a different thread, but the result we get is stored in an AtomicReference and we don't get the value until later, the delay i am adding in the main function is more than the delay the new thread spawned will take. Will my returned array be populated will all the elements?</p>\n",
    "question_id": 65363568,
    "tags": [
      "java",
      "multithreading",
      "atomic",
      "atomicreference"
    ],
    "score": -1,
    "accepted_answer_id": 65363616,
    "is_answered": true,
    "view_count": 543
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/958fe700d57780eb1cc28b93796bbf69?s=256&d=identicon&r=PG&f=y&so-version=2",
      "account_id": 13521732,
      "user_type": "registered",
      "user_id": 9754736,
      "link": "https://stackoverflow.com/users/9754736/scroll",
      "reputation": 158,
      "display_name": "Scroll"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/65393125/why-does-completablefuture-sometimes-fall-into-try-block-skipping-action-code",
    "last_activity_date": 1608555564,
    "creation_date": 1608555123,
    "answer_count": 0,
    "title": "Why does CompletableFuture sometimes fall into try block skipping action code?",
    "body": "<p>I am new in JavaFX and I have a question about Services. I am trying to read data from a file and if after 5 seconds my task has not done I want to throw TimeOutException:</p>\n<pre><code>public Service&lt;Void&gt; readFile() {\n    return new Service&lt;Void&gt;() {\n        @Override\n        protected Task&lt;Void&gt; createTask() {\n            return new Task&lt;Void&gt;() {\n                @Override\n                protected Void call() throws Exception {\n                    CompletableFuture&lt;Void&gt; future = CompletableFuture.runAsync(() -&gt; {\n                        System.out.println(&quot;Trying to read data...&quot;);\n                        //read data though out a file;\n                    });\n                    try {\n                        future.get(5, TimeUnit.SECONDS);\n                    }catch (TimeoutException te) {\n                        System.out.println(&quot;TIMEOUT!&quot;);\n                        throw new TimeoutException();\n                    }\n                    return null;\n                }\n            };\n        }\n    };\n}\n</code></pre>\n<p>and go to onFailed method to restart the service and do it again and again until it won't be successful.\nThe method which starts my task does it after pressing the button. First starts the animation and if it is finished starts Task:</p>\n<pre><code>void readingFile(ActionEvent event) {\n    try {\n        Parent root = FXMLLoader.load(getClass().getResource(&quot;loading.fxml&quot;));\n        Scene scene = startBtn.getScene();\n\n        root.translateXProperty().set(scene.getWidth());\n        parent.getChildren().add(root);\n\n        Timeline timeline = new Timeline();\n        KeyValue keyValue = new KeyValue(root.translateXProperty(), 0 , Interpolator.EASE_IN);\n        KeyFrame keyFrame = new KeyFrame(Duration.millis(100), keyValue);\n        timeline.getKeyFrames().add(keyFrame);\n\n        timeline.setOnFinished(event1 -&gt; {\n            parent.getChildren().remove(container);\n            Label label = (Label) root.lookup(&quot;#label&quot;);\n            Service&lt;Void&gt; readTask = readFile();\n            label.textProperty().unbind();\n            label.textProperty().bind(readTask.messageProperty());\n            readTask.start();\n            readTask.setOnFailed(fail -&gt; {\n                System.out.println(&quot;Fail to read file! Retry...&quot;);\n                readTask.restart();\n            });\n            readTask.setOnSucceeded(success -&gt; {\n                System.out.println(&quot;Success&quot;);\n                new Thread(writeFile()).start();\n            });\n        });\n\n        timeline.play();\n\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n</code></pre>\n<p>but when my task is restarted, it skips read data code and falls to try block right away and all the time after 5 seconds throw TimeOutException. Why does it happen and how can I solve it? Thanks in advance.</p>\n",
    "question_id": 65393125,
    "tags": [
      "java",
      "multithreading",
      "javafx",
      "service",
      "task"
    ],
    "score": 2,
    "is_answered": false,
    "view_count": 128,
    "last_edit_date": 1608555564
  },
  {
    "owner": {
      "profile_image": "https://lh6.googleusercontent.com/-9Oq4xYfjb_s/AAAAAAAAAAI/AAAAAAAAAAA/AMZuuckBcBhc1Nx8LCzDot0Uj7PK1q4Dcg/photo.jpg?sz=256",
      "account_id": 19640045,
      "user_type": "registered",
      "user_id": 14376373,
      "link": "https://stackoverflow.com/users/14376373/%d0%94%d0%b0%d1%80%d1%8c%d1%8f-%d0%9a%d0%be%d1%81%d1%82%d1%8f%d0%ba%d0%be%d0%b2%d0%b0",
      "reputation": 1,
      "display_name": "Дарья Костякова"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/64163535/breaking-object-deadlock",
    "last_activity_date": 1601639187,
    "creation_date": 1601588212,
    "answer_count": 1,
    "title": "Breaking object deadlock",
    "body": "<p>Good evening! Dears, I apologize in advance for the bad text. English is not my native language. The problem is this: there is code and I even sort of figured out how the deadlock is implemented. But there is a problem how to get out of it.\nI was told to either synchronize the capture or invoke the threads sequentially.</p>\n<p>I tried as follows:</p>\n<ul>\n<li>I delete monitors from methods and created a static object in the class and threw it into the monitor, and if you call the threads, it will work, but if you call the threads into a loop, everything collapses.</li>\n<li>I also tried to rewrite the function so bower.bowBack (this) to this.bowBack (bower) so that 2 objects are not called from 1 thread, but it is still worth putting it into the loop and again we don’t have what we need.</li>\n</ul>\n<p>Tell me please how you can solve the problem?</p>\n<p>Update: I apologize for not being informative. I will improve.\nAccording to the assignment, you need 2 streams to be output:</p>\n<ul>\n<li>A: G shot me</li>\n<li>A: I shoot back</li>\n<li>G: And he shot me</li>\n</ul>\n<p>(stream 1)</p>\n<ul>\n<li>G: And he shot me</li>\n<li>G: I shoot back</li>\n<li>A: G shot me.</li>\n</ul>\n<p>(stream 2)</p>\n<p>And he does just that. But as soon as you put it into the cycle, it freezes. How to organize sequential work of threads? I don't understand how to implement it correctly.</p>\n<pre><code>package pr1;\n\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\n//package ru.philosophyit;\n\n\n\npublic class DeadLock {\n\n  static class Friend {\n    private final String name;\n    \n    private final Lock lock = new ReentrantLock();\n    \n    public Friend(String name) {\n      this.name = name;\n    }\n\n    public String getName() {\n      return name;\n    }\n    \n    public void bow(Friend bower) {\n        \n        boolean Lock_my = false;\n        boolean Lock_bower = false;\n        \n        try\n              {\n                \n                 while(!Lock_my || !Lock_bower)\n                 {\n                    Lock_my = this.lock.tryLock(100, TimeUnit.MILLISECONDS);\n                    Lock_bower = bower.lock.tryLock(100, TimeUnit.MILLISECONDS);\n\n                 }\n    \n                 System.out.format(&quot;%s: %s подстрелил меня!\\n&quot;, this.name, bower.getName());\n                 System.out.format(&quot;%s: стреляю в ответ!\\n&quot;, this.name);\n                         \n                 bower.bowBack(this);\n    \n                 this.lock.unlock();\n                 bower.lock.unlock();\n                }\n        catch(InterruptedException e)\n        {\n            e.printStackTrace();\n            }\n        }\n             \n    public void bowBack(Friend bower) {\n     \n        System.out.format(&quot;%s: %s подстрелил меня!\\n&quot;, this.name, bower.getName());\n    }\n  }\n  \n\n  /**\n   * Точка входа в программу\n   \n*\n   * @param args аргументы командной строки\n   */\n  \n  public static void main(String[] args) {\n    Friend alphonse = new Friend(&quot;Alphonse&quot;);\n    Friend gaston = new Friend(&quot;Gaston&quot;);\n    \n    for (int i = 0; i &lt; 5; i++)\n    {\n    new Thread(() -&gt; alphonse.bow(gaston)).start();\n           \n    new Thread(() -&gt; gaston.bow(alphonse)).start();\n    }\n  }\n    \n}\n</code></pre>\n<p>I also did synchronization on a static object and the loop worked, but the output is not sequential. ie instead of 1 stream and then 2 there can be 1 stream 1 stream 2 stream 2 stream 1 stream. I can't figure out why.</p>\n<pre><code>package pr1;\n\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\n//package ru.philosophyit;\n\n\n\npublic class DeadLock {\n\n  static Object o = new Object();\n    \n  static class Friend {\n    private final String name;\n    \n    \n    public Friend(String name) {\n      this.name = name;\n    }\n\n    public String getName() {\n      return name;\n    }\n    \n    public void bow(Friend bower) {\n        \n        //synchronized(getClass())\n        synchronized(o)\n        {   \n                 System.out.format(&quot;%s: %s подстрелил меня!\\n&quot;, this.name, bower.getName());\n                 System.out.format(&quot;%s: стреляю в ответ!\\n&quot;, this.name);\n                         \n                 bower.bowBack(this);\n    }\n    }\n             \n    public void bowBack(Friend bower) \n    {\n        //synchronized(getClass())\n        synchronized(o)\n        {\n        System.out.format(&quot;%s: %s подстрелил меня!\\n&quot;, this.name, bower.getName());\n    }\n    }\n  }\n  \n \n  public static void main(String[] args) {\n    Friend alphonse = new Friend(&quot;Alphonse&quot;);\n    Friend gaston = new Friend(&quot;Gaston&quot;);\n    \n  // for (int i = 0; i &lt; 10; i++)\n    {\n    new Thread(() -&gt; alphonse.bow(gaston)).start();\n           \n    new Thread(() -&gt; gaston.bow(alphonse)).start();\n    }\n  }\n    \n}\n</code></pre>\n<p>As it turned out 2, the code is quite suitable and it doesn't matter in what order the threads work, but the order of messages is important. But approach 2 is complicated by the fact that when the threads increase, we need a lot of synchronization objects. They said that you just need to change a couple of lines and everything will work. 3 code is the code of the task itself in its original form (so where you need to change the lines).\nI understand that 2 threads work with different objects and therefore synchronized does not work as it should (we are blocking on bowBack, maybe it is worth rewriting it?)</p>\n<pre><code>package pr1;\n\nimport java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\n//package ru.philosophyit;\n\npublic class DeadLock {\n\n  static Object o = new Object();\n  \n  static class Friend {\n    private final String name;\n    \n    \n    public Friend(String name) {\n      this.name = name;\n    }\n\n    public String getName() {\n      return name;\n    }\n    \n    public synchronized void bow(Friend bower) {\n        \n        {   \n                 System.out.format(&quot;%s: %s подстрелил меня!\\n&quot;, this.name, bower.getName());\n                 System.out.format(&quot;%s: стреляю в ответ!\\n&quot;, this.name);\n                         \n                 bower.bowBack(this);\n    }\n    }\n             \n    public synchronized void bowBack(Friend bower) \n    {\n            {\n        System.out.format(&quot;%s: %s подстрелил меня!\\n&quot;, this.name, bower.getName());\n    }\n    }\n  }\n  \n \n  public static void main(String[] args) {\n    Friend alphonse = new Friend(&quot;Alphonse&quot;);\n    Friend gaston = new Friend(&quot;Gaston&quot;);\n    \n   for (int i = 0; i &lt; 10; i++)\n    {\n    new Thread(() -&gt; alphonse.bow(gaston)).start();\n           \n    new Thread(() -&gt; gaston.bow(alphonse)).start();\n   \n    \n    }\n  }\n    \n}\n</code></pre>\n",
    "question_id": 64163535,
    "tags": [
      "java",
      "multithreading",
      "oop",
      "object",
      "deadlock"
    ],
    "score": 0,
    "is_answered": false,
    "view_count": 100,
    "last_edit_date": 1601639187
  },
  {
    "owner": {
      "profile_image": "https://i.stack.imgur.com/jhjWO.jpg?s=256&g=1",
      "account_id": 2463632,
      "user_type": "registered",
      "user_id": 2147204,
      "link": "https://stackoverflow.com/users/2147204/simon-kissane",
      "reputation": 4432,
      "display_name": "Simon Kissane",
      "accept_rate": 85
    },
    "content_license": "CC BY-SA 3.0",
    "link": "https://stackoverflow.com/questions/27737781/how-to-implement-round-robin-order-for-priorityblockingqueue",
    "last_activity_date": 1601563360,
    "creation_date": 1420176793,
    "answer_count": 4,
    "title": "How to implement round-robin order for PriorityBlockingQueue?",
    "body": "<p>I have a <code>PriorityBlockingQueue</code>. A single thread consumes one message at a time from this queue and processes it. Several further threads are inserting messages into the queue. The producer threads assign an integral priority to each message they submit. A static <code>AtomicLong</code> is used to assign every message a unique, monotonically incrementing ID. The <code>Comparator</code> of the queue orders messages by this priority first, and then equal priority messages are ordered by ID (lowest ID first.)</p>\n\n<p><strong>Problem:</strong> Sometimes one producer submits a large number of messages. This then starves the other producers of having their messages processed. What I'd like to do, is have the consumer round-robin between producers for equal priority messages (while still processing equal priority messages of a single producer in submission order). But I cannot work out how to write the <code>Comparator</code> to do this.</p>\n\n<p>Another alternative I considered is having a separate queue for each producer. However, I don't think that could work, since I'm not aware of any way for single thread to wait on multiple queues.</p>\n",
    "question_id": 27737781,
    "tags": [
      "java",
      "multithreading",
      "priority-queue",
      "java.util.concurrent",
      "round-robin"
    ],
    "score": 4,
    "accepted_answer_id": 27738182,
    "is_answered": true,
    "view_count": 2590
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/9b0def851c1fc8d0b28aa35e7cc8c3fa?s=256&d=identicon&r=PG&f=y&so-version=2",
      "account_id": 7927394,
      "user_type": "registered",
      "user_id": 5986438,
      "link": "https://stackoverflow.com/users/5986438/yanozai",
      "reputation": 143,
      "display_name": "yanozai",
      "accept_rate": 88
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/35881814/deleting-sent-messages-in-ui-thread",
    "last_activity_date": 1601559710,
    "creation_date": 1457490468,
    "answer_count": 1,
    "title": "Deleting sent messages in UI thread",
    "body": "<p>Let me elaborate a little bit more for example if I have this code:</p>\n<p>This object is created by the main UI thread:</p>\n<pre><code>Handler handler= new Handler();\n</code></pre>\n<p>Then I use:</p>\n<pre><code>handler.postDelayed(new Runnable(){\n}, 1000);\n</code></pre>\n<p>My question is, can I cancel that action so that if posted to the main thread's message queue?</p>\n",
    "question_id": 35881814,
    "tags": [
      "java",
      "android",
      "multithreading",
      "android-asynctask",
      "thread-safety"
    ],
    "score": 1,
    "accepted_answer_id": 35881920,
    "is_answered": true,
    "view_count": 81,
    "last_edit_date": 1601559710
  },
  {
    "owner": {
      "profile_image": "https://i.stack.imgur.com/dsBrw.jpg?s=256&g=1",
      "account_id": 4602502,
      "user_type": "registered",
      "user_id": 3865607,
      "link": "https://stackoverflow.com/users/3865607/bad-coder",
      "reputation": 886,
      "display_name": "Bad Coder",
      "accept_rate": 73
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/64150330/make-concurrent-request-upto-n-times",
    "last_activity_date": 1601535013,
    "creation_date": 1601534860,
    "answer_count": 0,
    "title": "Make Concurrent Request Upto N times",
    "body": "<p>I have <code>Q</code> Query which needs to be submitted to the DataSource, I want to execute each Queries <code>N</code> number of times with maximum concurrency <code>C</code>.</p>\n<p>Code which i wrote:</p>\n<pre><code> @Override\n    public void run() {\n    \n     try (Connection connection = DriverManager.getConnection(connectionUrl, properties)) {\n        \n       semaphore.acquireUninterruptibly();\n         try (PreparedStatement ps = connection.prepareStatement(SQL)) {\n                    ResultSet rs = ps.executeQuery()\n                   // Do Something\n         }finally {\n\n                    semaphore.release();\n         }\n     }\n}\n</code></pre>\n<p>My Main Method:</p>\n<pre><code>        Semaphore semaphore = new Semaphore(concurrency);\n\n        ExecutorService executorService = Executors.newFixedThreadPool(N);\n        for (int i = 0; i &lt; N; i++) {\n            executorService.submit(new QueryTester(semaphore,SQL));\n        }\n</code></pre>\n<p>Currently, I am executing Single Queries with <code>N</code> threads, if there are <code>Q</code> Queries available each need to executed <code>N</code> times how I can make changes to code?</p>\n<p>So I don't have run my method <code>Q</code> number of times for each available Queries</p>\n",
    "question_id": 64150330,
    "tags": [
      "java",
      "multithreading"
    ],
    "score": 1,
    "is_answered": false,
    "view_count": 39,
    "last_edit_date": 1601535013
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/16b7172bb346958c1b69e0229ba1ac4f?s=256&d=identicon&r=PG",
      "account_id": 1723085,
      "user_type": "registered",
      "user_id": 1578356,
      "link": "https://stackoverflow.com/users/1578356/newday",
      "reputation": 3842,
      "display_name": "newday",
      "accept_rate": 63
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/64112611/how-to-get-server-status-using-multi-threads-periodically",
    "last_activity_date": 1601527340,
    "creation_date": 1601351398,
    "answer_count": 1,
    "title": "How to get server status using multi-threads periodically",
    "body": "<p>The below code works fine and it connects to a given server (host, port) and gets the connection status.</p>\n<p>What it does is:</p>\n<ol>\n<li>PollService implements the Callable interface and connects to a server(host, port) then it returns the status.</li>\n<li>Since this should happen periodically, it iterates the Hashmap entries in a while(true) loop infinitely.</li>\n</ol>\n<p>The problem: On the server-side, I see it takes 2 or 3 seconds to reach the thread and if I use Runnable with periodic implementation it connects within 1 sec. Looks like iterating the Hashmap infinitely is a slow approach.</p>\n<p>However, I can not use Runnable as it doesn't return the status of the connection which I need later to use.</p>\n<p>Below is the ServiceMonitor class (client) which connects to the server.</p>\n<pre><code>package org.example;\n\nimport java.time.LocalDateTime;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.stream.Collectors;\n\npublic class ServicesMonitor {\n  private ExecutorService scheduledExecutorService = null;\n  private static Logger logger = Logger.getLogger(ServicesMonitor.class.getName());\n  private final Map&lt;ServiceType, List&lt;ClientMonitorService&gt;&gt; clientMonitorServicesMap = new HashMap&lt;&gt;();\n\n  public void registerInterest(ClientMonitorService clientMonitorService) {\n    clientMonitorServicesMap.computeIfAbsent(clientMonitorService.getServiceToMonitor().getServiceType(), v -&gt; new ArrayList&lt;&gt;()).add(clientMonitorService);\n  }\n\n  public Map&lt;ServiceType, List&lt;ClientMonitorService&gt;&gt; getClineMonitorService() {\n    return clientMonitorServicesMap;\n  }\n\n  public void poll(){\n    //Observable.interval(1, TimeUnit.SECONDS).st\n  }\n  public void pollServices() {\n    scheduledExecutorService = Executors.newFixedThreadPool(clientMonitorServicesMap.size());\n    try {\n\n      while (true) {\n        clientMonitorServicesMap.forEach((k, v) -&gt; {\n          Future&lt;Boolean&gt; val = scheduledExecutorService.submit(new PollService(k));\n          try {\n            boolean result = val.get();\n            System.out.println(&quot;service &quot; + k.getHost() + &quot;:&quot; + k.getPort() + &quot;status is &quot; + result);\n            if (result) {\n              List&lt;ClientMonitorService&gt; list = v.stream().filter(a -&gt; LocalDateTime.now().getSecond() % a.getServiceToMonitor().getFreqSec() == 0)\n                      .collect(Collectors.toList());\n              list.stream().forEach(a -&gt; System.out.println(a.getClientId()));\n            }\n\n          } catch (InterruptedException e) {\n            e.printStackTrace();\n          } catch (ExecutionException e) {\n            e.printStackTrace();\n          }\n\n        });\n      }\n    } catch (Exception e) {\n      logger.log(Level.SEVERE, e.getMessage());\n    } finally {\n      scheduledExecutorService.shutdown();\n    }\n  }\n}\n</code></pre>\n<ul>\n<li>How to improve the performance of this code by reducing the time it takes to connect to the server?</li>\n<li>How to improve this code?</li>\n</ul>\n",
    "question_id": 64112611,
    "tags": [
      "java",
      "multithreading",
      "server",
      "client",
      "callable"
    ],
    "score": 0,
    "accepted_answer_id": 64149186,
    "is_answered": true,
    "view_count": 215
  },
  {
    "owner": {
      "profile_image": "https://lh3.googleusercontent.com/-ASSuy8DNx_M/AAAAAAAAAAI/AAAAAAAAAFY/as99ZogPzR8/photo.jpg?sz=256",
      "account_id": 14766420,
      "user_type": "registered",
      "user_id": 10664313,
      "link": "https://stackoverflow.com/users/10664313/pourya-pourbagheri",
      "reputation": 11,
      "display_name": "Pourya Pourbagheri"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/64147000/how-to-process-an-image-bufferedimage-using-multithreading-in-java",
    "last_activity_date": 1601507720,
    "creation_date": 1601507720,
    "answer_count": 0,
    "title": "How to process an image (BufferedImage) using multithreading in java",
    "body": "<p>I'm trying to use multithreading to make a program faster.</p>\n<p>Right now the simple code is like this:</p>\n<pre><code>for (int y = 0; y &lt; dither.getHeight() - 1; y++) {\n        for (int x = 1; x &lt; dither.getWidth() - 1; x++) {\n\n            Color pixel = new Color(dither.getRGB(x, y));\n\n            int oldR = pixel.getRed();\n            int oldG = pixel.getGreen();\n            int oldB = pixel.getBlue();\n\n            int newR = findClosestPalleteColor(oldR, factor);\n            int newG = findClosestPalleteColor(oldG, factor);\n            int newB = findClosestPalleteColor(oldB, factor);\n\n            int errR = oldR - newR;\n            int errG = oldG - newG;\n            int errB = oldB - newB;\n\n            dither.setRGB(x, y, new Color(newR, newG, newB).getRGB());\n\n            try {\n                dither.setRGB(x + 1, y    , (quantize(new Color(dither.getRGB(x + 1, y    )), errR, errG, errB, 7)).getRGB());\n                dither.setRGB(x - 1, y + 1, (quantize(new Color(dither.getRGB(x - 1, y + 1)), errR, errG, errB, 3)).getRGB());\n                dither.setRGB(x    , y + 1, (quantize(new Color(dither.getRGB(x    , y + 1)), errR, errG, errB, 5)).getRGB());\n                dither.setRGB(x + 1, y + 1, (quantize(new Color(dither.getRGB(x + 1, y + 1)), errR, errG, errB, 1)).getRGB());\n            }catch (Exception e) {}\n\n        }\n    }\n</code></pre>\n<p>dither is a BufferedImage object.</p>\n<p>It's a dithering program, and it works fine until the image is big.\nWhat is the best way to divide this process to different threads?</p>\n<p>One thing I tried is to make sub images, process them and put them back together, but I don't know how to put them back together! So if this is a good idea, help me with that please.</p>\n",
    "question_id": 64147000,
    "tags": [
      "java",
      "multithreading",
      "image-processing"
    ],
    "score": 0,
    "is_answered": false,
    "view_count": 94
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/2024ec11c96392f88d503af55dcf6914?s=256&d=identicon&r=PG&f=y&so-version=2",
      "account_id": 19130937,
      "user_type": "registered",
      "user_id": 13972844,
      "link": "https://stackoverflow.com/users/13972844/hung-vu",
      "reputation": 483,
      "display_name": "Hung Vu"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/64001620/how-much-is-too-much-work-for-the-main-thread-to-handle-some-questions-regardin",
    "last_activity_date": 1601485944,
    "creation_date": 1600735589,
    "answer_count": 0,
    "title": "How much is too much work for the main thread to handle? Some questions regarding the threads in Android",
    "body": "<p>I have a background in Java and recently, I'm learning about Java in Android so the question might seem to be overwhelming for a newcomer like me. Anyway, here are the questions (in <em>italic</em>).</p>\n<p>I created a project using a template (Phone and Tablet - Empty Activity), then used Layout Editor to add 2 Plain Text to the GUI. After that, I added some code to <strong>MainActivity.java</strong> (there is nothing else in the class).</p>\n<pre><code>@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\n    EditText equation = findViewById(R.id.textEquation);\n    equation.setEnabled(false);\n\n    EditText result = findViewById(R.id.textResult);\n    result.setEnabled(false);\n\n}\n\npublic void onBtnClick(View theView){\n\n    EditText equation = findViewById(R.id.textEquation);\n    EditText result = findViewById(R.id.textResult);\n\n}\n</code></pre>\n<p>When I ran the program, I got this warning: <code>I/Choreographer: Skipped 31 frames!  The application may be doing too much work on its main thread.</code> As the answers shown in these links: <a href=\"https://stackoverflow.com/questions/14678593/the-application-may-be-doing-too-much-work-on-its-main-thread\">The application may be doing too much work on its main thread</a> and <a href=\"https://stackoverflow.com/questions/54625433/the-application-may-be-doing-too-much-work-on-its-main-thread-how-to-fixed-it\">The application may be doing too much work on its main thread. how to fixed it</a>. This might not be a real issue as I'm using an emulator and the code/resource are from a template, which might not be optimal.</p>\n<p><em>However, what exactly determines the term <strong>&quot;too much work&quot;</strong> here?</em> When I comment out the two lines in <code>onBtnClick</code>, the warning goes away. Although I'm using an emulator, <code>findViewById()</code> is considerably &quot;heavy&quot; enough to generate the warning. <strong>I know <a href=\"https://developer.android.com/topic/performance/vitals/render\" rel=\"nofollow noreferrer\">60 fps (16ms per frame)</a> is the standard, but it still does not answer my question.</strong></p>\n<p><s>Besides, can someone simplify the main thread/method doing right now (in my case)? I'm aware that the <code>main</code> class/thread in Android is different than in regular Java programming (as answered <a href=\"https://stackoverflow.com/questions/9293329/where-is-main-in-android#:%7E:text=In%20the%20case%20of%20Android,of%20a%20main()%20method.\">here</a>).</s></p>\n<p><em>Concept wise, is the main threads completely different than threads for UI (like using <code>invokeLater</code> in Java Swing)?</em> I guess it is, as the Google document suggests <a href=\"https://developer.android.com/guide/components/processes-and-threads\" rel=\"nofollow noreferrer\">&quot;As such, the main thread is also sometimes called the UI thread. However, under special circumstances, an app's main thread might not be its UI thread; for more information, see Thread annotations.&quot;</a></p>\n<hr />\n<p><strong>Update</strong></p>\n<ul>\n<li>(09/30) For the question that I striked through, now that I've read more about <a href=\"https://developer.android.com/guide/components/activities/activity-lifecycle\" rel=\"nofollow noreferrer\">Activity life cycle</a>, I start to have a sense of what's going underneath. <strong>However, I'm still finding answers for the two italic question.</strong></li>\n</ul>\n",
    "question_id": 64001620,
    "tags": [
      "java",
      "android",
      "multithreading",
      "performance",
      "android-threading"
    ],
    "score": 0,
    "is_answered": false,
    "view_count": 132,
    "last_edit_date": 1601485944
  },
  {
    "owner": {
      "profile_image": "https://lh3.googleusercontent.com/a-/AOh14Gg94fhXD4hIQm6mzBbi8SKrpzgC6y5pJP9D3Aje=k-s256",
      "account_id": 19077586,
      "user_type": "registered",
      "user_id": 13930539,
      "link": "https://stackoverflow.com/users/13930539/navonil-ghosh",
      "reputation": 11,
      "display_name": "Navonil Ghosh"
    },
    "closed_date": 1601483748,
    "link": "https://stackoverflow.com/questions/64141492/how-to-notify-parent-thread-if-child-thread-throws-an-exception",
    "last_activity_date": 1601482784,
    "creation_date": 1601481953,
    "answer_count": 1,
    "title": "How to notify parent thread if child thread throws an exception?",
    "body": "<p>I am new to multi-threading. Recently in an interview I was asked this question.\n<strong>&quot;How to notify parent thread if child thread throw an exception?&quot;</strong>\nI assume parent thread refers to Main Thread.\nIt will be helpful anyone explain this to me through a simple java program?</p>\n",
    "question_id": 64141492,
    "tags": [
      "java",
      "multithreading"
    ],
    "score": -1,
    "closed_reason": "Duplicate",
    "is_answered": false,
    "view_count": 329,
    "last_edit_date": 1601482784
  },
  {
    "owner": {
      "user_type": "does_not_exist",
      "display_name": "user11473537"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/64140757/multiplying-matrices-by-threads-in-java",
    "last_activity_date": 1601481197,
    "creation_date": 1601479279,
    "answer_count": 1,
    "title": "Multiplying matrices by threads in java",
    "body": "<p>Currently I am creating a program that multiplies two matrices by using threads.  This is a critical part of my learning of Java that I can't seem to figure out, so I'd really appreciate some assistance.</p>\n<pre><code>package matrix;\n\nimport java.util.Random;\n\n\nclass ColumnCalculator implements Runnable {\n\n    Matrix m1;\n    Matrix m2;\n    Matrix result;\n    int col_idx; //specify which column of the result is going to be calculated\n\n    ColumnCalculator(Matrix m_1, Matrix m_2, Matrix r, int col) {\n        m1 = m_1;\n        m2 = m_2;\n        result = r;\n        col_idx = col;\n    }\n\n    @Override\n    public void run() {\n        // TODO Auto-generated method stub\n        //Implementation here...\n        //calculating all the elements in the column of index (specified by &quot;col_idx&quot;) of the result matrix\n    }\n\n}\n\npublic class Matrix {\n\n    int rows; // Define the number of rows\n    int cols; // Define the number of columns\n    double values[][];\n\n    Random rand = new Random();\n\n    /*First constructor: with row and column as the input that creates a matrix with the specified size and \n     * assign each elements with randomly generated number*/\n    Matrix(int r, int c) {\n        rows = r;\n        cols = c;\n        values = new double[r][c];\n\n        for (int y = 0; y &lt; rows; y++) {\n            for (int x = 0; x &lt; cols; x++) {\n                values[y][x] = rand.nextDouble() * 10.0; //generating a double number between 0 and 10\n            }\n        }\n\n    }\n\n    /*First constructor: with row, column, and a 2D array as the input. Similar to the first constructor\n     * above, but instead of randomly generating, it assigns the elements with the third argument double 2D array.  */\n    Matrix(int r, int c, double v[][]) {\n        //Implementation here...\n        int x;\n        int y;\n        rows = r;\n        cols = c;\n        values = v;\n        int row_array = v.length;\n        int cols_array = v[0].length;\n        values = new double[r][c];\n        \n        if (row_array &gt;= rows &amp;&amp; cols_array &gt;= cols)\n        {\n            \n        \n        for (int temp_y = 0; temp_y &lt; rows; temp_y++) \n        {\n            for (int temp_x = 0; temp_x &lt; cols; temp_x++) \n            {\n                values[temp_y][temp_x] = v[temp_y][temp_x];\n            }\n        }\n        } else {\n            for (int temp_y = 0; temp_y &lt; rows; temp_y++) {\n                for (int temp_x = 0; temp_x &lt; cols; temp_x++){\n                    if (row_array &gt;= temp_y || cols_array &gt;= temp_x){\n                      values[temp_y][temp_x] = v[temp_x][temp_y];  \n                    } else {\n                        values[temp_y][temp_x] = 0;\n                    }\n                        \n                    \n                }\n            }\n        }\n    }\n\n    /*Output the matrix to the console*/\n    void print() {\n        for (int y = 0; y &lt; rows; y++) {\n            for (int x = 0; x &lt; cols; x++) {\n                System.out.print(values[y][x] + &quot;, &quot;);\n            }\n            System.out.println();\n        }\n    }\n\n    /*Matrix product without thread: let the current matrix times the input argument matrix m\n     * and return the result matrix\n     * Below the multiplication is done and the a dimension check is performed\n    Matrix multiplyBy(Matrix m) {\n        \n       \n        \n        \n\n        Matrix result = new Matrix(rows, m.cols); //Initialize the result matrix\n       if(rows != m.cols){\n           System.out.println(&quot;Matrices cannot do multiplication!&quot;);\n           result = null;\n       }else{\n        for (int y = 0; y &lt; result.rows; y++) {\n            for (int x = 0; x &lt; result.cols; x++) {\n                result.values[y][x] = 0; //the yth row of current matrix x the xth column of m\n                for (int i = 0; i &lt; cols; i++) {\n                    result.values[y][x] += values[y][i] * m.values[i][x];\n                }\n\n//              A        *         B         = result\n//             [5, 3            [1, 2, 3        [? ? (y = 0, x = 1) ?\n//              2, 0]            4, 5, 6]        ? ?                ?]\n            }\n        }\n       }\n        return result;\n       \n    }\n\n    /*Implementation: instead using loops above to calculate each elements, \n     * here you will use threads to accomplish the matrix product task.\n     * Similar to the &quot;multiplyBy()&quot; above, the input matrix m represents\n     * the second matrix that you will use the current matrix to times. The\n     * returned Matrix will be the product result matrix.  \n     * The code below is just an example of what I'm thinking, but it is not complete\n     * I need to create multiple threads to do the multiplication with each thread\n     * computing one column within the result matrix*/\n    Matrix multiplyByThreads(Matrix m) {\n        //Implementation here...\n\n        Matrix result = null;\n\n        Thread thread = new Thread(new ColumnCalculator(this, m, result, 5));\n\n        return result;\n    }\n\n    /* The main function for evaluation purpose*/\n    public static void main(String[] args) {\n        Matrix m1 = new Matrix(250, 150);\n\n        Matrix m2 = new Matrix(150, 200);\n\n        System.out.println(&quot;Begin matrix product&quot;);\n\n        Matrix result = m1.multiplyBy(m2);\n\n        System.out.println(&quot;Ending matrix product&quot;);\n\n        //Implementation here...\n        //I can test my multiplyByThreads() in both accuracy and time performance\n    }\n}\n</code></pre>\n<p>As seen, I've already created multiple functions to both define the matrices and check if they can be multiplied.  However, I am fairly lost when it comes to filling out the multiplybyThreads function.  I'm thinking that it should multiply the second matrix m and return the result matrix by using threads.  Also, I've already defined a run() function in the ColumnCalculator to use.  I'm also thinking that I should allocate 10 threads at a time, then wait for all 10 threads to complete to then initiate the next 10 threads.  I've also found that the thread.join() function may be useful for the waiting scheme. After all of this, like I said, I'm fairly lost so some help creating this function would be amazing.</p>\n",
    "question_id": 64140757,
    "tags": [
      "java",
      "multithreading",
      "matrix"
    ],
    "score": 0,
    "is_answered": false,
    "view_count": 157
  },
  {
    "owner": {
      "profile_image": "https://www.gravatar.com/avatar/d401b677f03e93a3766597a08ef9e098?s=256&d=identicon&r=PG&f=y&so-version=2",
      "account_id": 19098043,
      "user_type": "registered",
      "user_id": 13946904,
      "link": "https://stackoverflow.com/users/13946904/jeb",
      "reputation": 447,
      "display_name": "Jeb"
    },
    "content_license": "CC BY-SA 4.0",
    "link": "https://stackoverflow.com/questions/64134839/how-to-call-a-method-with-multiple-threads",
    "last_activity_date": 1601465970,
    "creation_date": 1601458775,
    "answer_count": 2,
    "title": "how to call a method with multiple threads",
    "body": "<p>I have a method <code>sendMail(list)</code>. This method will send the mails to the recipients which are there in the list.</p>\n<pre><code>public void sendMail(List&lt;DTO&gt; dto) {\n\n\n        for(DTO individualObject: dto) {\n            \n            bulkMailSender.sendSimpleMessage(individualObject.getEmail(),masterDetails.getMailSubject() , content, masterDetails.getMailFrom(), individualObject); \n            try {\n                TimeUnit.MINUTES.sleep(Long.parseLong(individualObject.getTimegap().trim()));\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n    }\n\n}\n</code></pre>\n<p>I have this kind of method. I want to run this method Thread based, when one thread is executing the mails, I should allow the other thread to access <code>sendMail</code> and send simultaneously together. Each and every <code>individualObject</code> contains it's own sleep time.</p>\n<p>How can I make it worked with the multiple threads.</p>\n<p>Let's take an example</p>\n<pre><code>import java.util.concurrent.TimeUnit;\n\npublic class SleepClass {\n    public static void main(String[] args) {\n        SleepClass s= new SleepClass();\n        s.m1(10000);\n        s.m1(20000);\n        \n        \n    }\n    \n    public void m1(int time) {\n        \n        for(int i = 0; i&lt; 3; i++) {\n            System.out.println(i);\n            try {\n                Thread.sleep(time);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        \n    }\n\n}\n</code></pre>\n<p>In the above example I have a regular method and it is executing one by one. How can make it simultaneous execution</p>\n",
    "question_id": 64134839,
    "tags": [
      "java",
      "multithreading"
    ],
    "score": 0,
    "accepted_answer_id": 64136807,
    "is_answered": true,
    "view_count": 331,
    "last_edit_date": 1601461019
  }
]