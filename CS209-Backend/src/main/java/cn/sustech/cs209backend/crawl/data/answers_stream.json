[{"owner":{"profile_image":"https://i.stack.imgur.com/KzMc4.jpg?s=256&g=1","account_id":320962,"user_type":"registered","user_id":639520,"link":"https://stackoverflow.com/users/639520/e-riz","reputation":31681,"display_name":"E-Riz","accept_rate":72},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":true,"last_activity_date":1660667395,"creation_date":1660667395,"body":"<p>You can eliminate the unchecked cast by declaring the interface itself with a type parameter (instead of the method). Like this:</p>\n<pre class=\"lang-java prettyprint-override\"><code>interface Service&lt;T&gt; {\n    List&lt;T&gt; list(String location, String type );\n}\n\nclass LocalService implements Service&lt;MyConcreteClass&gt; {\n    @Override\n    public List&lt;MyConcreteClass&gt; list(String location, String type ) {\n        // Some logic to retrieve, alter and return a list\n        return null;\n    }\n}\n\nclass StringService implements Service&lt;String&gt; {\n    @Override\n    public List&lt;String&gt; list(String location, String type) {\n        // TODO Auto-generated method stub\n        return null;\n    }\n}\n\nclass MyConcreteClass {\n    /// ...\n}\n</code></pre>\n<p>(I changed a couple of things to make it compile, not relevant to the answer).</p>\n","answer_id":73377291,"question_id":73376182},{"owner":{"profile_image":"https://www.gravatar.com/avatar/d99204bcce923f40f5c72b7f80121644?s=256&d=identicon&r=PG","account_id":2139538,"user_type":"registered","user_id":1898563,"link":"https://stackoverflow.com/users/1898563/michael","reputation":42521,"display_name":"Michael","accept_rate":78},"content_license":"CC BY-SA 4.0","score":2,"is_accepted":true,"last_activity_date":1660579652,"creation_date":1660579652,"body":"<p>Isn't your problem just here?</p>\n<pre><code>public &lt;T extends specialComparable&lt;T&gt;&gt; userClass(List&lt;specialComparable&lt;T&gt;&gt; comparables) {\n</code></pre>\n<p>You have a <code>List&lt;specialComparable&lt;specialComparable&lt;?&gt;&gt;&gt;</code>. That double nesting is presumably not the intention.</p>\n<p>Your signature should just be</p>\n<pre><code>public &lt;T extends specialComparable&lt;T&gt;&gt; userClass(List&lt;T&gt; comparables) {\n</code></pre>\n<p>FWIW, this interface seems useless since it adds no methods to the regular <code>Comparable</code>. The method is also fairly redundant. You can simply call this on any list of <code>Comparable</code>s.</p>\n<pre><code>listOfComparables.sort(Comparator.naturalOrder());\n</code></pre>\n","answer_id":73363594,"question_id":73363223,"community_owned_date":1660579652},{"owner":{"profile_image":"https://www.gravatar.com/avatar/f8c60eb5f46783d753e86238a9c18cd9?s=256&d=identicon&r=PG","account_id":265649,"user_type":"registered","user_id":552759,"link":"https://stackoverflow.com/users/552759/jtahlborn","reputation":53086,"display_name":"jtahlborn"},"content_license":"CC BY-SA 4.0","score":15,"is_accepted":true,"last_activity_date":1660410228,"creation_date":1425776992,"body":"<p>Others have described the problem, here is the solution with cleaner test:</p>\n<pre><code>if (type.isInstance(next)) {\n    return type.cast(next);\n}\n</code></pre>\n","answer_id":28921986,"question_id":28921833,"last_edit_date":1660410228},{"owner":{"profile_image":"https://i.stack.imgur.com/BBLLR.jpg?s=256&g=1","account_id":268201,"user_type":"registered","user_id":1573368,"link":"https://stackoverflow.com/users/1573368/sheel-prabhakar","reputation":419,"display_name":"Sheel Prabhakar"},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":true,"last_activity_date":1660408185,"creation_date":1660393641,"body":"<p><code>&lt;T extends BaseCommand&gt;</code> means at the calling side Type T <em>can</em> be BaseCommand OR derived from BaseCommand class/interface.</p>\n<p><code>Class&lt;T&gt;</code> type means the first argument should be the type of Class T.</p>\n<pre><code>class Command extends BaseCommand{ \n}\n</code></pre>\n<p>then you can call like this</p>\n<pre><code>registerHandle( Command.class, ...);\n</code></pre>\n<p>So that inside implementation one can create instance of Type Command.</p>\n","answer_id":73344263,"question_id":73344126,"last_edit_date":1660408185},{"owner":{"profile_image":"https://www.gravatar.com/avatar/b13bedc5215730fbce5edff6c130988a?s=256&d=identicon&r=PG","account_id":401843,"user_type":"registered","user_id":768644,"link":"https://stackoverflow.com/users/768644/rzwitserloot","reputation":89873,"display_name":"rzwitserloot"},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":false,"last_activity_date":1660277009,"creation_date":1660277009,"body":"<p>The warning is unavoidable. Isolate it in a helper method and toss the appropriate <code>@SuppressWarnings</code> at it. Or, refactor how this thing works. In general, the generics of <code>Class&lt;?&gt;</code> are weird and don't work well; if you try to write code that relies on the generics part to make it work, it's likely to result in many situations where you can't avoid these warnings, and the API is suboptimal.<sup>1</sup></p>\n<p>One tricky way to do what you're trying to do here in a one-size-fits-all way is so-called Super Type Tokens. You can search the web for this concept, because for what you're specifically doing here, STTs are overkill. What you are looking for, is a <em>supplier</em>.</p>\n<p>You want the caller not to pass you the type of a set. No. You want the caller to pass you a piece of code that, if executed, creates the set.</p>\n<p>While we're at it, let's get rid of the array, you're shifting the elements through that array for absolutely no sensible reason.</p>\n<pre><code>public &lt;S extends Set&lt;String&gt;&gt; S decodeStringSet(String key, @Nullable Set&lt;String&gt; defaultValue, Supplier&lt;S&gt; setMaker) {\n    Set&lt;String&gt; result = sp.getStringSet(key, defaultValue);\n    if(result == null) return defaultValue;\n\n    S a = setMaker.get();\n    a.addAll(result);\n    return a;\n}\n</code></pre>\n<p>This code can be used as follows:</p>\n<pre><code>LinkedHashSet&lt;String&gt; mySet = decodeStringSet(&quot;myKey&quot;, null, LinkedHashSet::new);\n</code></pre>\n<p>Perhaps you're unfamiliar with this syntax. <code>new LinkedHashSet()</code> will, when you run that code, create a LinkedHashSet. In contrast, <code>LinkedHashSet::new</code> will, when you run that code, produce an object that can be asked to create a LinkedHashSet, by invoking its <code>get()</code> method. One does the act right this very moment. The other wraps 'do the act' into a little machine. You can hand the machine to other code, or press the button on the machine to make it do the act, and you can press the button as often as you feel like.</p>\n<hr />\n<p>[1] Need some more explanations as to why relying on the generics of <code>j.l.Class</code> is awkward and not a good idea?</p>\n<p>A class object simply <strong>cannot</strong>, itself, represent generics, whereas generics can represent generics. That is: <code>List&lt;List&lt;String&gt;&gt;</code> is perfectly fine. However, <code>Class&lt;List&lt;String&gt;&gt;</code> does not make sense. You can write it, (j.l.Class does not have hardcoded rules to keep sanity alive in the langspec), but it doesn't represent anything: There's just one class object that represents the type <code>j.u.List</code>. This one object cannot therefore represent the generics; you can't have one class object representing <code>List&lt;String&gt;</code> and another representing <code>List&lt;Integer&gt;</code>. Less important, but still annoying - there are things class objects can represent that generics cannot. <code>int.class</code> is types as <code>Class&lt;Integer&gt;</code> but this isn't quite right.</p>\n<p>Hence, in your example, the compiler consider <code>Class&lt;? extends Set&gt;</code> as problematic; it's got a raw type <em>inside</em> the generics. However, it is technically correct, in that it is not possible to represent e.g. a <code>Set&lt;T&gt;</code>, merely 'a Set, whose generics are unknown, given that j.l.Class objects cannot represent them'.</p>\n<p>Lastly, classes basically only produce (the P in PECS - which explains what the difference is between <code>&lt;Number&gt;</code>, <code>&lt;? extends Number&gt;</code>, and <code>&lt;? super Number&gt;</code>); it is mentally difficult to fathom the difference between <code>Class&lt;? extends String&gt;</code> and <code>Class&lt;String&gt;</code>, because it's an irrelevant difference, given that j.l.Class only produces. And yet, often you really do need to write <code>Class&lt;? extends String&gt;</code> because if you don't, the compiler refuses to compile your code for imaginary, irrelevant reasons. That's because, again, j.l.Class is not hardcoded in the lang spec: The compiler does not <em>know</em> that there is no effective distinction between <code>Class&lt;T&gt;</code> and <code>Class&lt;? extends T&gt;</code>, and java does not have a way to mark off a given generics param as forced Produces-only or some such.</p>\n","answer_id":73329135,"question_id":73328558},{"owner":{"profile_image":"https://lh3.googleusercontent.com/a-/AOh14GjMpYukQ5aYVFfZyOxY8TIuB55KTzeCeZdLaaK5Ag=k-s256","account_id":23667337,"user_type":"registered","user_id":17694626,"link":"https://stackoverflow.com/users/17694626/cheng-thao","reputation":1467,"display_name":"Cheng Thao"},"content_license":"CC BY-SA 4.0","score":2,"is_accepted":false,"last_activity_date":1660230348,"creation_date":1660230348,"body":"<p>Your sub interface inherits the method <code>assign</code> from <code>Assigner</code>.  All you need to do in the sub interface is pass the types to the super interface.</p>\n<pre><code>interface Assigner&lt;S, T&gt; { S assign(T type);}\ninterface PlayerAssigner&lt;S&gt; extends Assigner&lt;S,Player&gt; {}\ninterface ManagerAssigner&lt;S&gt; extends Assigner&lt;S,Manager&gt; {}\ninterface CityBasedAssigner&lt;T&gt; extends Assigner&lt;City,T&gt; {}\n</code></pre>\n","answer_id":73322961,"question_id":73319233},{"owner":{"profile_image":"https://i.stack.imgur.com/v58O6.jpg?s=256&g=1","account_id":4181375,"user_type":"registered","user_id":3426309,"link":"https://stackoverflow.com/users/3426309/andrey-b-panfilov","reputation":5121,"display_name":"Andrey B. Panfilov"},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":true,"last_activity_date":1660176633,"creation_date":1660176633,"body":"<p>If I properly understood requirements...</p>\n<pre class=\"lang-java prettyprint-override\"><code>@FunctionalInterface\ninterface MapFilter {\n\n    &lt;T&gt; Map&lt;String, T&gt; filter(Map&lt;String, T&gt; map);\n\n}\n\npublic void setNewMapAttribute(MapFilter mapConsumer) {\n    this.setIdToRatings(mapConsumer.filter(this.getIdToRatings()));\n    this.setIdToNames(mapConsumer.filter(this.getIdToNames()));\n}\n</code></pre>\n","answer_id":73313972,"question_id":73313839},{"owner":{"profile_image":"https://i.stack.imgur.com/1bP9c.png?s=256&g=1","account_id":2538731,"user_type":"registered","user_id":2205089,"link":"https://stackoverflow.com/users/2205089/alin-gabriel-arhip","reputation":2578,"display_name":"Alin Gabriel Arhip"},"content_license":"CC BY-SA 4.0","score":3,"is_accepted":true,"last_activity_date":1660148049,"creation_date":1660147026,"body":"<p>peterz detailed exactly what happens under the hood.</p>\n<p>Sounds like what you need is an explicit conversion from the primitive <code>double</code> Java predicate (<code>java.util.function.DoublePredicate</code>) to the <code>scala.Double</code> Scala predicate (<code>Double =&gt; Boolean</code>).</p>\n<p>Scala actually offers one such conversion called <code>FromJavaDoublePredicate</code>.\nThe code does not require explicit <code>Double</code> cast anymore:</p>\n<pre><code>  /* some scala file */\n  def hasCompleteness(\n      x: Double,\n      f: Double =&gt; Boolean\n  ): Unit = println(f(x))\n\n  /* some java file */\n  public static FromJavaDoublePredicate atLeast(double thresholdPercentage) {\n      return new scala.compat.java8.functionConverterImpls.FromJavaDoublePredicate(\n        actualPercentage -&gt; actualPercentage &gt;= thresholdPercentage);\n  }\n\n  FromJavaDoublePredicate f = atLeast(3.0);\n  Test.hasCompleteness(5, f);  // true\n</code></pre>\n<p>PS. From what I saw, you chose <a href=\"https://github.com/scala/scala-java8-compat\" rel=\"nofollow noreferrer\">scala-java8-compat</a>, so I assumed you use an earlier version of Scala. Their maintainers state:</p>\n<blockquote>\n<p>If you are using Scala 2.13 or newer only, then don't use this\nlibrary! Use the classes under <code>scala.jdk</code> instead; they were added to\nthe standard library in 2.13.</p>\n</blockquote>\n<p>So for Scala 2.13.x I recommend using the <a href=\"https://www.scala-lang.org/api/2.13.8/scala/jdk/FunctionWrappers$$FromJavaDoublePredicate.html\" rel=\"nofollow noreferrer\">FromJavaDoublePredicate</a> case class in the <code>FunctionWrappers</code> object instead.</p>\n","answer_id":73309330,"question_id":73298883,"last_edit_date":1660148049},{"owner":{"profile_image":"https://www.gravatar.com/avatar/80ae1a555585070d3fba444b79e350e2?s=256&d=identicon&r=PG","account_id":19896468,"user_type":"registered","user_id":14577465,"link":"https://stackoverflow.com/users/14577465/liunix","reputation":11,"display_name":"liunix"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1660117318,"creation_date":1660117318,"body":"<p>what abt this</p>\n<pre><code>import java.util.function.BinaryOperator;\npublic class GenericArithmetic {\n\n    public static &lt;T extends Number&gt; BinaryOperator&lt;T&gt; get_multiplier(T t1){\n        BinaryOperator&lt;Integer&gt; intMultiper = (i1, i2) -&gt; i1 * i2;\n        BinaryOperator&lt;Float&gt; floatMultiper = (i1, i2) -&gt; i1 * i2;\n\n        // should cache\n        switch (t1.getClass().getName()) {\n            case &quot;java.lang.Integer&quot;:\n                return (BinaryOperator&lt;T&gt;) intMultiper;\n            case &quot;java.lang.Float&quot;:\n                return (BinaryOperator&lt;T&gt;) floatMultiper;\n            default:\n                return null;\n        }\n    }\n\n    public static &lt;T extends Number&gt; Number multiply(T x, T y) throws Exception{\n        var multiplier = get_multiplier(x);\n        var res = multiplier.apply(x, y);\n        return res;\n    }\n\n\n    public static void main(String[] args) throws Exception{\n        var a1 = 3;\n        var a2 = 5;\n\n        var res = multiply(a1, a2);\n        System.out.println(res);\n\n        var b1 = 2.0f;\n        var b2 = 3.0f;\n        var res2 = multiply(b1,b2);\n        System.out.println(res2);   \n    }\n}\n\n</code></pre>\n","answer_id":73302497,"question_id":20819824},{"owner":{"profile_image":"https://i.stack.imgur.com/W3DFb.jpg?s=256&g=1","account_id":23020603,"user_type":"registered","user_id":17141716,"link":"https://stackoverflow.com/users/17141716/peterz","reputation":341,"display_name":"peterz"},"content_license":"CC BY-SA 4.0","score":3,"is_accepted":false,"last_activity_date":1660115038,"creation_date":1660115038,"body":"<p>That seems how Scala compiler translates &quot;primitive&quot; Scala types (remember, <code>Double</code> here is <code>scala.Double</code> and not <code>java.lang.Double</code>). E.g. Scala declarations</p>\n<pre><code>  var d: Double =&gt; Boolean;\n  var s: String =&gt; String;\n</code></pre>\n<p>produce (as shown by javap):</p>\n<pre><code>  public abstract scala.Function1&lt;java.lang.Object, java.lang.Object&gt; d();\n  public abstract scala.Function1&lt;java.lang.String, java.lang.String&gt; s();\n</code></pre>\n<p>Note how <code>Double</code> and <code>Boolean</code> both translate to <code>Object</code>, but <code>String</code> is preserved</p>\n","answer_id":73301988,"question_id":73298883},{"owner":{"profile_image":"https://graph.facebook.com/10210973455051695/picture?type=large","account_id":15988209,"user_type":"registered","user_id":11538031,"link":"https://stackoverflow.com/users/11538031/%d0%95%d0%bc%d0%b8%d0%bb%d0%b8%d1%8f%d0%bd-%d0%99%d0%be%d1%80%d0%b4%d0%b0%d0%bd%d0%be%d0%b2","reputation":150,"display_name":"Емилиян Йорданов"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1660111090,"creation_date":1660111090,"body":"<p>Because your interface is defined as <code>T extends AbstractPoiSearchData</code>,\nThen <code>List&lt;PoiSearchDataProvider&lt;AbstractPoiSearchData&gt;&gt;</code> it is declared as single <code>AbstractPoiSearchData</code> which doesn't extend itself.</p>\n<p>I think that in your case :</p>\n<pre><code>public interface PoiSearchDataProvider&lt;AbstractPoiSearchData&gt; {\n\n    AbstractPoiSearchData fetch(PoiSearchRequest poiSearchRequest) throws Exception;\n\n}\n</code></pre>\n<p>Will be enough and you can use magic of the polymorphism</p>\n","answer_id":73301283,"question_id":73300740},{"owner":{"profile_image":"https://i.stack.imgur.com/dVLIh.jpg?s=256&g=1","account_id":5281408,"user_type":"registered","user_id":4216641,"link":"https://stackoverflow.com/users/4216641/turing85","reputation":18797,"display_name":"Turing85"},"content_license":"CC BY-SA 4.0","score":4,"is_accepted":true,"last_activity_date":1641583272,"creation_date":1641580019,"body":"<h2>Problem</h2>\n<p>In the code presented, we declare:</p>\n<pre><code>HashMap&lt;Integer, String&gt; map = new HashMap&lt;&gt;();\n</code></pre>\n<p>and</p>\n<pre><code>public static &lt;K,V&gt; Map&lt;K,V&gt; fillMap(Map&lt;K,V&gt; map, K[] keys, V[] values)\n</code></pre>\n<p>Hence, if we call</p>\n<pre><code>map = MyUtil.fillMap(map, keys, values);\n</code></pre>\n<p>we try to assing a <code>Map&lt;...&gt;</code> (returned by <code>MyUtil::fillMap</code>) to a <code>HashMap&lt;...&gt;</code>. This cannot work since a <code>Map</code> is not a <code>HashMap</code>.</p>\n<hr />\n<h2>Possible solutions</h2>\n<p>There are two ways that come to my mind to fix this issue:</p>\n<ol>\n<li>either change the type of <code>map</code>,</li>\n<li>or make the return-type of <code>MyUtil::fillMap</code> generic.</li>\n</ol>\n<h3>1. change the type of <code>map</code>:</h3>\n<p>We can change the type of <code>map</code> from <code>HashMap&lt;...&gt;</code> to <code>Map&lt;...&gt;</code>:</p>\n<pre><code>Map&lt;Integer, String&gt; map = new HashMap&lt;&gt;();\n...\nmap = MyUtil.fillMap(map, keys, values);\n</code></pre>\n<p><a href=\"https://ideone.com/Etxw9r\" rel=\"nofollow noreferrer\"><kbd>Ideone demo</kbd></a></p>\n<h3>2. Make the return-type of <code>MyUtil::fillMap</code> generic:</h3>\n<p>By adding an additional generic parameter, we can make the concrete implementation of the return type generic as well:</p>\n<pre><code>public static void main(String[] args) {\n  HashMap&lt;Integer, String&gt; map = new HashMap&lt;&gt;();\n  final Integer[] keys = IntStream.range(0, 12).boxed().toArray(Integer[]::new);\n  final String[] values = new String[] {&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;Mai&quot;, &quot;Jun&quot;,\n      &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Okt&quot;, &quot;Nov&quot;, &quot;Dez&quot;};\n  map = MyUtil.fillMap(map, keys, values);\n  System.out.println(map);\n}\n\npublic static &lt;K, V, M extends Map&lt;K, V&gt;&gt; M fillMap(M map, K[] keys, V[] values) {\n  final int l = keys.length;\n  for (int i = 0; i &lt; l; i++) {\n    map.put(keys[i], values[i]);\n  }\n  return map;\n}\n</code></pre>\n<p><a href=\"https://ideone.com/ILKQQy\" rel=\"nofollow noreferrer\"><kbd>Ideone demo</kbd></a></p>\n<hr />\n<h3>Bonus: state-free construction of the return-value</h3>\n<p>If it is not necessary to pass-in the concrete implementation of the map used to the method, I would propose a third option that creates the map to return within the method:</p>\n<pre><code>public static &lt;K, V&gt; Map&lt;K, V&gt; fillMap(K[] keys, V[] values) {\n  return IntStream.range(0, keys.length)\n      .boxed()\n      .collect(Collectors.toMap(\n          index -&gt; keys[index],\n          index -&gt; values[index]));\n}\n</code></pre>\n<p><a href=\"https://ideone.com/dgXgcj\" rel=\"nofollow noreferrer\"><kbd>Ideone demo</kbd></a></p>\n","answer_id":70625645,"question_id":70625495,"last_edit_date":1641583272},{"owner":{"profile_image":"https://www.gravatar.com/avatar/7a46f8c7e87a67455586b285c91c57ac?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":6948309,"user_type":"registered","user_id":8819319,"link":"https://stackoverflow.com/users/8819319/shivam","reputation":79,"display_name":"Shivam"},"content_license":"CC BY-SA 4.0","score":4,"is_accepted":false,"last_activity_date":1641574705,"creation_date":1641574705,"body":"<p>The get-max operation on a queue can be implemented in amortized O(1) time by maintaining the candidates for the max value in a separate double-ended queue (<code>Deque</code>).</p>\n<ul>\n<li>On enqueue (or <code>offer</code>) operation, we check whether there are any elements at the back of the <code>Deque</code> which are lesser in value than the element being enqueued. These values can simply be removed – for these can never be the maximum value going forward.</li>\n<li>On dequeue (or <code>poll</code>) operation, we check whether the first element in the <code>Deque</code> is equal to the first element in the regular queue and if yes, remove it too.</li>\n<li>The max element is simply the first element of the <code>Deque</code>.</li>\n</ul>\n<p>All operations have amortized O(1) time complexity.</p>\n<p>Here's an implementation in Java:</p>\n<pre class=\"lang-java prettyprint-override\"><code>public class QueueWithMax&lt;T extends Comparable&lt;T&gt;&gt; {\n    Queue&lt;T&gt; queue;\n    Deque&lt;T&gt; cMax; // candidates for Max value\n\n    public QueueWithMax() {\n        queue = new LinkedList&lt;&gt;();\n        cMax = new LinkedList&lt;&gt;();\n    }\n\n    public void offer(T element) {\n        queue.offer(element);\n        while (!cMax.isEmpty() &amp;&amp; element.compareTo(cMax.peekLast()) &gt; 0) {\n            cMax.pollLast();\n        }\n        cMax.offerLast(element);\n    }\n\n    public T poll() {\n        if (cMax.peekFirst().equals(queue.peek()))\n            cMax.pollFirst();\n        return queue.poll();\n    }\n\n    public T getMax() {\n        return cMax.peekFirst();\n    }\n}\n</code></pre>\n","answer_id":70624675,"question_id":40877146},{"owner":{"profile_image":"https://lh3.googleusercontent.com/-9JmWKNYVrkA/AAAAAAAAAAI/AAAAAAAAACI/eTrny6Lo14Q/photo.jpg?sz=256","account_id":9508774,"user_type":"registered","user_id":7067337,"link":"https://stackoverflow.com/users/7067337/roy-alilin","reputation":107,"display_name":"Roy Alilin"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1641544923,"creation_date":1641544923,"body":"<p>In terms of List functionality differences, the other responses already answered this question. In terms of applicable rules of Java generics, it's a complicated topic. I wrote an in-depth article about Java generics rules, this is the link: <a href=\"https://medium.com/@royalilin/java-generics-rules-1d05de86e9cb\" rel=\"nofollow noreferrer\">https://medium.com/@royalilin/java-generics-rules-1d05de86e9cb</a></p>\n","answer_id":70618634,"question_id":490091},{"owner":{"profile_image":"https://i.stack.imgur.com/dfqcw.png?s=256&g=1","account_id":6651855,"user_type":"registered","user_id":5133585,"link":"https://stackoverflow.com/users/5133585/sweeper","reputation":224850,"display_name":"Sweeper","accept_rate":96},"content_license":"CC BY-SA 4.0","score":5,"is_accepted":true,"last_activity_date":1641543284,"creation_date":1641474746,"body":"<p>The reason why your <code>test</code> methods produce an error is because they have totally unrelated, different signatures. Note that the <a href=\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-8.html#jls-8.4.2\" rel=\"nofollow noreferrer\">signature</a> of a method consists of its name, parameter list, <em>and type parameters</em>.</p>\n<p>Quote from the Java Language Specification:</p>\n<blockquote>\n<p>Two methods or constructors, M and N, have the same signature if they have the same name, the same type parameters (if any) (§8.4.4), and, after adapting the formal parameter types of N to the type parameters of M, the same formal parameter types.</p>\n</blockquote>\n<p>Crucially, your two <code>test</code> methods do not have the <a href=\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-8.html#jls-8.4.4\" rel=\"nofollow noreferrer\">same type parameters</a>, because <code>U</code> in <code>A.test</code> has a different <em>bound</em> from <code>U</code> in <code>B.test</code>.</p>\n<blockquote>\n<p>Two methods or constructors M and N have the same type parameters if both of the following are true:</p>\n<ul>\n<li><p>M and N have same number of type parameters (possibly zero).</p>\n</li>\n<li><p>Where A1, ..., An are the type parameters of M and B1, ..., Bn are the type parameters of N, let θ=[B1:=A1, ..., Bn:=An]. Then, for all i (1 ≤ i ≤ n), the bound of Ai is the same type as θ applied to the bound of Bi.</p>\n</li>\n</ul>\n</blockquote>\n<p>Think about what would happen if <code>B.test</code> actually overrode <code>A.test</code>. You could pass a type to the type parameter <code>U</code> that is out of its bounds!</p>\n<pre><code>A a = new B();\n// This will call B.test, and U is Double, T is Integer\n// but U should extends Integer!\nDouble x = a.test((Integer)0); \n</code></pre>\n<p>For more info, <a href=\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-8.html#jls-8.4.8.1\" rel=\"nofollow noreferrer\">here</a> are the precise rules for when overriding happens. Note that criteria #4 and #5 on your list are not actually considered. They are just additional requirements that make your code not compile if you break them. One method is still &quot;defined&quot; to override another even if you break those requirements. They are listed <a href=\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-8.html#jls-8.4.8.3\" rel=\"nofollow noreferrer\">here</a> in the JLS.</p>\n","answer_id":70607642,"question_id":70607154,"last_edit_date":1641543284},{"owner":{"profile_image":"https://i.stack.imgur.com/qDozH.jpg?s=256&g=1","account_id":5126886,"user_type":"registered","user_id":4108590,"link":"https://stackoverflow.com/users/4108590/ravindra-ranwala","reputation":20904,"display_name":"Ravindra Ranwala","accept_rate":57},"content_license":"CC BY-SA 4.0","score":2,"is_accepted":true,"last_activity_date":1641524179,"creation_date":1641254379,"body":"<p>You can't create a generic array in Java. Arrays are reifiable types, and carry their type information at runtime whereas generics are non reifiable, and their type information is erased after the compile time due to erasure. This is due to the implementation of the type system in java and even though this causes some rough edges and corner cases, it eases the evolution of code into generics. Since generic type information is erased, you don't have them at runtime and that's why you can't create a generic array in java.</p>\n<p>There are two solutions to circumvent the issue you are facing. You can either create an Object array and cast it to the generic type you need.</p>\n<pre><code>final T[] arr = (T[]) new Object[n]\n</code></pre>\n<p>or else</p>\n<pre><code>final Object[] arr = new Object[]\n</code></pre>\n<p>You can do the cast when you get the items from this array like this</p>\n<pre><code>T itm = (T) arr[1];\n</code></pre>\n<p>Both of the above approaches work if you don't return this internal array.</p>\n<p>However, if you are returning the internal array, you need to create it reflectively, since you need to maintain the proper reifiable type.</p>\n<pre><code>static &lt;T&gt; T[] createArr(Class&lt;T&gt; clz) {\n    return (T[]) Array.newInstance(clz, 5);\n}\n</code></pre>\n","answer_id":70572715,"question_id":70572512,"last_edit_date":1641524179},{"owner":{"profile_image":"https://www.gravatar.com/avatar/b0615f9d8910677c053724488c8e5240?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":14529138,"user_type":"registered","user_id":14367481,"link":"https://stackoverflow.com/users/14367481/mr-proper","reputation":33,"display_name":"Mr. Proper"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1641519580,"creation_date":1641518648,"body":"<p>Given that I find the relevant JLS rules (cited in Sweeper's answer above) quite confusing, it's useful to mention the rules, as formulated by the great people at Enthuware (<a href=\"https://enthuware.com/\" rel=\"nofollow noreferrer\">https://enthuware.com/</a>).\nThey don't mention the visibility and exceptions rules, but they go in detail with Generics. And they seem to explain my two cases, mentioned in  the comments above. I'll just state the cases again here:</p>\n<pre><code>class A {\n    public &lt;T,U&gt; U test(T test) {\n        return null;\n    }\n}\n\nclass B extends A {\n    //Successful override even though type parameters do not match\n    //This method even has none.\n    @Override\n    public Number test(Object test) {\n        return null;\n    }\n}\n\nclass C {\n    public Object test(Object test) {\n        return null;\n    }\n}\n\nclass D extends C {\n    //Same situation as A and B, but with places being exchanged.\n    //Now the generic method overrides non-generic. \n    //And we have error. \n    @Override\n    public &lt;T,U&gt; U test(T test) {\n        return null;\n    }\n}\n</code></pre>\n<p>Now the steps, as formulated by Enthuware:</p>\n<p><em><strong>Steps to check for valid override:</strong></em></p>\n<p><strong>First</strong>, check the method signature (i.e. method name and the parameter list). If the signature of the method in the subclass matches the signature of the method in the super class, then it could be a valid override, otherwise it is just an overloaded method. <strong>Note that signature does not include parameter names and parameter's generic type specification.</strong></p>\n<p><em>NOTE: I think they mean for us to replace the type parameter with its bound and then compare both methods.</em></p>\n<p><strong>Second</strong>, if it is a potential override, check the generic type specification of the parameters. <strong>If the overriding method does not use a generic type specification for the parameter type, then it is valid. The reverse is not valid i.e. the overriding method is allowed to erase the generic type specification but is not allowed to add a generic type specification if the overridden method does not have it. If both the methods have a generic type specification, then the specification must match exactly.</strong> For example, if the overridden method has Set&lt;Integer&gt;, then the overriding method can use Set or Set&lt;Integer&gt;. But if overridden method has Set, then the overriding method must also have Set for a valid override.</p>\n<p><strong>Third</strong>, if it is a potential override, check the return type. Java allows &quot;covariant&quot; returns, which means, the return type of the overriding method must be the same or be a subtype of the return type mentioned in the overridden method. Check the two return types without the generic type specification. If return type of the overriding method is covariant with respect to the return type of the overriding method (for example, ArrayList is covariant with List), then perform the same check including the generic type specification (for example, ArrayList&lt;CharSequence&gt; is covariant with List&lt;? extends CharSequence&gt;).  Don't get confused by the presence of &lt;T&gt; in the code. The same rules of overriding still apply. The T in &lt;T&gt; is called as the &quot;type&quot; parameter. It is used as a place holder for whatever type is actually used while invoking the method. For example, if you call the method &lt;T&gt; List&lt;T&gt; transform(List&lt;T&gt; list) with List&lt;String&gt;, T will be typed to String. Thus, it will return List&lt;String&gt;. If, in another place, you call the same method with Integer, T will be typed to Integer and therefore, the return type of the method for that invocation will be List&lt;Integer&gt;</p>\n","answer_id":70615556,"question_id":70607154,"last_edit_date":1641519580},{"owner":{"profile_image":"https://i.stack.imgur.com/dJrV3.jpg?s=256&g=1","account_id":1888343,"user_type":"registered","user_id":1707091,"link":"https://stackoverflow.com/users/1707091/rgettman","reputation":176617,"display_name":"rgettman"},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":true,"last_activity_date":1641491487,"creation_date":1641491487,"body":"<p>Java doesn't allow this because a <code>List&lt;Car&gt;</code> is not a <code>List&lt;Object&gt;</code> even though a <code>Car</code> is an <code>Object</code>.</p>\n<p>It's not necessary to declare a type parameter, because we don't care what the type actually is.  Every reference type descends from <code>Object</code> which has a <code>toString</code> method, so we can just replace <code>List&lt;Object&gt;</code> with <code>List&lt;?&gt;</code>:</p>\n<pre><code>public static String formatList(List&lt;?&gt; listToFormat, int indentationSize) {\n</code></pre>\n","answer_id":70611427,"question_id":70610873},{"owner":{"profile_image":"https://www.gravatar.com/avatar/6a6909762e756d3ba9c521f334824e79?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":22450291,"user_type":"registered","user_id":16653700,"link":"https://stackoverflow.com/users/16653700/alias-cartellano","reputation":364,"display_name":"Alias Cartellano"},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":false,"last_activity_date":1641491060,"creation_date":1641491060,"body":"<p>You use <code>public static &lt;T&gt; String formatList(List&lt;T&gt; listToFormat,int indentationSize){</code> to accept objects instead.</p>\n<h3>Code:</h3>\n<pre><code>public static &lt;T&gt; String formatList(List&lt;T&gt; listToFormat,int indentationSize){\n        String indentation = Stream.generate(()-&gt;&quot;\\t&quot;).limit(indentationSize).collect(Collectors.joining());\n        String newIndentedLine = &quot;\\n&quot;+indentation;\n        return newIndentedLine+listToFormat.stream()\n                .map(Object::toString)\n                .collect(Collectors.joining(newIndentedLine));\n    }\n</code></pre>\n","answer_id":70611341,"question_id":70610873},{"owner":{"profile_image":"https://i.stack.imgur.com/QZvw8.jpg?s=256&g=1","account_id":4564492,"user_type":"registered","user_id":3705861,"link":"https://stackoverflow.com/users/3705861/younes-el-ouarti","reputation":2199,"display_name":"Younes El Ouarti"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1641477790,"creation_date":1641477790,"body":"<p>As an alternative, your <code>OpponentListAdapter</code> could have a <code>public static</code> &quot;creator&quot;-methods. This would look like this:</p>\n<pre class=\"lang-java prettyprint-override\"><code>public class OpponentListAdapter {\n\n  // A constructor is not necessary but you could have one if you want\n  public OpponentListAdapter(Context c, ArrayList&lt;String&gt; l){\n    ...\n  }\n\n  //now the creator method\n  public static OpponentListAdapter create(Context c, ArrayList&lt;MyCustomObject&gt; l){\n     // implement the creation here and return it\n  }\n\n}\n</code></pre>\n<p>This way you have still type safety. This pattern is used fairly often and names for the methods are usually something like:</p>\n<ul>\n<li><code>create()</code></li>\n<li><code>of()</code>  // popular example is <code>List.of()</code> from Java 9+</li>\n<li><code>from()</code></li>\n</ul>\n<p>In your case you could have e.g. 2 different static functions:</p>\n<ul>\n<li><code>createFromString(Context c, List&lt;String&gt; l)</code></li>\n<li><code>createFromMyCustomObject(Context c, List&lt;MyCustomObject&gt; l)</code></li>\n</ul>\n<p>Calling it would look something like this:</p>\n<pre class=\"lang-java prettyprint-override\"><code>...\n  List&lt;String&gt; ls = ...\n  List&lt;MyCustomObject&gt; lo = ...\n\n  OpponentListAdapter adapterFromStrings = OpponentListAdapter.createFromStrings(c, ls);\n  OpponentListAdapter adapterFromMyObject = OpponentListAdapter.createFromObjects(c, lo);\n...\n</code></pre>\n","answer_id":70608308,"question_id":21556925},{"owner":{"profile_image":"https://www.gravatar.com/avatar/ba0c264a341dfc252b07c87c8f958c0a?s=256&d=identicon&r=PG","account_id":23845919,"user_type":"unregistered","user_id":17850414,"link":"https://stackoverflow.com/users/17850414/sanjay","reputation":1,"display_name":"Sanjay"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1641472510,"creation_date":1641472510,"body":"<pre><code>List&lt;String&gt; list = Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);        \nsort(list, Comparable::&lt;String&gt;compareTo);\n</code></pre>\n<p>The <code>int compareTo (T o)</code> is not a generic method invocation. Although <code>Comparable&lt;T&gt;</code> is an interface with a type. Even if <code>compareTo</code> had returned <code>T</code>, i.e. <code>T compareTo (T o)</code> it still is not a generic method. For it to be a generic method, it needs to include a list of <code>type parameters</code>, i.e. <code>&lt;T&gt; T compareTo (T o)</code>.</p>\n","answer_id":70607179,"question_id":22588518},{"owner":{"profile_image":"https://i.stack.imgur.com/UPTah.jpg?s=256&g=1","account_id":17725449,"user_type":"registered","user_id":12869305,"link":"https://stackoverflow.com/users/12869305/alex-a","reputation":51,"display_name":"Alex A"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1641443191,"creation_date":1641442628,"body":"<p>Recently I implemented an abstract DAO (Repository) in Spring Data style and reactive manner with WebFlux for AWS DynamoDB. Not the ideal, but works fine and as I assume it can fit to your case:</p>\n<p>The first part is the abstract DAO. The common interface looks like this:</p>\n<pre><code>public interface DynamoDbRepository&lt;T&gt; {\n\n  /** Constant prefix for logging purposes */\n  String SN = &quot;[DynamoDbRepository]&quot;;\n\n  Mono&lt;PutItemEnhancedResponse&lt;T&gt;&gt; insert(final T object);\n\n  Mono&lt;T&gt; getById(final String id);\n\n  Flux&lt;T&gt; getAll();\n}\n</code></pre>\n<p>Logic implementation class which extends <strong>DynamoDbRepository</strong>:</p>\n<pre><code>@Log4j2\n@Repository\npublic abstract class EntityDynamoDbRepository&lt;T&gt; implements DynamoDbRepository&lt;T&gt; {\n\n  private final Class&lt;T&gt; clazz;\n  private DynamoDbAsyncTable&lt;T&gt; dynamoDbAsyncTable;\n\n  @Autowired\n  @SneakyThrows\n  public final void setAsyncClient(DynamoDbEnhancedAsyncClient asyncClient) {\n    DynamoDbTable tableName = AnnotationUtils.getAnnotation(clazz, DynamoDbTable.class);\n    this.dynamoDbAsyncTable =\n        asyncClient.table(tableName.value(), TableSchema.fromBean(this.clazz));\n  }\n\n  @SuppressWarnings(&quot;unchecked&quot;)\n  @SneakyThrows\n  public EntityDynamoDbRepository() {\n    clazz =\n        (Class&lt;T&gt;) GenericTypeResolver.resolveTypeArgument(getClass(), DynamoDbRepository.class);\n    if (clazz == null) {\n      throw new Exception(&quot;Not possible to resolve generic type&quot;);\n    }\n  }\n\n  @Override\n  public Mono&lt;PutItemEnhancedResponse&lt;T&gt;&gt; insert(final T object) {\n    final PutItemEnhancedRequest&lt;T&gt; putItemEnhancedRequest =\n        PutItemEnhancedRequest.builder(this.clazz)\n            .item(object)\n            .build();\n    return Mono.fromFuture(dynamoDbAsyncTable.putItemWithResponse(putItemEnhancedRequest));\n  }\n\n  public Mono&lt;T&gt; getById(final String id) {\n    return Mono.fromFuture(dynamoDbAsyncTable.getItem(getKeyBuild(id)));\n  }\n\n  public Flux&lt;T&gt; getAll() {\n    return Flux.from(dynamoDbAsyncTable.scan().items());\n  }\n\n  private Key getKeyBuild(final String id) {\n    return Key.builder().partitionValue(id).build();\n  }\n}\n</code></pre>\n<p>And finally to implement a concrete Repository:</p>\n<pre><code>@Repository\n@Log4j2\npublic class ConcreteRepository extends EntityDynamoDbRepository&lt;ConcreteEntity&gt; {}\n</code></pre>\n<p>You might noticed <strong>setAsyncClient</strong> method which defines <strong>dynamoDbAsyncTable</strong>. Due to @DynamoDbBean using the entity class name as a DynamoDB table name, I put custom annotation to assign custom table name there:</p>\n<pre><code>@Retention(RetentionPolicy.RUNTIME)\n@DynamoDbBean\npublic @interface DynamoDbTable {\n  String value();\n}\n</code></pre>\n<p>Answering your question: you can add/call whatever you want inside the <strong>EntityDynamoDbRepository</strong> constructor to wrap your &lt;POJO&gt; with any possible logic.</p>\n<p>p.s.: I didn't paste the DynamoDbEnhancedAsyncClient bean but there are a lot of samples on a GitHub</p>\n","answer_id":70602411,"question_id":67275241,"last_edit_date":1641443191},{"owner":{"profile_image":"https://www.gravatar.com/avatar/bedab8d59cdd9ca2366251c11df4795e?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":7595189,"user_type":"registered","user_id":5761558,"link":"https://stackoverflow.com/users/5761558/ernest-k","reputation":44576,"display_name":"ernest_k"},"content_license":"CC BY-SA 4.0","score":8,"is_accepted":true,"last_activity_date":1640096068,"creation_date":1640082162,"body":"<p>Compatibility with the return type <code>Stream&lt;Optional&lt;? extends Number&gt;&gt;</code> in the first case is not obtained by virtue of <code>numbers.map(Optional::of)</code> returning a <code>Stream&lt;Optional&lt;? extends Number&gt;&gt;</code> on its own; it's the compiler inferring the return type of <code>numbers.map(...)</code> due to  it being a generic method:</p>\n<pre><code>&lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper);\n</code></pre>\n<p>while <code>Stream.filter()</code> is not:</p>\n<pre><code>Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate);\n</code></pre>\n<p>Therefore, in the first case the compiler can take into account the return statement's context (<code>getNumbers</code>'s type) when inferring type of <code>numbers.map(...)</code>.<br />\nCompiler cannot do the same for <code>numbers.map(...)</code> in the second case,  as there are subsequent chained calls, that may further change the type, so it would be very hard to guess what the right inferring should be at this stage. As a result, the most specific possible type is assumed for <code>numbers.map(...)</code> (<code>Stream&lt;Optional&lt;Number&gt;&gt;</code>) and further carried on by <code>filter(...)</code>.</p>\n<p>As a different example to illustrate that, please figure out why both of these compile (<code>List.of()</code> is the same code, after all):</p>\n<pre><code>static List&lt;String&gt; stringList() {\n    return List.of();\n}\nstatic List&lt;Integer&gt; intList() {\n    return List.of();\n}\n</code></pre>\n<p>Now, why does this fail:</p>\n<pre><code>static List&lt;String&gt; stringList() {\n    return List.of().subList(0, 0);\n}\n</code></pre>\n<p>That's because <code>List.subList(...)</code> does not infer the returned list's <code>E</code> type in context (i.e., the method is not generic), it carries the <code>List</code> instance's <code>E</code> type, which, with <code>List.of()</code> in that case gets defaulted to <code>Object</code> (yes, when you have <code>return List.of();</code>, return type inference kicks in, forcing the compiler to figure out that the intent is to make <code>E</code> match <code>String</code>, the type argument in the method's return type). <i>Please note that this gets more complex than that, there are corners where inference doesn't work as wished/expected.</i></p>\n<hr />\n<p><strong>Short answer</strong>: <code>return numbers.map(Optional::of)</code> takes advantage of type inference as <code>map()</code> is generic, and <code>filter()</code> does not, expecting the <code>E</code> of <code>Stream&lt;E&gt;</code> to be carried. And with <code>numbers.map(Optional::of)</code>, <code>E</code> is <code>Optional&lt;Number&gt;</code>, not <code>Optional&lt;? extends Number&gt;</code>, and <code>filter</code> carries that.</p>\n","answer_id":70433906,"question_id":70433519,"last_edit_date":1640096068},{"owner":{"profile_image":"https://i.stack.imgur.com/uAEcW.jpg?s=256&g=1","account_id":1689973,"user_type":"registered","user_id":1552534,"link":"https://stackoverflow.com/users/1552534/wjs","reputation":37330,"display_name":"WJS"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1624035689,"creation_date":1624035689,"body":"<p>Here is how I would do it.  I'm using the Stack that's part of the API but as long as a stack has push and pop, any implementation should work.</p>\n<ul>\n<li>create a new stack in the reverse method.</li>\n<li>and as you pop one value from the original stack, push it on to the new stack.</li>\n<li>return the new stack</li>\n</ul>\n<pre><code>Stack&lt;Integer&gt; stack = new Stack&lt;&gt;();\nfor (int i = 1; i &lt; 6; i++) {\n    stack.push(i);\n}\n\nSystem.out.println(stack);\nstack = reverse(stack);\nSystem.out.println(stack);\n    \n    \npublic static &lt;T&gt; Stack&lt;T&gt; reverse(Stack&lt;T&gt; stack) {\n    Stack&lt;T&gt; reversed = new Stack&lt;&gt;();\n    while (!stack.isEmpty()) {\n        reversed.push(stack.pop());\n    }\n    return reversed;\n}\n</code></pre>\n<p>Prints</p>\n<pre><code>[1, 2, 3, 4, 5]\n[5, 4, 3, 2, 1]\n</code></pre>\n","answer_id":68038986,"question_id":68038527},{"owner":{"profile_image":"https://www.gravatar.com/avatar/96c5736faea666b5204770aa7810c4f1?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":8803777,"user_type":"registered","user_id":6579116,"link":"https://stackoverflow.com/users/6579116/pirate","reputation":2955,"display_name":"Pirate","accept_rate":27},"content_license":"CC BY-SA 4.0","score":-2,"is_accepted":true,"last_activity_date":1624034405,"creation_date":1624033414,"body":"<p>Use another stack to reverse the stack.</p>\n<pre><code>public static &lt;E&gt; Stack&lt;E&gt; reverse(Stack&lt;E&gt; s) {\n    Stack&lt;E&gt; reversedStack = new Stack&lt;E&gt;(null, null);\n    while(!Stack.&lt;E&gt;isEmpty(s) {\n        Stack.&lt;E&gt;push(reversedStack, s.value);\n        s = Stack.&lt;E&gt;pop(s));\n    }\n    return reversedStack;\n}\n</code></pre>\n","answer_id":68038541,"question_id":68038527,"last_edit_date":1624034405},{"owner":{"profile_image":"https://www.gravatar.com/avatar/7686280776045b6d5250c0762c92ffd5?s=256&d=identicon&r=PG","account_id":135067,"user_type":"registered","user_id":337621,"link":"https://stackoverflow.com/users/337621/g%c3%a1bor-lipt%c3%a1k","reputation":9676,"display_name":"G&#225;bor Lipt&#225;k","accept_rate":70},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":true,"last_activity_date":1623918736,"creation_date":1623918736,"body":"<p>I came up with this solution:</p>\n<pre><code>public interface SerializableList&lt;T&gt; extends List&lt;T&gt;, Serializable {\n}\n\npublic class SerializableArrayList&lt;T&gt; extends ArrayList&lt;T&gt; implements SerializableList&lt;T&gt; {\n    public SerializableArrayList(int initialCapacity) {\n        super(initialCapacity);\n    }\n\n    public SerializableArrayList() {\n    }\n\n    public SerializableArrayList(Collection&lt;? extends T&gt; c) {\n        super(c);\n    }\n}\n</code></pre>\n<p>Then whenever I need a <code>Serializable</code> <code>List</code> type, I can use the <code>SerializableList</code> interface and its implementation <code>SerializableArrayList</code></p>\n","answer_id":68015730,"question_id":68014704},{"owner":{"profile_image":"https://i.stack.imgur.com/uJhj3.jpg?s=256&g=1","account_id":4647011,"user_type":"registered","user_id":3764965,"link":"https://stackoverflow.com/users/3764965/nikolas-charalambidis","reputation":41835,"display_name":"Nikolas Charalambidis","accept_rate":94},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":true,"last_activity_date":1623898489,"creation_date":1623898489,"body":"<p>Use generic type, not the raw type. Try to use the narrowest type possible (ex. <code>Speak</code> instead of <code>Dog</code> because you call only methods from that interface).</p>\n<pre><code>List&lt;Speak&gt; dogs = new ArrayList&lt;&gt;();\ndogs.add(new Dog(&quot;Fred&quot;));\ndogs.add(new Dog(&quot;Wanda&quot;));\nfor (Speak e: dogs) {\n    e.speak();\n}\n</code></pre>\n","answer_id":68012279,"question_id":68012208},{"owner":{"profile_image":"https://i.stack.imgur.com/PO7Uz.jpg?s=256&g=1","account_id":2673407,"user_type":"registered","user_id":2310289,"link":"https://stackoverflow.com/users/2310289/scary-wombat","reputation":44640,"display_name":"Scary Wombat"},"content_license":"CC BY-SA 4.0","score":2,"is_accepted":false,"last_activity_date":1623898483,"creation_date":1623898483,"body":"<p>ArrayList can / should take a type</p>\n<pre><code>ArrayList&lt;Dog&gt; dogs= new ArrayList&lt;&gt;();\ndogs.add(new Dog(&quot;Fred&quot;));\ndogs.add(new Dog(&quot;Wanda&quot;));\nfor (Dog e: dogs)\n{\n    e.speak();\n}\n</code></pre>\n","answer_id":68012278,"question_id":68012208},{"owner":{"profile_image":"https://i.stack.imgur.com/JF1RF.jpg?s=256&g=1","account_id":8423897,"user_type":"registered","user_id":7505687,"link":"https://stackoverflow.com/users/7505687/dilermando-lima","reputation":1034,"display_name":"Dilermando Lima"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":true,"last_activity_date":1623897988,"creation_date":1623897537,"body":"<p>When you return a String you don't need to use generics and you can receive only an Object on methods</p>\n<pre class=\"lang-java prettyprint-override\"><code>// you can treate try and catch inside them as you prefer\n\npublic static &lt;T&gt; T fromJson(String json, Class&lt;T&gt; classToReturn) throws Exception{\n    return  new ObjectMapper().readValue(json, classToReturn);\n}\n\npublic static String toJson(Object obj) throws Exception{\n    return new ObjectMapper().writeValueAsString(obj);\n}\n\npublic static String toJsonPrettyNonNullTreatingDateTypes(Object obj) throws Exception{\n    return  new ObjectMapper()\n            .setSerializationInclusion(Include.NON_NULL)\n            .setSerializationInclusion(Include.NON_EMPTY)\n            .registerModule(new JavaTimeModule() );\n            .writerWithDefaultPrettyPrinter()\n            .writeValueAsString(obj);\n}\n\n\n</code></pre>\n<p>using them</p>\n<pre class=\"lang-java prettyprint-override\"><code>MyObject obj = fromJson(jsonString, MyObject.class );\n\nString json = toJson(new MyObject()); //  Object can accept any types\n\nString json = toJsonPrettyNonNullTreatingDateTypes(new MyObject());\n\n</code></pre>\n","answer_id":68012167,"question_id":67961312,"last_edit_date":1623897988},{"owner":{"profile_image":"https://i.stack.imgur.com/W6OMC.png?s=256&g=1","account_id":1056871,"user_type":"registered","user_id":1059372,"link":"https://stackoverflow.com/users/1059372/eugene","reputation":117749,"display_name":"Eugene","accept_rate":97},"content_license":"CC BY-SA 4.0","score":5,"is_accepted":true,"last_activity_date":1623786523,"creation_date":1623786523,"body":"<p>change the type and the constructor:</p>\n<pre><code>private final Class&lt;T&gt; enumClass;\n\npublic EnumSimplesConverter(Class&lt;T&gt; enumClass) {\n    this.enumClass = enumClass;\n}\n</code></pre>\n<p>you already enforce the <code>T</code> via <code>T extends Enum&lt;T&gt;</code></p>\n","answer_id":67992612,"question_id":67992546},{"owner":{"profile_image":"https://i.stack.imgur.com/W6A8i.jpg?s=256&g=1","account_id":14429973,"user_type":"registered","user_id":10423604,"link":"https://stackoverflow.com/users/10423604/volodya-lombrozo","reputation":2483,"display_name":"Volodya Lombrozo"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":true,"last_activity_date":1623785809,"creation_date":1623785809,"body":"<p>You could use <code>&lt;? super RunnableRule&lt;?,?&gt;&gt;</code> in this case:</p>\n<pre class=\"lang-java prettyprint-override\"><code> List&lt;? super RunnableRule&lt;?,?&gt;&gt; list = new ArrayList&lt;&gt;();\n list.add(new AcksTermsSignUpRule());\n list.add(new RunnableRule&lt;String, Double&gt;() {});\n</code></pre>\n<p>You could read docs right <a href=\"https://docs.oracle.com/javase/tutorial/extra/generics/wildcards.html\" rel=\"nofollow noreferrer\">there</a></p>\n<blockquote>\n<p>Collection&lt;?&gt; (pronounced &quot;collection of unknown&quot;), that is, a\ncollection whose element type matches anything</p>\n<p>A lower bounded wildcard restricts the unknown type to be a specific\ntype or a super type of that type. A lower bounded wildcard is\nexpressed using the wildcard character ('?'), following by the super\nkeyword, followed by its lower bound: &lt;? super A&gt;.</p>\n</blockquote>\n","answer_id":67992459,"question_id":67988538},{"owner":{"profile_image":"https://i.stack.imgur.com/jXcg4.png?s=256&g=1","account_id":1263831,"user_type":"registered","user_id":1221571,"link":"https://stackoverflow.com/users/1221571/eran","reputation":388998,"display_name":"Eran","accept_rate":67},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":true,"last_activity_date":1609919832,"creation_date":1609919832,"body":"<p>If you change</p>\n<pre><code>public static &lt;T extends InstanceClass&lt;Integer&gt;&gt; void prt(T q)\n</code></pre>\n<p>to</p>\n<pre><code>public static &lt;T&gt; void prt(T q)\n</code></pre>\n<p>the compiler wouldn't know that the type parameter <code>T</code> must be an <code>InstanceClass</code>, and therefore it wouldn't know that it has <code>getNum()</code> and <code>calculate()</code> methods, which you are trying to call from <code>prt</code>.</p>\n<p>In fact, the compiler would allow you to pass to the <code>prt</code> method any argument, including instances of classes unrelated to <code>InstanceClass</code>, which don't have the methods you are trying to call inside <code>prt</code>.</p>\n","answer_id":65592093,"question_id":65592052},{"owner":{"profile_image":"https://www.gravatar.com/avatar/b13bedc5215730fbce5edff6c130988a?s=256&d=identicon&r=PG","account_id":401843,"user_type":"registered","user_id":768644,"link":"https://stackoverflow.com/users/768644/rzwitserloot","reputation":89873,"display_name":"rzwitserloot"},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":false,"last_activity_date":1609904070,"creation_date":1609904070,"body":"<blockquote>\n<p><code>assertEquals(new GenericInterfaceImpl&lt;String&gt;().getGenericType(), String.class, &quot;Type should resolve to String.class&quot;);</code></p>\n</blockquote>\n<p>impossible.</p>\n<blockquote>\n<p><code>assertEquals(new TypedInterfaceImpl().getGenericType(), String.class, &quot;Type should resolve to String.class&quot;);</code></p>\n</blockquote>\n<p>Possible, but a bad idea; it would require you to document your interface with 'when implementing this interface, you <strong>must</strong> pick a concrete, non-type-parameterized type for <code>T</code> or nothing works right.', which is a weird caveat.</p>\n<blockquote>\n<p><code>Class&lt;T&gt; getGenericType() {</code></p>\n</blockquote>\n<p>Bad idea; the thing in the <code>&lt;&gt;</code> does not have to be a <code>Class</code> - for example, it could be <code>List&lt;String&gt;</code>, which is not representable as a class object (only <code>List</code> is, there is one object that represents all lists, there's no way to have an instance of j.l.Class that represents <code>List&lt;String&gt;</code>).</p>\n<blockquote>\n<p>The Javadocs for getGenericInterfaces</p>\n</blockquote>\n<p><code>getGenericInterfaces</code> is a reflective tool, but it reflects on the definition of the type only. Given <code>class Foo&lt;T&gt; implements Thingie&lt;T&gt;</code>, <code>getGenericInterfaces</code> can only be executed on the entire <code>Foo</code> class, and you get back an object that presents <code>Thingie&lt;T&gt;</code>. Given an instance such as <code>new Foo&lt;String&gt;()</code> it is <strong>not possible</strong> to derive String.</p>\n<blockquote>\n<p>Is there a way to solve this problem at all or is this a &quot;core limitation&quot; of the Java language?</p>\n</blockquote>\n<p>It's a core limitation, so, no. Not directly.</p>\n<p>One trick is to add a method:</p>\n<pre><code>public interface Foo&lt;T&gt; {\n   public Class&lt;T&gt; getType();\n}\n</code></pre>\n<p>and let implementers worry about the problem. This is still a bad idea, for example, a <code>Class</code> object cannot represent <code>List&lt;String&gt;</code>, so you've effectively made it impossible for Foo to properly represent anything where you want the <code>T</code> to be anything that has type params.</p>\n<p>Take a step back instead. What are you <em>actually</em> trying to do? Nobody wakes up and goes: I know! I'll build an interface that can report its own type parameter but reified! What did you want to build? A chat app? A plugin system for photoshop?</p>\n<p><code>java.lang.Class</code>, with the intent to invoke <code>.newInstance()</code> on it, is a piss poor factory. Thus, if that is what you intend to do, use factories instead.</p>\n<p>Anotehr solution, but you probably don't want this, and before you got all excited, it's got plenty of limitations, are a concept called Super Type Tokens; you can search the web if you must know.</p>\n","answer_id":65589852,"question_id":65589741},{"owner":{"profile_image":"https://i.stack.imgur.com/s4qlq.png?s=256&g=1","account_id":6780825,"user_type":"registered","user_id":5221149,"link":"https://stackoverflow.com/users/5221149/andreas","reputation":155680,"display_name":"Andreas"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":true,"last_activity_date":1609867103,"creation_date":1609867103,"body":"<p>Read the <em>documentation</em>, i.e. the javadoc of <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\" rel=\"nofollow noreferrer\"><code>getClass()</code></a> in class <code>Object</code>:</p>\n<blockquote>\n<p><strong>The actual result type is <code>Class&lt;? extends |X|&gt;</code> where <code>|X|</code> is the erasure of the static type of the expression on which <code>getClass</code> is called.</strong> For example, no cast is required in this code fragment:</p>\n<pre class=\"lang-java prettyprint-override\"><code>Number n = 0;\nClass&lt;? extends Number&gt; c = n.getClass();\n</code></pre>\n</blockquote>\n<p><sup><em>The bolding is from the javadoc, not added by me.</em></sup></p>\n<p>For class <code>Object</code> itself, it means that the return type is <code>Class&lt;? extends Object&gt;</code>, but since <code>Class&lt;?&gt;</code> is shorthand for <code>Class&lt;? extends Object&gt;</code>, the javadoc simply shows the shorthand.</p>\n<p>Quoting the Java Language Specification, section <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1\" rel=\"nofollow noreferrer\">4.5.1. Type Arguments of Parameterized Types</a>:</p>\n<blockquote>\n<p>The wildcard <code>? extends Object</code> is equivalent to the unbounded wildcard <code>?</code>.</p>\n</blockquote>\n","answer_id":65583567,"question_id":65583228},{"owner":{"profile_image":"https://www.gravatar.com/avatar/44c841338e1646af9a977f1fa0e23948?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":162699,"user_type":"registered","user_id":3788176,"link":"https://stackoverflow.com/users/3788176/andy-turner","reputation":138060,"display_name":"Andy Turner","accept_rate":54},"content_license":"CC BY-SA 4.0","score":3,"is_accepted":false,"last_activity_date":1609865860,"creation_date":1609865860,"body":"<blockquote>\n<p>But why does the return type of the getClass method is just<code>Class&lt;?&gt;</code> in the Object class</p>\n</blockquote>\n<p><code>Class&lt;?&gt;</code> is the same as <code>Class&lt;? extends Object&gt;</code>, because all classes (except <code>Object</code>) have <code>Object</code> as a superclass. There's no reason to include that bound explicitly.</p>\n","answer_id":65583280,"question_id":65583228},{"owner":{"profile_image":"https://www.gravatar.com/avatar/0cff99aaf31098275563ea9924cb05cf?s=256&d=identicon&r=PG","account_id":1539741,"user_type":"registered","user_id":1434678,"link":"https://stackoverflow.com/users/1434678/soroosh-sarabadani","reputation":439,"display_name":"Soroosh Sarabadani"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1609864514,"creation_date":1609864514,"body":"<p>Your class has several unknown types for Quarkus and as the result, it cannot make an object out of it.</p>\n<p>You can define producer for DaoManagers with your interested entity, then Quarkus is able to create objects.</p>\n","answer_id":65582916,"question_id":65505831},{"owner":{"profile_image":"https://i.stack.imgur.com/eR09c.jpg?s=256&g=1","account_id":13177411,"user_type":"registered","user_id":9517937,"link":"https://stackoverflow.com/users/9517937/sdindiver","reputation":501,"display_name":"sdindiver"},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":false,"last_activity_date":1609843174,"creation_date":1609843174,"body":"<p>I am giving the answer to my posted question that I found more accurate.</p>\n<pre><code>public static &lt;T&gt; void sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c) {\n        list.sort(c);\n}\n</code></pre>\n<p>and</p>\n<pre><code>public static &lt;T&gt; void sort(List&lt;? extends T&gt; list, Comparator&lt;? super T&gt; c) {\n        list.sort(c);\n}\n</code></pre>\n<p>are same. Because we are calling above methods either this way</p>\n<pre><code>ArrayList&lt;Employee&gt; list = new ArrayList&lt;&gt;();\nlist.add(new Manager(106,true));\nlist.add(new Manager(102,true));\nsort(list, (p1, p2) -&gt; \np1.getEmployeeId().compareTo(p2.getEmployeeId()));\n\n`T` argument in `sort()` will be considered as Manager in this case\n</code></pre>\n<p>or</p>\n<pre><code> ArrayList&lt;Employee&gt; list = new ArrayList&lt;&gt;();\n list.add(new Employee(106,true));\n list.add(new Employee(102,true));\n sort(list, (p1, p2) -&gt; \n p1.getEmployeeId().compareTo(p2.getEmployeeId()));\n\n`T` argument in `sort()` will be Employee in this case.\n</code></pre>\n<p>We do not gain anything writing <code>List&lt;? extends T&gt;</code> in <code>sort()</code>. A real word example if have two balls, then we can use either only one terms, first ball is bigger than second or first ball is smaller than second. Only one thing is possible either bigger or smaller\nif we have three balls, we can say, first ball is smaller than second and third ball is bigger than second, then two terms can be used smaller and bigger.</p>\n<p>We need some base <code>T</code> then we can use either  <code>? extends T</code> or  <code>? super T</code> or both for example binary search method signature that I have posted above.</p>\n<p>JDK also provided sort method with three signature also but in different way</p>\n<pre><code>public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt; implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable {\n    public ArrayList(Collection&lt;? extends E&gt; c) {\n        elementData = c.toArray();\n        if ((size = elementData.length) != 0) {\n            // c.toArray might (incorrectly) not return Object[] (see 6260652)\n            if (elementData.getClass() != Object[].class)\n                elementData = Arrays.copyOf(elementData, size, Object[].class);\n        } else {\n            // replace with empty array.\n            this.elementData = EMPTY_ELEMENTDATA;\n        }\n    }\n\n@Override\n    @SuppressWarnings(&quot;unchecked&quot;)\n    public void sort(Comparator&lt;? super E&gt; c) {\n        final int expectedModCount = modCount;\n        Arrays.sort((E[]) elementData, 0, size, c);\n        if (modCount != expectedModCount) {\n            throw new ConcurrentModificationException();\n        }\n        modCount++;\n    }\n</code></pre>\n<p>Above <code>ArrayList&lt;E&gt;</code> can be of <code>E</code> type, It can accept <code>Collection&lt;? extends E&gt; c</code> and can be sorted using <code>Comparator&lt;? super E&gt; c</code>. So as per explain we also have three balls</p>\n<ul>\n<li>E type of element It can be</li>\n<li>Collection&lt;? extends E&gt; It can accept list</li>\n<li>Comparator&lt;? super E&gt; c It can be sorted by such comparator</li>\n</ul>\n","answer_id":65577279,"question_id":65414023},{"owner":{"profile_image":"https://i.stack.imgur.com/3KaJD.jpg?s=256&g=1","account_id":461282,"user_type":"registered","user_id":1249225,"link":"https://stackoverflow.com/users/1249225/krushna","reputation":5319,"display_name":"Krushna","accept_rate":81},"content_license":"CC BY-SA 4.0","score":2,"is_accepted":true,"last_activity_date":1609779027,"creation_date":1376637528,"body":"<p>You can not do var-arg generic but you can do something like below</p>\n<pre><code>import java.util.Collection;\nimport java.util.Set;\n\npublic interface NKeyMap&lt;K, V&gt; {\n    public void clear();\n    public boolean containsKey(K... k );\n    public boolean containsValue(V value);\n    public V get(K... k);\n    public boolean isEmpty();\n    public V put(V value, K...k);\n    public V remove(V value, K... k);\n    public int size();\n    public Collection&lt;V&gt; values();\n    public Set&lt;K&gt; keys();\n}\n</code></pre>\n","answer_id":18267879,"question_id":18267714,"last_edit_date":1609779027},{"owner":{"profile_image":"https://www.gravatar.com/avatar/4c16849c5f9444a685f62cdc2a15c3ac?s=256&d=identicon&r=PG","account_id":1119690,"user_type":"registered","user_id":1108305,"link":"https://stackoverflow.com/users/1108305/m-justin","reputation":15787,"display_name":"M. Justin","accept_rate":47},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1609743949,"creation_date":1609743949,"body":"<p>In Scheme, list equivalence is based completely on the structure of the items.</p>\n<p>In Java by comparison, equality is context-dependent depending on the type of object, and may use some or all of the internal structure in its equivalence calculation.  What it means for two objects of the same type to be &quot;equal&quot; is up to the object type to determine, so long as the <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\" rel=\"nofollow noreferrer\">general contract for equals</a> is met (most notably that it forms an <a href=\"https://en.wikipedia.org/wiki/Equivalence_relation\" rel=\"nofollow noreferrer\">equivalence relation</a> with all other objects).</p>\n<p>Assuming all types used in a program have a reasonable <code>equals</code> definition, they <em>should</em> have a &quot;reliable&quot; value comparison, at least in the sense of the object oriented paradigm.</p>\n<p>Returning to the analogous Java <code>equal?</code> implementation.  It's a bit hard to piece together from the question's phrasing, but from context clues it appears that this is also attempting to operate on lists of items.  The <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/List.html#equals(java.lang.Object)\" rel=\"nofollow noreferrer\"><code>equals</code></a> method on Java's <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/List.html\" rel=\"nofollow noreferrer\"><code>List</code></a> type already implements behavior directly analogous to Scheme's <code>equals?</code> operation:</p>\n<blockquote>\n<p>Compares the specified object with this list for equality. Returns <code>true</code> if and only if the specified object is also a list, both lists have the same size, and all corresponding pairs of elements in the two lists are <em>equal</em>. (Two elements e1 and e2 are <em>equal</em> if <code>Objects.equals(e1, e2)</code>.) In other words, two lists are defined to be equal if they contain the same elements in the same order.</p>\n</blockquote>\n<p>This definition also means that recursive list structures also work in a similar manner as Scheme's <code>equals?</code> operation.</p>\n<p>Note that the <code>List</code> behavior is notably different from that of Java's array type (which you mention in your question).  Arrays in Java are a fairly low-level type, and do not support much of the typical object-oriented functionality one might expect.  Of particular note, for equality, arrays are compared by object reference rather than by a structural comparison of the items in the array.  There are ways to do sensible equality comparison on arrays using methods in the <code>Arrays</code> class (e.g. <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Arrays.html#equals(java.lang.Object%5B%5D,java.lang.Object%5B%5D)\" rel=\"nofollow noreferrer\"><code>Arrays.equals</code></a> and <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Arrays.html#deepEquals(java.lang.Object%5B%5D,java.lang.Object%5B%5D)\" rel=\"nofollow noreferrer\"><code>Arrays.deepEquals</code></a>).</p>\n<hr />\n<p>As an aside, to address your postscript about the equality of two bare <code>Object</code>s.</p>\n<pre class=\"lang-java prettyprint-override\"><code>assert !(new Object().equals(new Object()))\n</code></pre>\n<p>From an object-oriented perspective, it is sensible that two bare objects be equal only if they're the same reference.  First, as mentioned above, there is not a direct relation between an object's internal structure and its equality, so there's no <em>need</em> for them to be equal.  There is virtually no context as to what two different instances of <code>Object</code> represent from a object modeling perspective, so there's no inherent conceptual way to tell that these two objects are logically the &quot;same&quot; thing.</p>\n<hr />\n<p>In summary, assuming all the types in your list have a <em>sensible</em> version of <code>equals()</code> defined per their object's type, Java's <code>List.equals()</code> behaves directly analogously to Scheme's <code>equals?</code> operation.</p>\n","answer_id":65558844,"question_id":19051021},{"owner":{"profile_image":"https://graph.facebook.com/2006365462920236/picture?type=large","account_id":13055145,"user_type":"registered","user_id":9434244,"link":"https://stackoverflow.com/users/9434244/martin-clever","reputation":147,"display_name":"Martin Clever"},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":true,"last_activity_date":1609665056,"creation_date":1609665056,"body":"<p>As long as @JohannesKuhn doesn't post his comment as an answer:<br />\nThe solution is <code>class B&lt;T extends SomeClass, R extends SomeClass, S extends A&lt;T, R&gt;&gt;</code></p>\n","answer_id":65548194,"question_id":65541924},{"owner":{"profile_image":"https://i.stack.imgur.com/a6vMO.jpg?s=256&g=1","account_id":11119792,"user_type":"registered","user_id":8163025,"link":"https://stackoverflow.com/users/8163025/saver","reputation":2581,"display_name":"saver"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1609634511,"creation_date":1609634511,"body":"<p>The main issue is inside of <code>BasicComboBoxRenderer</code>, because that class hasn't generic parameter for <code>ListCellRenderer</code> interface, but <code>JComboBox</code> class expects generalized <code>aRenderer</code> variable, see snippet:</p>\n<pre><code>    public void setRenderer(ListCellRenderer&lt;? super E&gt; aRenderer) {\n        ListCellRenderer&lt;? super E&gt; oldRenderer = renderer;\n        renderer = aRenderer;\n        firePropertyChange( &quot;renderer&quot;, oldRenderer, renderer );\n        invalidate();\n    }\n</code></pre>\n<p>As workaround I can propose to copy all logic from <code>BasicComboBoxRenderer</code> to you own custom class and add generic type for <code>ListCellRenderer</code>, and that approcu will solve warning during compilation process.</p>\n","answer_id":65545601,"question_id":64888934},{"owner":{"profile_image":"https://lh4.googleusercontent.com/--0W1SyomlMg/AAAAAAAAAAI/AAAAAAAAAGY/w5Ja9a3U4zE/photo.jpg?sz=256","account_id":9127082,"user_type":"registered","user_id":6790326,"link":"https://stackoverflow.com/users/6790326/dorian-gray","reputation":2952,"display_name":"Dorian Gray"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1608667264,"creation_date":1608667264,"body":"<p>In the sort function, you only have two different types: The type of the list and the type of the comparator. <code>T</code> is the type of the elements in the <code>List</code>, and <code>? super T</code> is the type of the <code>Comparator</code>. You do not gain anything by adding\n<code>List&lt;? extends T&gt;</code> there.</p>\n<p>In <code>binarySearch</code> you have three types: <code>T</code>denotes the type of the <code>key</code> to be searched, <code>? extends T</code> is the type of the list and <code>? super T</code> is the type of the comparator.</p>\n","answer_id":65415114,"question_id":65414023},{"owner":{"profile_image":"https://www.gravatar.com/avatar/c17dd9cf3e2322be19639e96da9f3eb3?s=256&d=identicon&r=PG","account_id":1082858,"user_type":"registered","user_id":1079354,"link":"https://stackoverflow.com/users/1079354/makoto","reputation":104688,"display_name":"Makoto","accept_rate":93},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1608662204,"creation_date":1608662204,"body":"<p>Sorting a list only makes sense only if the list is homogeneous; if one is sorting a pile of papers, it suddenly breaks down if you introduce a whole book in the mix.</p>\n<p>Searching a list makes sense if each item is comparable to each other.  If you can define a relationship between a piece of A4 paper and a novel, then you can search between them.</p>\n","answer_id":65414091,"question_id":65414023},{"owner":{"profile_image":"https://i.stack.imgur.com/mOJf7.jpg?s=256&g=1","account_id":18536445,"user_type":"registered","user_id":13506001,"link":"https://stackoverflow.com/users/13506001/rohith-v","reputation":1099,"display_name":"Rohith V"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1606552774,"creation_date":1606552774,"body":"<p>I think you can also make use of\n<code>Collections.max(queue)</code> in case of queue</p>\n","answer_id":65047840,"question_id":40877146},{"owner":{"profile_image":"https://www.gravatar.com/avatar/23e44feadef4ec70940f7dde38bf772e?s=256&d=identicon&r=PG","account_id":2197912,"user_type":"registered","user_id":1943126,"link":"https://stackoverflow.com/users/1943126/michail-alexakis","reputation":1425,"display_name":"Michail Alexakis"},"content_license":"CC BY-SA 4.0","score":5,"is_accepted":false,"last_activity_date":1597606010,"creation_date":1597606010,"body":"<p>If you are willing to convert to an unmodifiable <code>List&lt;Object&gt;</code>, you can simply wrap your list with <code>Collections.unmodifiableList</code>. This works because this static method has a proper wildcard type <code>? extends T</code> for the element type of the wrapped list (where <code>T</code> is the type of the result list).</p>\n<p>Note that, in most cases, creating an unmodifiable view is what you <em>should</em> do, otherwise objects of different types (other than <code>String</code>) may be added in the original list (which should only hold <code>String</code>s).</p>\n","answer_id":63441108,"question_id":4288084},{"owner":{"profile_image":"https://i.stack.imgur.com/zNAXD.jpg?s=256&g=1","account_id":7666017,"user_type":"registered","user_id":5809720,"link":"https://stackoverflow.com/users/5809720/sagar-gangwal","reputation":7604,"display_name":"Sagar Gangwal"},"content_license":"CC BY-SA 4.0","score":2,"is_accepted":true,"last_activity_date":1597600350,"creation_date":1597595898,"body":"<p>You can try below code.</p>\n<p>For getting that User class you can use <strong><code>fieldElement.getEnclosingElement()</code></strong>, it will give you class name with full package name.</p>\n<p>Now if you want only name of that class you can use <strong><code>enclosingElement.getSimpleName()</code></strong>.</p>\n<p>And to get enclosedByElement you can use <a href=\"https://javadoc.io/doc/org.kohsuke.sorcerer/sorcerer-javac/latest/com/sun/tools/javac/code/Symbol.TypeSymbol.html\" rel=\"nofollow noreferrer\">TypeSymbol</a>.Simply cast fieldElement.asType() to <strong><code>Type</code></strong> and get <strong><code>tsym</code></strong> attribute.</p>\n<pre><code>        VariableElement fieldElement;\n\n        Symbol.TypeSymbol containerForEnclosingElement=((Type)fieldElement.asType()).tsym;\n        Element enclosingElement=fieldElement.getEnclosingElement();\n\n        System.out.println(&quot;containerForEnclosingElement:- &quot; +  containerForEnclosingElement);\n        System.out.println(&quot;enclosingElement:- &quot; +  enclosingElement);\n        System.out.println(&quot;enclosingElement Name:- &quot; +  enclosingElement.getSimpleName());\n        System.out.println(&quot;fieldElement without root Type:- &quot;+((Type) fieldElement.asType()).getTypeArguments().get(0));\n</code></pre>\n<p>Above code will print output as below.</p>\n<pre><code>containerForEnclosingElement:- java.util.Set\nenclosingElement:- com.example.demo.test.model.User.\nenclosingElement Name:- User\nfieldElement without root Type:- com.example.demo.test.model.User\n</code></pre>\n<p>You can also create one Utility method to get this two values.</p>\n<p>This will help you.</p>\n","answer_id":63439432,"question_id":63437899,"last_edit_date":1597600350},{"owner":{"profile_image":"https://lh5.googleusercontent.com/-gCJ9KuZ_-mA/AAAAAAAAAAI/AAAAAAAAAF8/rloa0hwh82Q/photo.jpg?sz=256","account_id":6183412,"user_type":"registered","user_id":4818195,"link":"https://stackoverflow.com/users/4818195/hatem-mohamed","reputation":220,"display_name":"Hatem Mohamed"},"content_license":"CC BY-SA 4.0","score":2,"is_accepted":false,"last_activity_date":1597435712,"creation_date":1597434966,"body":"<p>In your case, you don't need to use generics as the basic polymorphism will be sufficient</p>\n<pre><code> public String translateBar(Foo pojo){\n    //return translated string\n}\n</code></pre>\n<p>And this will solve the issue if you just want to call the <code>getFoo()</code></p>\n","answer_id":63419287,"question_id":63419194,"last_edit_date":1597435712},{"owner":{"profile_image":"https://www.gravatar.com/avatar/a1254dabbec32d7cbc502dfd2fd0438d?s=256&d=identicon&r=PG","account_id":990530,"user_type":"registered","user_id":1007991,"link":"https://stackoverflow.com/users/1007991/renato","reputation":13072,"display_name":"Renato","accept_rate":82},"content_license":"CC BY-SA 4.0","score":3,"is_accepted":true,"last_activity_date":1597435055,"creation_date":1597435055,"body":"<p>In Java, a method that accepts a certain type, say <code>Foo</code>, will accept also any sub-type of <code>Foo</code>. There's no need to use generics in such case.</p>\n<p>Here's how your code should look like:</p>\n<pre><code>public interface Foo {\n    String getFoo();\n}\n\npublic class Bar1 implements Foo {\n    final String foo = &quot;foobar&quot;;\n    @Override\n    public String getFoo(){\n        return foo;\n    }\n}\n\npublic class TranslateBar {\n    public String translateBar(Foo pojo) {\n        //return translated string\n    }\n}\n</code></pre>\n<p>Now you can call <code>translateBar</code> with any implementation of <code>Foo</code> including <code>Bar1</code>:</p>\n<pre><code>new TranslateBar().translateBar(new Bar1());\n</code></pre>\n<p>You would use generic for different cases... for example, where the type returned by the <code>getFoo</code> method depended on the implementation.</p>\n<pre><code>// the type T is generic and depends on the implementation\npublic interface Foo&lt;T&gt; {\n    T getFoo();\n}\n\npublic class Bar1 implements Foo&lt;String&gt; {\n    final String foo = &quot;foobar&quot;;\n    @Override\n    public String getFoo(){\n        return foo;\n    }\n}\n\npublic class TranslateBar {\n    public String translateBar(Foo&lt;?&gt; pojo) {\n        //return translated string\n    }\n}\n</code></pre>\n","answer_id":63419297,"question_id":63419194},{"owner":{"profile_image":"https://i.stack.imgur.com/7ghSp.jpg?s=256&g=1","account_id":238684,"user_type":"registered","user_id":507738,"link":"https://stackoverflow.com/users/507738/mc-emperor","reputation":22543,"display_name":"MC Emperor","accept_rate":71},"content_license":"CC BY-SA 4.0","score":2,"is_accepted":false,"last_activity_date":1597421664,"creation_date":1597335436,"body":"<p>I think that this is not a bug, but a consequence of type inference. OP already mentioned it. The compiler will not try to match an exact type, but <em>the most specific one</em>.</p>\n<p>Let us analyse how type inference works with the example provided by OP.</p>\n<pre><code>public static &lt;F, T&gt; Predicate&lt;F&gt; isEquals(Function&lt;F, T&gt; func, T expValue) {\n    return actual -&gt; Objects.equals(func.apply(actual), expValue);\n}\n</code></pre>\n<pre><code>Predicate&lt;String&gt; lLengthIs20 = isEquals(String::length, &quot;Whud?&quot;);\n</code></pre>\n<p>Here the target type is <code>Predicate&lt;String&gt;</code>, and according to the return type of the method, which is <code>Predicate&lt;F&gt;</code> (where <code>F</code> is a generic type), <code>F</code> is bound to a <code>String</code>. Then the method reference <code>String::length</code> is checked whether it fits into the method parameter <code>Function&lt;F, T&gt;</code>, where <code>F</code> is <code>String</code> and <code>T</code> some unbounded type. And this is important: while the method reference <code>String::length</code> looks like its target type is <code>Integer</code>, it is also compatible to <code>Object</code>. Similarly, <code>Object obj = &quot;Hello&quot;.length()</code> is valid. It is not <em>required</em> to be an <code>Integer</code>. Likewise, both <code>Function&lt;String, Object&gt; func = String::length</code> and <code>Function&lt;String, Object&gt; func = str -&gt; str.length()</code> are valid and do not emit a compiler warning.</p>\n<h2>What exactly is inference?</h2>\n<p>Inference is to defer the job of selecting the appropriate type to the compiler. You ask the compiler: &quot;Please, could you fill in appropriate types, so that it'll work?&quot; And then the compiler answers: &quot;Okay, but I follow certain rules when selecting the type.&quot;</p>\n<p>The compiler selects the most specific type. In the case of <code>isEquals(String::length, 20)</code>, both the target type of <code>String::length</code> and <code>20</code> is <code>Integer</code>, so the compiler infers it as such.</p>\n<p>However, in the case of <code>isEquals(String::length, &quot;Whud?&quot;)</code> the compiler first tries to infer <code>T</code> to an <code>Integer</code> because of the type of <code>String::length</code>, but it fails to do so because of the type of the second argument. The compiler then tries to find the closest intersection of <code>Integer</code> and <code>String</code>.</p>\n<h2>Can I aid or bypass the compiler?</h2>\n<p>Bypass? No, not really. Well, sometimes typecasting is a way of bypassing, like in the following example:</p>\n<pre><code>Object o = 23; // Runtime type is integer\nString str = (String) o; // Will throw a ClassCastException\n</code></pre>\n<p>The typecast here is a potentially unsafe operation, because <code>o</code> may or may not be a <code>String</code>. With this typecast, you say to the compiler: &quot;In this specific case, I know better than you&quot; – with the risk of getting an exception during runtime.</p>\n<p>Still, not all typecast operations are permitted:</p>\n<pre><code>Integer o = 23;\nString str = (String) o;\n// Results in a compiler error: &quot;incompatible types: Integer cannot be converted to String&quot;\n</code></pre>\n<p>But you can certainly aid the compiler.</p>\n<h3>Type witness</h3>\n<p>One option may be to <strong>use a <em>type witness</em></strong>:</p>\n<pre><code>Predicate&lt;String&gt; lLengthIs20 = YourClass.&lt;String, Integer&gt;isEquals(String::length, &quot;what?&quot;);\n</code></pre>\n<p>This code will emit a compiler error:</p>\n<blockquote>\n<p>incompatible types: String cannot be converted to Integer</p>\n</blockquote>\n<h3>Add a <code>Class&lt;T&gt;</code> parameter to <code>isEquals</code></h3>\n<p>Another option would be to <strong>add a parameter</strong> to <code>isEquals</code>:</p>\n<pre><code>public static &lt;F, T&gt; Predicate&lt;F&gt; isEquals(Class&lt;T&gt; type, Function&lt;F, T&gt; func, T expValue) {\n    return actual -&gt; Objects.equals(func.apply(actual), expValue);\n}\n</code></pre>\n<pre><code>// This will succeed:\nPredicate&lt;String&gt; lLengthIs20 = isEquals(Integer.class, String::length, 20);\n// This will fail:\nPredicate&lt;String&gt; lLengthIs20 = isEquals(Integer.class, String::length, &quot;Whud?&quot;);\n</code></pre>\n<h3>Typecasting</h3>\n<p>A third option may be <em><strong>typecasting</strong></em>. Here you cast <code>String::length</code> to a <code>Function&lt;String, Integer&gt;</code>, and now the compiler is restricted to <code>F = String, T = Integer</code>. Now the usage of <code>&quot;Whud?&quot;</code> causes trouble.</p>\n<pre><code>Predicate&lt;String&gt; predicate = isEquals((Function&lt;String, Integer&gt;) String::length, &quot;Whud?&quot;);\n</code></pre>\n","answer_id":63399216,"question_id":63384914,"last_edit_date":1597421664},{"owner":{"profile_image":"https://i.stack.imgur.com/7bZhz.png?s=256&g=1","account_id":5640884,"user_type":"registered","user_id":4465539,"link":"https://stackoverflow.com/users/4465539/deduper","reputation":1954,"display_name":"deduper","accept_rate":33},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":true,"last_activity_date":1597411987,"creation_date":1597411987,"body":"<p><em><strong>TL;DR</strong></em>: Not trying to snipe @MAnouti's points that you've earmarked for him/her. But for the sake of completeness, OP, I wanted to share what I observed in <a href=\"https://www.browxy.com#USER_307436\" rel=\"nofollow noreferrer\"><em>my attempt to reproduce your error</em></a>.</p>\n<hr />\n<blockquote>\n<p>„<em>This results in the following error:</em>“</p>\n<pre><code>Type mismatch: cannot convert from Class&lt;Integer&gt; to Integer\n</code></pre>\n</blockquote>\n<p>The original example code in your question fails to compile (<a href=\"https://www.browxy.com#USER_307436\" rel=\"nofollow noreferrer\"><em>as confirmed by my failed attempt to reproduce the same error</em></a>) with these <em>different</em> compilation errors…</p>\n<pre><code>...\nincompatible types: IntegerTransformer cannot be converted to Transformer&lt;T&gt;\n...\nincompatible types: ByteTransformer cannot be converted to Transformer&lt;T&gt;\n...\n</code></pre>\n<p>…Notice those are not the same as the error you reported in your question.</p>\n<p>And even if you did follow the advice of the other answers/comments and replaced <em><code>T</code></em> with <em><code>Class&lt;T&gt;</code></em> as the second formal parameter of your method, you would still get the above <em><code>cannot be converted to Transformer&lt;T&gt;</code></em> compilation errors.</p>\n<blockquote>\n<p>„<em>…Is there any way I can do that without modifying the generic structure of interface and factory?</em>“</p>\n</blockquote>\n<p>I have <a href=\"https://www.browxy.com#USER_307438\" rel=\"nofollow noreferrer\"><em>confirmed by a simple experiment</em></a> that this meets that criteria. <em><strong>And</strong></em> it successfully compiles and runs as expected…</p>\n<pre><code>    public &lt; T, U extends Transformer&lt; T &gt; &gt; U getTransformer( SomeEnum eNum, Class&lt; T &gt; type ){ \n    \n    switch( eNum ){ \n        case FOO:\n            return (U)new IntegerTransformer( );\n        case BAR:\n            return (U)new ByteTransformer( );\n        default:\n            throw new RuntimeException( &quot;Detected Decepticons Among Us!&quot; );\n    }\n}\n</code></pre>\n<p>…It fixes both the error you reported in your question, <em><strong>and</strong></em> the <em><code>cannot be converted to Transformer&lt;T&gt;</code></em> errors you'd get if the only thing you changed was the parameter to <em><code>Class&lt;T&gt;</code></em>.</p>\n","answer_id":63413798,"question_id":63411281},{"owner":{"profile_image":"https://lh6.googleusercontent.com/-CLisJv2LfKw/AAAAAAAAAAI/AAAAAAAAAAA/lqE6eNyd2RY/photo.jpg?sz=256","account_id":15284776,"user_type":"registered","user_id":11028099,"link":"https://stackoverflow.com/users/11028099/luis-i%c3%b1esta","reputation":401,"display_name":"Luis I&#241;esta"},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":false,"last_activity_date":1597402374,"creation_date":1597402374,"body":"<p>The signature of <code>getTransformer(final SomeEnum enum, final T type)</code> expects an actual objet of type <code>T</code>. What you want is pass a instance of <code>class</code>, so it should be:\n<code>getTransformer(final SomeEnum enum, final Class&lt;T&gt; type)</code></p>\n<p>In addition, since Java 8 there is no need for declaring such simple interfaces. Using the generic <code>Function&lt;String,T&gt;</code> would serve you perfectly.</p>\n","answer_id":63411379,"question_id":63411281},{"owner":{"profile_image":"https://www.gravatar.com/avatar/44c841338e1646af9a977f1fa0e23948?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":162699,"user_type":"registered","user_id":3788176,"link":"https://stackoverflow.com/users/3788176/andy-turner","reputation":138060,"display_name":"Andy Turner","accept_rate":54},"content_license":"CC BY-SA 4.0","score":14,"is_accepted":true,"last_activity_date":1597392756,"creation_date":1475740270,"body":"<p>Remember that <code>...</code> is just syntactic sugar for an array parameter. You can call a method with a variadic parameter <code>foo(Object...)</code> either using</p>\n<pre><code>foo(&quot;hello&quot;, 1);\n</code></pre>\n<p>or</p>\n<pre><code>foo(new Object[]{&quot;hello&quot;, 1});\n</code></pre>\n<p>since the compiler constructs the second form anyway.</p>\n<p>Because the receiver type isn't considered when the compiler infers types, it looks at <code>Arrays.asList(new Object[]{&quot;bar&quot;, 286})</code> and thinks that you mean to create a list of <code>Object</code>, not a singleton list of <code>Object[]</code>.</p>\n<p>The easiest way with your existing syntax is just to add an explicit type parameter:</p>\n<pre><code>List&lt;Object[]&gt; bar = Arrays.&lt;Object[]&gt;asList(new Object[]{&quot;bar&quot;, 286});\n</code></pre>\n<p>Adding the <code>&lt;Object[]&gt;</code> tells the compiler what T should be.</p>\n<p>Or, if you don't need the list to be mutable:</p>\n<pre><code>List&lt;Object[]&gt; bar = Collections.singletonList(new Object[]{&quot;bar&quot;, 286});\n</code></pre>\n","answer_id":39890475,"question_id":39889498,"last_edit_date":1597392756},{"owner":{"user_type":"does_not_exist","display_name":"user14089698"},"content_license":"CC BY-SA 4.0","score":5,"is_accepted":false,"last_activity_date":1597377088,"creation_date":1597317239,"body":"<p>Java does not support &quot;optional&quot; or gradual typing. You can try creating a subclass that defaults metadata to <code>null</code>, i.e. <code>NoMetadataTriple&lt;K,V&gt;</code>, or give <code>Void</code> for M instead as mentioned in the other answer.</p>\n<p>The <a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/Void.html\" rel=\"nofollow noreferrer\"><code>Void</code></a> &quot;type&quot; cannot be instantiated. It's basically <code>void</code> (the output parameter) as a <code>Class</code>.</p>\n","answer_id":63393932,"question_id":63393807,"last_edit_date":1597377088},{"owner":{"profile_image":"https://i.stack.imgur.com/7bZhz.png?s=256&g=1","account_id":5640884,"user_type":"registered","user_id":4465539,"link":"https://stackoverflow.com/users/4465539/deduper","reputation":1954,"display_name":"deduper","accept_rate":33},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1597334132,"creation_date":1597279864,"body":"<blockquote>\n<p>„<em>…is there a way for me to tell Java to not use the Object version…</em>“</p>\n</blockquote>\n<p>Yes. And the term — <em>in the context of Generics</em> — for telling Java to not use <code>Object</code> is called: „<em>Specifying a bound</em>“.</p>\n<p><a href=\"https://jdoodle.com/ia/fw\" rel=\"nofollow noreferrer\">My experiment confirmed</a> that calling the following method as <code>isEquals(String::hashCode, &quot;What the theoretical fuck!&amp;?*!?@!&quot;)</code> will produce <code>error: no suitable method found for isEquals(String::hashCode,String)</code>...</p>\n<pre><code>public static &lt;F extends String, T extends Number&gt; Predicate&lt;F&gt; isEquals(Function&lt;F, T&gt; aFunction, T aValue)\n{\n    return input -&gt; Objects.equals(aFunction.apply(input), aValue);\n}  \n</code></pre>\n<p>If you have both, the above method, and the following one in the same class, then this version is called for <code>isEquals(String::length, 20)</code>...</p>\n<pre><code>public static &lt;F&gt; Predicate&lt;F&gt; isEquals(ToIntFunction&lt;F&gt; aFunction, int aValue)\n{\n    return input -&gt; aFunction.applyAsInt(input) == aValue;\n}\n</code></pre>\n<p>...But the first one is called for <code>isEquals(String::length, Integer.valueOf(42))</code>.</p>\n<p>Click the blue <em>Execute</em> button <a href=\"https://jdoodle.com/ia/fw\" rel=\"nofollow noreferrer\"><em>in this demo</em></a> to see it working.</p>\n","answer_id":63386541,"question_id":63384914,"last_edit_date":1597334132},{"owner":{"profile_image":"https://www.gravatar.com/avatar/da698e0f6137f881e120ba96344c72a1?s=256&d=identicon&r=PG","account_id":2190376,"user_type":"registered","user_id":1937593,"link":"https://stackoverflow.com/users/1937593/paranoidandroid","reputation":533,"display_name":"paranoidAndroid"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1597333440,"creation_date":1597333440,"body":"<p>As far as I'm concerned, this smells like a real java compiler bug to me..Compiler should be able to infer arguments without assignment to a variable, since we have <code>Function&lt;F, T&gt; aInMapFunction</code> which should enforce T, as the compiler &quot;knows&quot; that <code>String::length</code> returns an Integer.\nHowever I came up with a sort of solution for you:</p>\n<pre><code>public class PredicateBuilder&lt;F,T&gt;\n{\n    public Predicate&lt;F&gt; isEquals(\n            Function&lt;F, T&gt; aInMapFunction, T aInExpectedValue)\n    {\n        return aInActual -&gt; Objects.equals(\n                aInMapFunction.apply(aInActual), aInExpectedValue);\n    }\n}\n</code></pre>\n<p>and usage:</p>\n<pre><code>new PredicateBuilder&lt;String, Integer&gt;().isEquals(String::length, 5);\n</code></pre>\n<p>Won't compile with other argument types, won't compile either if you try this:</p>\n<pre><code>new PredicateBuilder&lt;&gt;().isEquals(String::length, 5);\n</code></pre>\n","answer_id":63398639,"question_id":63384914},{"owner":{"profile_image":"https://www.gravatar.com/avatar/9e462b11b46069ee682e1ce8bc5f5825?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":1063012,"user_type":"registered","user_id":1064245,"link":"https://stackoverflow.com/users/1064245/m-a","reputation":71986,"display_name":"M A","accept_rate":82},"content_license":"CC BY-SA 4.0","score":5,"is_accepted":false,"last_activity_date":1597317162,"creation_date":1597317162,"body":"<p>I would argue that if you determine that the third parameter is not present (as intended by using <code>null</code>), then it's no longer a triplet, but a pair. Just keep things simple and use a <code>Pair</code> class instead.</p>\n","answer_id":63393915,"question_id":63393807},{"owner":{"profile_image":"https://i.stack.imgur.com/H3QRx.jpg?s=256&g=1","account_id":5644665,"user_type":"registered","user_id":4467208,"link":"https://stackoverflow.com/users/4467208/murat-karag%c3%b6z","reputation":35951,"display_name":"Murat Karag&#246;z","accept_rate":51},"content_license":"CC BY-SA 4.0","score":9,"is_accepted":false,"last_activity_date":1597316932,"creation_date":1597316932,"body":"<p>You can use <code>Void</code> e.g.</p>\n<pre><code>Triplet&lt;Integer, String, Void&gt; t2 = new Triplet&lt;&gt;();\n</code></pre>\n","answer_id":63393854,"question_id":63393807},{"owner":{"profile_image":"https://i.stack.imgur.com/fYFFP.jpg?s=256&g=1","account_id":3306670,"user_type":"registered","user_id":2781271,"link":"https://stackoverflow.com/users/2781271/crosp","reputation":4539,"display_name":"CROSP","accept_rate":58},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":true,"last_activity_date":1578325414,"creation_date":1449239905,"body":"<p>I end up with following solution. It is not as good as I wanted, but it works and better than duplicating code.    </p>\n\n<p>My base request class.</p>\n\n<pre><code>public abstract class BaseGetRequest&lt;L extends List&lt;T&gt;, T, V&gt; extends RetrofitSpiceRequest&lt;L, V&gt; implements FilterableRequest {\n    // Context\n    protected Context mContext;\n    // Filter used in request and in queries\n    protected Map&lt;Property, String&gt; mFilterMap;\n    // Session provided Singletone\n    protected DaoSessionProvider mSessionProvider;\n\n    public BaseGetRequest(Class&lt;L&gt; clazz, Class&lt;V&gt; retrofitedInterfaceClass, Context context, Map&lt;Property, String&gt; filterMap) {\n        super(clazz, retrofitedInterfaceClass);\n        mContext = context;\n        mFilterMap = filterMap;\n        mSessionProvider = ((DaoSessionProvider) mContext.getApplicationContext());\n        // TODO determine required retry count\n        setRetryPolicy(new RetryPolicy() {\n            @Override\n            public int getRetryCount() {\n                return 0;\n            }\n\n            @Override\n            public void retry(SpiceException e) {\n\n            }\n\n            @Override\n            public long getDelayBeforeRetry() {\n                return 0;\n            }\n        });\n    }\n\n    protected WhereCondition[] getWhereConditions() {\n        return QueryUtils.convertPropertyMapToConditionalArray(mFilterMap);\n    }\n\n    public BaseGetRequestV2(Class&lt;L&gt; clazz, Class&lt;V&gt; retrofitedInterfaceClass, Context context) {\n        this(clazz, retrofitedInterfaceClass, context, null);\n    }\n\n    public abstract AbstractDao&lt;T, Long&gt; getDao();\n\n    public abstract L createDataList(List&lt;T&gt; list);\n\n    public L getCachedData() {\n        if (mFilterMap != null &amp;&amp; mFilterMap.size() &gt; 0) {\n            WhereCondition[] whereConditions = getWhereConditions();\n            return createDataList(getDao().queryBuilder().where(whereConditions[0], Arrays.copyOfRange(whereConditions, 1, whereConditions.length)).list());\n        } else {\n            return createDataList(getDao().loadAll());\n        }\n    }\n\n    public abstract L getData();\n\n    @Override\n    public Map&lt;Property, String&gt; getFilterMap() {\n        return mFilterMap;\n    }\n\n    public Map&lt;String, String&gt; getStringMap() {\n        return QueryUtils.convertPropertyMapToString(mFilterMap);\n    }\n\n    @Override\n    public L loadDataFromNetwork() throws Exception {\n        L receivedData = null;\n        try {\n            receivedData = getData();\n            WhereCondition[] conditions = getWhereConditions();\n            getDao().queryBuilder().where(conditions[0],Arrays.copyOfRange(conditions, 1, conditions.length)).buildDelete().executeDeleteWithoutDetachingEntities();\n            getDao().insertOrReplaceInTx(receivedData);\n        } catch (Exception ex) {\n            receivedData = getCachedData();\n        }\n        return receivedData;\n    }\n}\n</code></pre>\n\n<p>And I can extend this class like so:   </p>\n\n<pre><code>public class NewsRequest extends BaseGetRequest&lt;NewsArticle.List, NewsArticle, API&gt; {\n\n    public static final String TARGET_URL = \"/news\";\n    NewsArticleDao mNewsArticleDao;\n\n    public NewsRequest(Context context) {\n        this(context, null);\n    }\n\n    public NewsRequest(Context context, Map&lt;Property, String&gt; filterMap) {\n        super(NewsArticle.List.class, API.class, context, filterMap);\n        mNewsArticleDao = mSessionProvider.getDaoSession().getNewsArticleDao();\n    }\n\n    @Override\n    public AbstractDao&lt;NewsArticle, Long&gt; getDao() {\n        return mNewsArticleDao;\n    }\n\n    @Override\n    public NewsArticle.List createDataList(List&lt;NewsArticle&gt; list) {\n       return new NewsArticle.List(list);\n    }\n\n    @Override\n    public NewsArticle.List getData() {\n        return getService().getNews(getStringMap());\n    }\n}\n</code></pre>\n","answer_id":34090759,"question_id":33754844,"last_edit_date":1578325414},{"owner":{"profile_image":"https://www.gravatar.com/avatar/2f0d9dec16bae1e06552af55ddefc11f?s=256&d=identicon&r=PG","account_id":277416,"user_type":"registered","user_id":571407,"link":"https://stackoverflow.com/users/571407/jb-nizet","reputation":681888,"display_name":"JB Nizet","accept_rate":100},"content_license":"CC BY-SA 4.0","score":2,"is_accepted":true,"last_activity_date":1576332781,"creation_date":1576332781,"body":"<p>Make your base class generic (with generic type T), and make <code>show()</code> accept a <code>Consumer&lt;T&gt;</code> (or a <code>Consumer&lt;? super T&gt;</code>. Make the subclass extend <code>BaseClass&lt;Protection&gt;</code>.</p>\n\n<pre><code>class BaseClass&lt;T&gt; {\n    public void show(Consumer&lt;T&gt; validationHandler) { //  or Consumer&lt;? super T&gt;\n    }\n}\n\nclass SubClass extends BaseClass&lt;Protection&gt; {\n    @Override\n    public void show(Consumer&lt;Protection&gt; validationHandler) { //  or Consumer&lt;? super Protection&gt;\n        super.show(validationHandler);\n    }\n}\n\nclass Protection {}\n</code></pre>\n","answer_id":59335900,"question_id":59335819},{"owner":{"profile_image":"https://www.gravatar.com/avatar/7ffdb6cd7dee86394ef625ad9c1d2c93?s=256&d=identicon&r=PG","account_id":9035,"user_type":"registered","user_id":16513,"link":"https://stackoverflow.com/users/16513/jjohn","reputation":9796,"display_name":"jjohn"},"content_license":"CC BY-SA 4.0","score":107,"is_accepted":false,"last_activity_date":1565228778,"creation_date":1233193952,"body":"<p>As the other posts have noted, you are asking about a Java feature called generics.  In C++, this is called templates.  This feature in Java is usually easier to work with than the that found in C++.</p>\n\n<p>Let me answer your questions functionally (if that's not a naughty word for OO discussions).</p>\n\n<p>Before generics, there were concrete classes like Vector.  </p>\n\n<pre><code>Vector V = new Vector();\n</code></pre>\n\n<p>Vectors hold any object you give them.  </p>\n\n<pre><code>V.add(\"This is an element\");\nV.add(new Integer(2));\nv.add(new Hashtable());\n</code></pre>\n\n<p>They do this by casting all values given to it into an Object (the root of all Java classes).  When you attempt to retrieve the values stored in your Vector, you need to cast the value back into the <em>original</em> class (if you want to do anything meaningful with it).</p>\n\n<pre><code>String s = (String) v.get(0);\nInteger i = (Integer) v.get(1);\nHashtable h = (Hashtable) v.get(2);\n</code></pre>\n\n<p>Casting gets old fast.  More than that, the compiler complains to you about unchecked casts.   The most urgent problem with casting like this is that consumers of your Vector have to know the classes of its values at <em>compile time</em> in order to cast correctly.  In cases where the producer of the Vector and the consumer of the same are completely isolated from each other (think RPC messages), this can be a fatal issue. </p>\n\n<p>Enter generics.  Generics attempt to create strongly typed classes to do generic operations. </p>\n\n<pre><code>ArrayList&lt;String&gt; aList = new ArrayList&lt;String&gt;();\naList.add(\"One\");\nString element = aList.get(0); // no cast needed\nSystem.out.println(\"Got one: \" + element); \n</code></pre>\n\n<p>The <em>Design Patterns</em> book encourages the reader to think in terms of contracts, not concrete types. There is wisdom (and code re-use) in divorcing variables from their implementing class.</p>\n\n<p>With this in mind, you might think that all implementations List objects should do the same set of things: <code>add()</code>, <code>get()</code>, <code>size()</code>, etc.  With a little reflection, you can imagine many implementations of List operations that obey the List contract in various ways (e.g. <code>ArrayList</code>).  However, the type of data these objects deal with is orthogonal to the actions performed on them.</p>\n\n<p>Put it all together and you'll see the following kinds of code frequently:</p>\n\n<pre><code>List&lt;String&gt; L = new ArrayList&lt;String&gt;();\n</code></pre>\n\n<p>You should read that as \"L is a kind of List that deals with String objects\".  When you start dealing with Factory classes, it is critical to deal with contracts rather than specific implementations.  Factories produce objects of various types at runtime.  </p>\n\n<p>Using generics is pretty easy (most of the time).  </p>\n\n<p>One day you may decide you want to implement your own generic class.  Perhaps you want to write a new database abstraction interface that elides the differencesbetween various data stores.  When you define that generic class, you will use <code>&lt;t&gt;</code> as a placeholder for the kind of object that will be manipulated by the methods.</p>\n\n<p>If you are still confused, use the generic classes for List until you are comfortable.  Later, you can dive into the implementation with a bit more confidence.  Or you can look at the source code for the various List classes that ship with the JRE.  Open source is great that way.</p>\n\n<p>Have a look at the Oracle/Sun <a href=\"http://www.oracle.com/technetwork/articles/javase/generics-136597.html\" rel=\"noreferrer\">docs about generics</a>.\nCheers.</p>\n","answer_id":490225,"question_id":490091,"last_edit_date":1565228778},{"owner":{"profile_image":"https://i.stack.imgur.com/9bcVI.jpg?s=256&g=1","account_id":14963506,"user_type":"registered","user_id":10802531,"link":"https://stackoverflow.com/users/10802531/mosayeb-masoumi","reputation":513,"display_name":"Mosayeb Masoumi"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1562528610,"creation_date":1562528610,"body":"<h2>model.class</h2>\n\n<p>public class Model {</p>\n\n<pre><code>private List&lt;String&gt; stringList = new ArrayList&lt;&gt;();\n\npublic List&lt;String&gt; getStringList() {\n    return stringList;\n}\n\npublic void setStringList(List&lt;String&gt; stringList) {\n    this.stringList = stringList;\n}\n</code></pre>\n\n<h2>}</h2>\n\n<h2>MainActivity</h2>\n\n<p>public class MainActivity extends AppCompatActivity {</p>\n\n<pre><code>Model model = new Model();\nSpinner spinner;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\n    spinner=findViewById(R.id.spinner);\n\n    List&lt;String&gt; itemList = new ArrayList&lt;String&gt;();\n    itemList.add(\"item1\");\n    itemList.add(\"item2\");\n    itemList.add(\"item3\");\n\n\n   model.setStringList(itemList);\n\n\n    ArrayAdapter&lt;String&gt; dataAdapter = new ArrayAdapter&lt;String&gt;(this, android.R.layout.simple_spinner_item, model.getStringList());\n    dataAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n\n    spinner.setAdapter(dataAdapter);\n\n}\n</code></pre>\n\n<p>}</p>\n","answer_id":56925557,"question_id":4288084},{"owner":{"profile_image":"https://lh5.googleusercontent.com/-Jz13IVvb0TQ/AAAAAAAAAAI/AAAAAAAAAAA/APUIFaM7cVAzDpHSI9CDxjyRWoumzVxyoA/mo/photo.jpg?sz=256","account_id":14385234,"user_type":"registered","user_id":10391432,"link":"https://stackoverflow.com/users/10391432/ale%d1%87","reputation":85,"display_name":"Aleч"},"content_license":"CC BY-SA 4.0","score":5,"is_accepted":false,"last_activity_date":1537447650,"creation_date":1537447650,"body":"<p>Just point compiler the proper version of generic Comparator with\n<code>(Comparator&lt;String&gt;)</code></p>\n\n<p>So the answer will be </p>\n\n<p><code>sort(list, (Comparator&lt;String&gt;)(a, b) -&gt; a.compareTo(b));</code></p>\n","answer_id":52425521,"question_id":22588518},{"owner":{"profile_image":"https://www.gravatar.com/avatar/49aa114f503078d86733fba209b753b0?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":4386848,"user_type":"registered","user_id":3576723,"link":"https://stackoverflow.com/users/3576723/iconfly","reputation":158,"display_name":"iconfly"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1534593247,"creation_date":1534593247,"body":"<p>You mean something like this?:</p>\n\n<pre><code>&lt;T,S&gt;(T t, S s)-&gt;...\n</code></pre>\n\n<p>Of what type is this lambda? You couldn't express that in Java and therefore cannot compose this expression in a function application and expressions have to be composable.</p>\n\n<p>For this need to be work you would need support for <a href=\"https://prime.haskell.org/wiki/Rank2Types\" rel=\"nofollow noreferrer\">Rank2 Types</a> in Java.</p>\n\n<p>Methods are allowed to be generic but therefore you couldn't use them as expressions. They can, however be reduced to lambda expression by specializing all necessary generic types before you can pass them: <code>ClassName::&lt;TypeName&gt;methodName</code> </p>\n","answer_id":51908366,"question_id":22588518},{"owner":{"profile_image":"https://www.gravatar.com/avatar/7342b1a54fabea2e83217791500597b0?s=256&d=identicon&r=PG","account_id":873510,"user_type":"registered","user_id":923837,"link":"https://stackoverflow.com/users/923837/eric-lindauer","reputation":1813,"display_name":"Eric Lindauer","accept_rate":90},"content_license":"CC BY-SA 3.0","score":16,"is_accepted":false,"last_activity_date":1503581914,"creation_date":1331339605,"body":"<p>To add to the already good answers here:</p>\n\n<p><strong>Method arguments:</strong></p>\n\n<p><code>List&lt;? extends Foo&gt;</code></p>\n\n<p>good choice if you don't intend to alter the list, and only care that everything in the list is assignable to type 'Foo'.  This way, the caller can pass in a List&lt;FooSubclass&gt; and your method works. Usually the best choice.</p>\n\n<p><code>List&lt;Foo&gt;</code></p>\n\n<p>good choice if you intend to add Foo objects to the list in your method.  The caller may not pass in a List&lt;FooSubclass&gt;, as you intend to add a Foo to the List.</p>\n\n<p><code>List&lt;? super Foo&gt;</code></p>\n\n<p>good choice if you intend to add Foo objects to the list, and it's not important what else is in the list (ie, you are ok getting a List&lt;Object&gt; that contains a 'Dog' that has nothing to do with Foo).</p>\n\n<p><strong>Method return values</strong></p>\n\n<p>just like method arguments, but with the benefits reversed.  </p>\n\n<p><code>List&lt;? extends Foo&gt;</code> </p>\n\n<p>Guarantees that everything in the returned List has type 'Foo'.  It might be List&lt;FooSubclass&gt; though.  Caller cannot add to the List.  This is your go-to choice and the most common case by far.</p>\n\n<p><code>List&lt;Foo&gt;</code></p>\n\n<p>Just like List&lt;? extends Foo&gt; but also allows the caller to add to the List.  Less common.</p>\n\n<p><code>List&lt;? super Foo&gt;</code></p>\n\n<p>allows the caller to add Foo objects to the List, but does not guarantee what will be returned from list.get(0)... it could be anything from Foo to Object.  The only guarantee is that this won't be a list of 'Dog' or some other choice that would prevent list.add(foo) from being legal.  Very rare use case.</p>\n\n<p>I hope that helps.  Good luck!</p>\n\n<p>ps. To sum up... two questions... </p>\n\n<blockquote>\n  <p>do you need to add to the List?  Do you care what is in the list?</p>\n  \n  <p>yes yes - use List&lt;Foo&gt;.</p>\n  \n  <p>yes no - use List&lt;? super Foo&gt;.</p>\n  \n  <p>no yes - use &lt;? extends Foo&gt; --- most common.</p>\n  \n  <p>no no - use &lt;?&gt;.</p>\n</blockquote>\n","answer_id":9642824,"question_id":490091,"last_edit_date":1503581914},{"owner":{"profile_image":"https://lh6.googleusercontent.com/-KU9_wg3JofI/AAAAAAAAAAI/AAAAAAAAAfw/pczsB09dPnk/photo.jpg?sz=256","account_id":10669087,"user_type":"registered","user_id":7854661,"link":"https://stackoverflow.com/users/7854661/meepo","reputation":368,"display_name":"Meepo","accept_rate":100},"content_license":"CC BY-SA 3.0","score":1,"is_accepted":false,"last_activity_date":1492061810,"creation_date":1492061810,"body":"<p>I'm taking a computer science class, and we aren't allowed to use the for each loop. I'm not sure if it's the same with you. Note that the for each loop kind of defeats the purpose of a Queue since you want to only be handling the front and end of a queue. In my class specifically, we also want to have the queue be at it's original state before it was passed into the method without using an extra auxiliary data structure. Here's how I would go about it on a test:</p>\n\n<pre><code>public E findMaxQueueElement(Queue&lt;e&gt; queue) { //my test would ask me to return the max value\n    E max = queue.remove();\n    queue.add(max); //add it back to the end\n    for(int i=0; i&lt;queue.size()-1; i++) {\n        E current = queue.remove();\n        if (current.compareTo(max) &gt; 0) {\n            max = current;\n        }\n        queue.add(current);\n    }\n    return max;\n}\n</code></pre>\n\n<p>With the limitations I provided, this should work. I hope this helps.</p>\n","answer_id":43384296,"question_id":40877146},{"owner":{"profile_image":"https://www.gravatar.com/avatar/a42f8ff287eb5abf432ce696bf7c653b?s=256&d=identicon&r=PG","account_id":115767,"user_type":"registered","user_id":303810,"link":"https://stackoverflow.com/users/303810/lexicore","reputation":42976,"display_name":"lexicore","accept_rate":84},"content_license":"CC BY-SA 3.0","score":0,"is_accepted":false,"last_activity_date":1480460689,"creation_date":1480460689,"body":"<p>Unless the queue is not some special sorted queue like <code>PriorityQueue</code>, from the algorithmic point of view there is no better way. Since the queue does not have any intrinsic sorting properties, you have to check all the elements of the queue before you find one.</p>\n\n<p>The code is more or less OK. It will fail if the queue contains <code>null</code>. This is normally not the case, but may happen.<br>\nThe <code>MaxQueueElement</code> construct is somewhat strange.</p>\n","answer_id":40877414,"question_id":40877146},{"owner":{"profile_image":"https://i.stack.imgur.com/Mo0at.jpg?s=256&g=1","account_id":1135699,"user_type":"registered","user_id":1120793,"link":"https://stackoverflow.com/users/1120793/darshan-mehta","reputation":30287,"display_name":"Darshan Mehta","accept_rate":35},"content_license":"CC BY-SA 3.0","score":0,"is_accepted":false,"last_activity_date":1480460464,"creation_date":1480460464,"body":"<p>You can use Java 8's stream to sort the Queue, it internally uses the same algorithm but will result in less noisy code, e.g.:</p>\n\n<pre><code>public void MaxQueueElement(Queue&lt;E&gt; queue){\n    Optional&lt;E&gt; max = queue.stream()\n        .max(Comparable::compareTo);\n\n    if(max.isPresent()){\n        System.out.println(max.get());\n    }\n}\n</code></pre>\n\n<p>Another approach would be to use <code>PriorityQueue</code> with comparator and get the first element from it. e.g.:</p>\n\n<pre><code>public void MaxQueueElement2(Queue&lt;E&gt; queue){\n    PriorityQueue&lt;E&gt; pQueue = new PriorityQueue&lt;&gt;((E e1, E e2)-&gt;e1.compareTo(e2));\n    pQueue.addAll(queue);\n    System.out.println(pQueue.peek());\n\n}\n</code></pre>\n","answer_id":40877364,"question_id":40877146},{"owner":{"profile_image":"https://www.gravatar.com/avatar/44c841338e1646af9a977f1fa0e23948?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":162699,"user_type":"registered","user_id":3788176,"link":"https://stackoverflow.com/users/3788176/andy-turner","reputation":138060,"display_name":"Andy Turner","accept_rate":54},"content_license":"CC BY-SA 3.0","score":1,"is_accepted":false,"last_activity_date":1480460237,"creation_date":1480459864,"body":"<p>The only way to access all elements in a <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/Queue.html\" rel=\"nofollow noreferrer\"><code>Queue</code></a> is to use the <code>iterator()</code> method - you can't (generally) access the elements by index (as in, some implementations might, but <code>Queue</code> doesn't inherently).</p>\n\n<p>As such, all you can do is to iterate the elements one at a time, storing the current maximum element. This is exactly what you're doing here. </p>\n\n<p>There is nothing wrong with your algorithm - but the way you've implemented it could be improved:</p>\n\n<ul>\n<li>Don't do this in the constructor of a class - you don't need to construct a new instance of anything, as the maximum value already exists. Do it in a (static) method.</li>\n<li>Don't print out the result - that's of no use to man or beast. Return it to the caller.</li>\n<li>Handle the cases where the queue is empty and may contain nulls. (Look at the Javadoc of <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#max(java.util.Collection)\" rel=\"nofollow noreferrer\"><code>Collections.max</code></a> for ideas)</li>\n</ul>\n","answer_id":40877245,"question_id":40877146,"last_edit_date":1480460237},{"owner":{"profile_image":"https://i.stack.imgur.com/t2hoD.jpg?s=256&g=1","account_id":3211603,"user_type":"registered","user_id":2711488,"link":"https://stackoverflow.com/users/2711488/holger","reputation":289317,"display_name":"Holger"},"content_license":"CC BY-SA 3.0","score":4,"is_accepted":false,"last_activity_date":1475745979,"creation_date":1475745979,"body":"<p>The problem is that <code>Arrays.asList</code> is a varargs method which technically receives an array containing the arguments and due to compatibility with pre-generics code still accepts an array instead of an argument list. When passing a single array, the call is ambiguous and will be handled like a pre-varargs method invocation.</p>\n\n<p>The problem disappears when you have more than one argument:</p>\n\n<pre><code>List&lt;Object[]&gt; bar = Arrays.asList(new Object[]{\"bar\", 286}, new Object[]{\"baz\", 123});\n</code></pre>\n\n<p>If you have only one argument you can aid the compiler by inserting an explicit list element type:</p>\n\n<pre><code>List&lt;Object[]&gt; bar = Arrays.&lt;Object[]&gt;asList(new Object[]{\"bar\", 286});\n</code></pre>\n\n<p>Alternatively, you can use</p>\n\n<pre><code>List&lt;Object[]&gt; bar = Collections.singletonList(new Object[]{\"bar\", 286});\n</code></pre>\n\n<p>to create an immutable list of size one. Note that this differs from <code>Arrays.asList</code>, as the latter returns a list of fixed size but still mutable via <code>set</code>.</p>\n","answer_id":39892304,"question_id":39889498},{"owner":{"profile_image":"https://i.stack.imgur.com/EPKBc.jpg?s=256&g=1","account_id":3825349,"user_type":"registered","user_id":3172288,"link":"https://stackoverflow.com/users/3172288/george-cristian","reputation":59,"display_name":"George Cristian","accept_rate":75},"content_license":"CC BY-SA 3.0","score":1,"is_accepted":false,"last_activity_date":1475739751,"creation_date":1475739751,"body":"<p>When you use <code>List&lt;Object[]&gt; bar = Arrays.asList(new Object[]{\"bar\", 286});</code> you actually have a two dimensional Array and you cand resolve that problem by doing <code>List&lt;Object[]&gt; bar = Arrays.asList(new Object[][]{new Object[]{\"bar\",\"asd\",123}});\n</code></p>\n","answer_id":39890306,"question_id":39889498},{"owner":{"profile_image":"https://www.gravatar.com/avatar/35dbc3b24ca0fe1e2ea162b0648440aa?s=256&d=identicon&r=PG","account_id":4989128,"user_type":"registered","user_id":4011890,"link":"https://stackoverflow.com/users/4011890/noixes","reputation":1168,"display_name":"Noixes"},"content_license":"CC BY-SA 3.0","score":1,"is_accepted":false,"last_activity_date":1475739263,"creation_date":1475739263,"body":"<p>Your call:</p>\n\n<pre><code>Arrays.asList(new Object[]{\"bar\", 286});\n</code></pre>\n\n<p>creates a list out of the <code>Object[]</code>. So the data is convertet into a new <code>List&lt;Object&gt;</code>.</p>\n\n<p>So <code>Arrays.asList(new Object[]{\"bar\", 286}).get(0);</code> will return \"bar\".</p>\n\n<p>In this call:</p>\n\n<pre><code>List&lt;Object[]&gt; foo = new ArrayList&lt;&gt;();\nfoo.add(new Object[]{816, \"foo\", 2.6});\n</code></pre>\n\n<p>you are creating a <code>List&lt;Object[]&gt;</code> (2Dimensional) and add one element after it: <code>foo.add(..);</code>.\nTherefore you are adding one element consisting of an <code>Object[]</code>.\nif you now call <code>foo.get(0);</code> you will get a <code>Object[]</code> consisting of:\n816, \"foo\", 2.6</p>\n\n<p>I think you wanted to do:</p>\n\n<pre><code>Object[] oa = new Object[]{\"\"};\nObject[] ob = new Object[]{\"\"};\nList&lt;Object[]&gt; list = Arrays.asList(oa, ob);\n</code></pre>\n\n<p>If you have questions, feel free to ask me :)</p>\n","answer_id":39890152,"question_id":39889498},{"owner":{"profile_image":"https://i.stack.imgur.com/IF9uS.png?s=256&g=1","account_id":1924671,"user_type":"registered","user_id":1735406,"link":"https://stackoverflow.com/users/1735406/maroun","reputation":94541,"display_name":"Maroun","accept_rate":95},"content_license":"CC BY-SA 3.0","score":2,"is_accepted":false,"last_activity_date":1475737738,"creation_date":1475737738,"body":"<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#asList-T...-\" rel=\"nofollow\"><code>Arrays#asList</code></a> signature:</p>\n\n<pre><code>public static &lt;T&gt; List&lt;T&gt; asList(T... a)\n</code></pre>\n\n<p>The return type is <code>List&lt;T&gt;</code>. Now you should ask yourself what is <code>T</code>?</p>\n\n<p><code>T</code> is <code>Object</code>, so the return type will be <code>List&lt;Object&gt;</code>, and not <code>List&lt;Object[]&gt;</code>.</p>\n","answer_id":39889662,"question_id":39889498},{"owner":{"profile_image":"https://www.gravatar.com/avatar/22b05e50077230ba919b240af4bc13cd?s=256&d=identicon&r=PG","account_id":43861,"user_type":"registered","user_id":128397,"link":"https://stackoverflow.com/users/128397/daniel-pryden","reputation":59786,"display_name":"Daniel Pryden","accept_rate":82},"content_license":"CC BY-SA 3.0","score":7,"is_accepted":false,"last_activity_date":1475737380,"creation_date":1475737380,"body":"<p>If your list only has one element in it, <code>Collections.singletonList(new Object[] {...})</code> is a better choice, as it avoids varargs and makes the behavior more obvious at the call site.</p>\n","answer_id":39889558,"question_id":39889498},{"owner":{"profile_image":"https://i.stack.imgur.com/jXcg4.png?s=256&g=1","account_id":1263831,"user_type":"registered","user_id":1221571,"link":"https://stackoverflow.com/users/1221571/eran","reputation":388998,"display_name":"Eran","accept_rate":67},"content_license":"CC BY-SA 3.0","score":13,"is_accepted":false,"last_activity_date":1475737309,"creation_date":1475737309,"body":"<p>When you pass an array of reference types to <code>Arrays.asList</code> you get a <code>List</code> of that reference type.</p>\n\n<p>Therefore <code>Arrays.asList(new Object[]{\"bar\", 286})</code> returns a <code>List&lt;Object&gt;</code>, not a <code>List&lt;Object[]&gt;</code>.</p>\n","answer_id":39889542,"question_id":39889498},{"owner":{"profile_image":"https://i.stack.imgur.com/gX53v.jpg?s=256&g=1","account_id":1257650,"user_type":"registered","user_id":1216775,"link":"https://stackoverflow.com/users/1216775/akhil-mittal","reputation":23489,"display_name":"akhil_mittal","accept_rate":54},"content_license":"CC BY-SA 3.0","score":6,"is_accepted":false,"last_activity_date":1469773660,"creation_date":1445925085,"body":"<p>I will try to answer this in detail. Before generics we were having only <code>List</code> (a raw list) and it can hold almost anything we can think of.</p>\n\n<pre><code>List rawList = new ArrayList();\nrawList.add(\"String Item\");\nrawList.add(new Car(\"VW\"));\nrawList.add(new Runnable() {\n            @Override\n            public void run() {\n               // do some work.\n            }\n        });\n</code></pre>\n\n<p>The major problem with the raw list is when we want to get any element out of such list it can only guarantee that it would be <code>Object</code> and for that reason we need to use casting as:</p>\n\n<pre><code>   Object item = rawList.get(0); // we get object without casting.\n   String sameItem = (String) rawList.get(0); // we can use casting which may fail at runtime.\n</code></pre>\n\n<p>So conclusion is a <code>List</code> can store Object (almost everything is Object in Java) and always returns an Object.</p>\n\n<h2>Generics</h2>\n\n<p>Now lets talk about generics. Consider the following example:</p>\n\n<pre><code>List&lt;String&gt; stringsList = new ArrayList&lt;&gt;();\nstringsList.add(\"Apple\");\nstringsList.add(\"Ball\");\nstringsList.add(new Car(\"Fiat\")); //error\nString stringItem = stringsList.get(0);\n</code></pre>\n\n<p>In the above case we cannot insert anything other than <code>String</code> in <code>stringsList</code> as Java compiler applies strong type checking to generic code and issues errors if the code violates type safety. And we get error when we try to insert a <code>Car</code> instance in it. Also it eliminates cast as you can check when we <code>invoke</code> get method. Check this link for understanding <a href=\"https://docs.oracle.com/javase/tutorial/java/generics/why.html\" rel=\"nofollow noreferrer\">why we should use generics</a>.</p>\n\n<h2><code>List&lt;Object&gt;</code></h2>\n\n<p>If you read about type erasure then you will understand that <code>List&lt;String&gt;, List&lt;Long&gt;, List&lt;Animal&gt;</code> etc. will be having different static types at compile time but will have same dynamic type <code>List</code> at run time.</p>\n\n<p>If we have <code>List&lt;Object&gt;</code> then it can store only <code>Object</code> in it and almost everything is <code>Object</code> in Java. So we can have:</p>\n\n<pre><code> List&lt;Object&gt; objectList = new ArrayList&lt;Object&gt;();\n objectList.add(\"String Item\");\n objectList.add(new Car(\"VW\"));\n objectList.add(new Runnable() {\n        @Override\n        public void run() {\n\n        }\n });\n Object item = objectList.get(0); // we get object without casting as list contains Object\n String sameItem = (String) objectList.get(0); // we can use casting which may fail at runtime.\n</code></pre>\n\n<p><strong>It seems <code>List&lt;Object&gt;</code> and <code>List</code> are same but actually they are not.</strong> Consider the following case:</p>\n\n<pre><code>List&lt;String&gt; tempStringList = new ArrayList&lt;&gt;();\nrawList = tempStringList; // Ok as we can assign any list to raw list.\nobjectList = tempStringList; // error as List&lt;String&gt; is not subtype of List&lt;Obejct&gt; becuase generics are not convariant.\n</code></pre>\n\n<p>You can see we can assign any list to raw list and major reason for that is to allow backward compatibility. Also <code>List&lt;String&gt;</code> will be converted to <code>List</code> at run time due to type erasure and assignment will be fine anyways.</p>\n\n<p>But <code>List&lt;Object&gt;</code> means it can only refer to a list of objects and can also store objects only. Even though <code>String</code> is subtype of <code>Object</code> we cannot assign <code>List&lt;String&gt;</code> to <code>List&lt;Object&gt;</code> as generics are not covariant like arrays. They are invariant. Also check this <a href=\"https://docs.oracle.com/javase/tutorial/java/generics/inheritance.html\" rel=\"nofollow noreferrer\">link</a> for more. Also check the difference between <code>List</code> and <code>List&lt;Object&gt;</code> in this <a href=\"https://stackoverflow.com/questions/6783316/list-vs-listobject\">question</a>.</p>\n\n<h2><code>List&lt;?&gt;</code></h2>\n\n<p>Now we are left with <code>List&lt;?&gt;</code> which basically means list of unknown type and can refer to any list. </p>\n\n<pre><code>List&lt;?&gt; crazyList = new ArrayList&lt;String&gt;();\n List&lt;String&gt; stringsList = new ArrayList&lt;&gt;();\n stringsList.add(\"Apple\");\n stringsList.add(\"Ball\");\n crazyList = stringsList; // fine\n</code></pre>\n\n<p>The character <code>?</code> is known as wildcard and <code>List&lt;?&gt;</code> is a list of unbounded wildcard. There are certain points to observe now. </p>\n\n<p>We cannot instantiate this list as the following code will not compile:</p>\n\n<pre><code>List&lt;?&gt; crazyList = new ArrayList&lt;?&gt;(); // any list.\n</code></pre>\n\n<p>We can say a wildcard parameterized type is more like an interface type as we can use it to refer to an object of compatible type but not for itself. </p>\n\n<pre><code>List&lt;?&gt; crazyList2 = new ArrayList&lt;String&gt;();\n</code></pre>\n\n<p>We cannot insert any item to it as we don't know what actually the type would be.</p>\n\n<pre><code>crazyList2.add(\"Apple\"); // error as you dont actually know what is that type.\n</code></pre>\n\n<p><strong>Now question arises When would I want to use <code>List&lt;?&gt;</code>?</strong></p>\n\n<p>You can think of this as a read-only list where you don't care about the type of the items. You can use it to invoke methods like returning the length of the list, printing it etc.</p>\n\n<pre><code> public static void print(List&lt;?&gt; list){\n        System.out.println(list);\n    }\n</code></pre>\n\n<p>You can also check the difference between <code>List, List&lt;?&gt;, List&lt;T&gt;, List&lt;E&gt;, and List&lt;Object&gt;</code> <a href=\"https://stackoverflow.com/questions/6231973/difference-between-list-list-listt-liste-and-listobject\">here</a>.</p>\n","answer_id":33360761,"question_id":490091,"last_edit_date":1495540493},{"owner":{"profile_image":"https://graph.facebook.com/100007829376909/picture?type=large","account_id":4763924,"user_type":"registered","user_id":3850595,"link":"https://stackoverflow.com/users/3850595/jordi-castilla","reputation":26697,"display_name":"Jordi Castilla","accept_rate":86},"content_license":"CC BY-SA 3.0","score":1,"is_accepted":false,"last_activity_date":1467112900,"creation_date":1467109918,"body":"<p><strong>Short answer:</strong></p>\n\n<blockquote>\n  <p>Why is it legal to create <code>new Box();</code> and  <code>new Box&lt;Integer&gt;();</code> ? Is it because <code>Box</code> is comparable?</p>\n</blockquote>\n\n<p>No, it is because <code>Integer</code> or raw types in <code>new Box();</code> <strong>are comparable</strong>.</p>\n","answer_id":38073758,"question_id":38073420,"last_edit_date":1467112900},{"owner":{"profile_image":"https://www.gravatar.com/avatar/031c92b95555e2f4d080bbbfd5d8c3f2?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":8525882,"user_type":"registered","user_id":6391367,"link":"https://stackoverflow.com/users/6391367/explv","reputation":2719,"display_name":"explv"},"content_license":"CC BY-SA 3.0","score":5,"is_accepted":true,"last_activity_date":1467110540,"creation_date":1467109212,"body":"<p>You have declared the class with a generic type parameter. This is not the same as implementing the Comparable interface:</p>\n\n<pre><code>public class Box&lt;Comparable&gt; {\n\n}\n</code></pre>\n\n<p>Is the same as:</p>\n\n<pre><code>public class Box&lt;T&gt; {\n\n}\n</code></pre>\n\n<p>Which is not the same as:</p>\n\n<pre><code>public class Box&lt;T&gt; implements Comparable&lt;T&gt; {\n\n    @Override\n    public int compareTo(final T o) {\n        return 0;\n    }\n}\n</code></pre>\n\n<p>Because the type parameter is unbounded, it will accept any type. So you can use an <code>Integer</code> or a <code>String</code>:</p>\n\n<pre><code>public class Box&lt;T&gt; {\n\n    public static void main(String[] args) {\n        Box a = new Box();\n        Box b = new Box&lt;&gt;();\n        Box c = new Box&lt;Integer&gt;();\n        Box d = new Box&lt;String&gt;();\n    }\n}\n</code></pre>\n\n<p>The reason why you can create a new <code>Box</code> without specifying the type is because of backwards compatibility. The new <code>Box</code> would have the raw type <code>Box&lt;T&gt;</code>. It is <strong>bad practice</strong> and should be avoided.</p>\n\n<p>You can read more about Raw Types <a href=\"https://docs.oracle.com/javase/tutorial/java/generics/rawTypes.html\" rel=\"nofollow\">here</a></p>\n\n<p>If you wanted to enforce that the type parameter implements Comparable, then you can do:</p>\n\n<pre><code>import java.awt.*;\n\npublic class Box&lt;T extends Comparable&lt;T&gt;&gt; {\n\n    public static void main(String[] args) {\n        Box a = new Box();\n        Box b = new Box&lt;&gt;();\n        Box c = new Box&lt;Integer&gt;();\n        Box d = new Box&lt;String&gt;();\n\n        // This one will not work as Rectangle does not implement Comparable!\n        Box e = new Box&lt;Rectangle&gt;(); \n    }\n}\n</code></pre>\n","answer_id":38073499,"question_id":38073420,"last_edit_date":1467110540},{"owner":{"profile_image":"https://www.gravatar.com/avatar/f62b23a8c68c759abd2337894de7068b?s=256&d=identicon&r=PG","account_id":363966,"user_type":"registered","user_id":708036,"link":"https://stackoverflow.com/users/708036/qben","reputation":823,"display_name":"qben","accept_rate":67},"content_license":"CC BY-SA 3.0","score":6,"is_accepted":false,"last_activity_date":1459633377,"creation_date":1459633377,"body":"<p>Personally, while both of the currently top rated answers are right in a way, I do not think any of them solves the problem in an elegant, reusable way, especially if you have to do this very often.</p>\n\n<p>Suppose you have some old legacy code / dependency that you cannot change in any way (so that it would at least accept <code>List&lt;? extends Object&gt;</code> as @ReverendGonzo suggested <a href=\"https://stackoverflow.com/questions/4288084/how-to-convert-liststring-to-listobject#comment4652138_4288084\">in his comment</a>. Suppose also, that you need to talk to this legacy module a lot.</p>\n\n<p>I do not think either casting / copying all the time would be bearable on the long run. It makes your code either vulnerable to insidious bugs and hard to follow or slightly (or drastically) inefficient and hard-to-read.</p>\n\n<p>To have readable and efficient production code, it is better to encapsulate the dirty part in a separate module which deals with the otherwise harmless but ugly cast.</p>\n\n<pre><code>class ProductionCode {\n    public void doJob() {\n        List&lt;String&gt; strings = Arrays.asList(\"pear\", \"apple\", \"peach\");\n        StringMagicUtils.dealWithStrings(strings);\n    }\n}\n\nclass StringMagicUtils {\n    @SuppressWarnings(\"unchecked\")\n    public static void dealWithStrings(List&lt;String&gt; strings) {\n        ExternalStringMagic.dealWithStringsAsObjects((List) strings);\n    }\n}\n\n// Legacy - cannot edit this wonderful code below ˇˇ\nclass ExternalStringMagic {\n    public static void dealWithStringsAsObjects(List&lt;Object&gt; stringsAsObjects) {\n        // deal with them as they please\n    }\n}\n</code></pre>\n","answer_id":36379062,"question_id":4288084,"last_edit_date":1495540036},{"owner":{"profile_image":"https://www.gravatar.com/avatar/a417e43e9904379c41738adecb183289?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":4934454,"user_type":"registered","user_id":3973077,"link":"https://stackoverflow.com/users/3973077/paul-boddington","reputation":37277,"display_name":"Paul Boddington","accept_rate":77},"content_license":"CC BY-SA 3.0","score":4,"is_accepted":false,"last_activity_date":1425779411,"creation_date":1425777317,"body":"<p>It's an unchecked cast because the compiler cannot be sure that <code>next</code> is a <code>T</code>. All it knows is that it's a <code>Component</code>.</p>\n\n<p>As for your question about why casting to a <code>T</code> generates the warning, but not casting to a <code>TestComponent</code>, that's a lot more subtle. Casting to a <code>TestComponent</code> is inherently less dodgy than casting to a <code>T</code>. If <code>test</code> is not a <code>TestComponent</code>, the cast to a <code>TestComponent</code> would cause a <code>ClassCastException</code> at runtime. But this isn't the case for casting to a <code>T</code> because the type <code>T</code> is not known at runtime, due to type erasure. If you cast a <code>Component</code> that is not a <code>T</code> to a <code>T</code> and then add the result into a <code>List&lt;T&gt;</code>, you would have a <code>List&lt;T&gt;</code> where not all of the items are <code>T</code>s. This would break the guarantee that generics are supposed to provide. There would be no chance of a <code>ClassCastException</code> preventing this.</p>\n\n<p>In your case, you don't need to worry. You have checked the cast to a <code>T</code> is safe by passing the <code>Class&lt;T&gt;</code> object and doing the check. You have two choices. You <em>could</em> suppress the warning and add a comment explaining why it's safe to do so. However, a better alternative would be to write <code>return type.cast(next);</code> instead. This doesn't generate a warning because <code>type.cast(object)</code> <em>would</em> throw  a <code>ClassCastException</code> if <code>object</code> were not a <code>T</code>. </p>\n","answer_id":28922019,"question_id":28921833,"last_edit_date":1425779411},{"owner":{"profile_image":"https://www.gravatar.com/avatar/37168aa60ee0c576241bfe2514b973dc?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":5860981,"user_type":"registered","user_id":4616696,"link":"https://stackoverflow.com/users/4616696/dermot-blair","reputation":1600,"display_name":"Dermot Blair"},"content_license":"CC BY-SA 3.0","score":1,"is_accepted":false,"last_activity_date":1425776191,"creation_date":1425776191,"body":"<p>As T is a subclass of Component, every T is a Component but not every Component is a T.</p>\n\n<p>If a subclass inherits from a superclass, casting the superclass to the subclass cannot be performed successfully.</p>\n\n<p>Therefore a new Component cannot be cast to a T instance.</p>\n","answer_id":28921913,"question_id":28921833},{"owner":{"profile_image":"https://i.stack.imgur.com/CCZZy.jpg?s=256&g=1","account_id":1257032,"user_type":"registered","user_id":1216288,"link":"https://stackoverflow.com/users/1216288/andrey","reputation":2515,"display_name":"Andrey","accept_rate":71},"content_license":"CC BY-SA 3.0","score":21,"is_accepted":false,"last_activity_date":1405606985,"creation_date":1405592385,"body":"<p>Using method reference, i found other way to pass the argument:</p>\n\n<pre><code>List&lt;String&gt; list = Arrays.asList(\"a\", \"b\", \"c\");        \nsort(list, Comparable::&lt;String&gt;compareTo);\n</code></pre>\n","answer_id":24800909,"question_id":22588518,"last_edit_date":1405606985},{"owner":{"profile_image":"https://i.stack.imgur.com/qBLgl.jpg?s=256&g=1","account_id":1370027,"user_type":"registered","user_id":1305501,"link":"https://stackoverflow.com/users/1305501/nosid","reputation":49130,"display_name":"nosid","accept_rate":77},"content_license":"CC BY-SA 3.0","score":134,"is_accepted":true,"last_activity_date":1395564600,"creation_date":1395564396,"body":"<p>You can't use a <em>lambda expression</em> for a <em>functional interface</em>, if the method in the <em>functional interface</em> has <em>type parameters</em>. See <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.27.3\">section §15.27.3 in JLS8</a>:</p>\n\n<blockquote>\n  <p>A lambda expression is compatible [..] with a target type <em>T</em> if <em>T</em> is a functional interface type (§9.8) and the expression is <strong>congruent</strong> with the function type of [..] T. [..] A lambda expression is <strong>congruent</strong> with a function type if all of the following are\n  true:</p>\n  \n  <ul>\n  <li>The function type has <em>no type parameters</em>.</li>\n  <li>[..]</li>\n  </ul>\n</blockquote>\n","answer_id":22588738,"question_id":22588518,"last_edit_date":1395564600},{"owner":{"profile_image":"https://www.gravatar.com/avatar/f54e86d83eea6143ecc70a485f4e6044?s=256&d=identicon&r=PG","account_id":1853886,"user_type":"registered","user_id":1679863,"link":"https://stackoverflow.com/users/1679863/rohit-jain","reputation":210617,"display_name":"Rohit Jain","accept_rate":77},"content_license":"CC BY-SA 3.0","score":6,"is_accepted":true,"last_activity_date":1391529387,"creation_date":1391529387,"body":"<p>Both the <code>ArrayList&lt;String&gt;</code> and <code>ArrayList&lt;MyCustomObject&gt;</code> have same erasure <code>ArrayList</code>. Thus, both the constructors will have same signature at runtime, and hence that exception, as you have a duplicate constructor there.</p>\n\n<p>If you want the constructor to take different types of <code>ArrayList</code>, then you can either use <em>unbounded wildcard</em> as in:</p>\n\n<pre><code>public OpponentListAdapter(Context c, ArrayList&lt;?&gt; l) {}\n</code></pre>\n\n<p>that will work for both the array lists, or make your constructor generic, giving a type parameter.</p>\n","answer_id":21557178,"question_id":21556925},{"owner":{"profile_image":"https://www.gravatar.com/avatar/34791a4919530f068710a35c7a558600?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":3218357,"user_type":"registered","user_id":2716383,"link":"https://stackoverflow.com/users/2716383/pedromss","reputation":2453,"display_name":"pedromss","accept_rate":57},"content_license":"CC BY-SA 3.0","score":1,"is_accepted":false,"last_activity_date":1391529363,"creation_date":1391529363,"body":"<p>You have two constructors with the same signature, constructor1(Context, ArrayList), constructor2(Context, ArrayList), meaning the constructors are the same.</p>\n","answer_id":21557169,"question_id":21556925},{"owner":{"profile_image":"https://www.gravatar.com/avatar/f4e5e5b29cd5c7b59e176d8e3bee3bd4?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":3452279,"user_type":"registered","user_id":2891664,"link":"https://stackoverflow.com/users/2891664/radiodef","reputation":37360,"display_name":"Radiodef","accept_rate":100},"content_license":"CC BY-SA 3.0","score":2,"is_accepted":false,"last_activity_date":1388272096,"creation_date":1388272096,"body":"<p>In general, Java generics are not appropriate for math.</p>\n\n<p>In Java:</p>\n\n<ul>\n<li>Generics are object only.</li>\n<li>There are no mathematical operators for objects.</li>\n</ul>\n\n<p>It looks like you can perform math on objects because you can do something like this:</p>\n\n<pre><code>Integer a = 1;\nInteger b = 2;\nInteger c = a + b;\n</code></pre>\n\n<p>But that is only due to autoboxing. What actually happens is the compiler replaces that code with this:</p>\n\n<pre><code>Integer a = new Integer(1);\nInteger b = new Integer(3);\nInteger c = Integer.valueOf(a.intValue() + b.intValue());\n</code></pre>\n\n<p>With generics you can specify a bound so that your type must be Number or a subtype of it:</p>\n\n<pre><code>static &lt;N extends Number&gt; N multiply(N n1, N n2) {\n    return n1 * n2; // but you cannot do this because the type is not known\n                    // so the compiler cannot do autoboxing\n}\n</code></pre>\n\n<p>If a supertype is known, you <em>can</em> call methods on them so you can do this as has been pointed out:</p>\n\n<pre><code>static &lt;N extends Number&gt; double multiply(N n1, N n2) {\n    return n1.doubleValue() * n2.doubleValue();\n}\n</code></pre>\n\n<p>But that is no different than the following:</p>\n\n<pre><code>static double multiply(double n1, double n2) {\n    return n1 * n2;\n}\n</code></pre>\n\n<p>Except that the generic version can, for example, take BigDecimal as an argument which will of course not provide a reliable result (see <a href=\"http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#doubleValue%28%29\" rel=\"nofollow\">BigDecimal#doubleValue</a>). (Neither will Long for that matter.)</p>\n\n<p>If you were really determined you could program your own number classes and use polymorphism. Otherwise use overloads or (best of all) stick to one type.</p>\n","answer_id":20820362,"question_id":20819824},{"owner":{"profile_image":"https://www.gravatar.com/avatar/46129117115e53dc8229f938120209c8?s=256&d=identicon&r=PG","account_id":2906108,"user_type":"registered","user_id":2491410,"link":"https://stackoverflow.com/users/2491410/meno-hochschild","reputation":42988,"display_name":"Meno Hochschild","accept_rate":100},"content_license":"CC BY-SA 3.0","score":4,"is_accepted":true,"last_activity_date":1388269525,"creation_date":1388268230,"body":"<p>Maybe this is your intention:</p>\n\n<pre><code>public static &lt;N extends Number&gt; double multiply(N x, N y){\n    return x.doubleValue() * y.doubleValue();\n}\n</code></pre>\n\n<p>Although I must also say that the generic use of Number instead of concrete immutable value types like java primitive <code>double</code> is probably not so healthy because in the example above the arguments could even be of different types, for example Integer and Double.</p>\n\n<p><strong>Attention:</strong></p>\n\n<p>I confirm, the arguments can be of different types as given signature above. So the answer of Bohemian is wrong. I have tested it just now (but knew it already before). The compiler only guarantees that both arguments are of type Number, nothing else.</p>\n\n<p>In order to assert the same argument types the compiler needs self-referencing generics. This feature is not fulfilled by Number-class (that is &lt;N extends Number&lt;N&gt;&gt; is unfortunately not possible). That is why I consider the whole Number approach as not really healthy. Here a test code which everyone can execute:</p>\n\n<pre><code>Integer x = Integer.valueOf(10);\nDouble y = new Double(2.5);\nSystem.out.println(multiply(x, y));\n// Output: 25.0\n</code></pre>\n","answer_id":20819856,"question_id":20819824,"last_edit_date":1388269525},{"owner":{"profile_image":"https://www.gravatar.com/avatar/d84b558fd67be10d5a718fb94231909d?s=256&d=identicon&r=PG","account_id":93689,"user_type":"moderator","user_id":256196,"link":"https://stackoverflow.com/users/256196/bohemian","reputation":415951,"display_name":"Bohemian","accept_rate":77},"content_license":"CC BY-SA 3.0","score":1,"is_accepted":false,"last_activity_date":1388268458,"creation_date":1388268458,"body":"<p>You can specify a <em>bound</em> to your type by coding <code>&lt;T extends Number&gt;</code>:</p>\n\n<pre><code>public static double &lt;T extends Number&gt; multiply(T x, T y){\n    return x.doubleValue() * y.doubleValue();\n}\n</code></pre>\n\n<p>Which restricts the Number types to being the <em>same</em> type, eg an Integer and an Integer, but not an Integer and a Long.</p>\n\n<p>but you don't need generics at all:</p>\n\n<pre><code>public static double multiply(Number x, Number y){\n    return x.doubleValue() * y.doubleValue();\n}\n</code></pre>\n\n<p>Which allows any two Numbers, eg an Integer and a Long.</p>\n","answer_id":20819888,"question_id":20819824},{"owner":{"profile_image":"https://i.stack.imgur.com/kOdrM.jpg?s=256&g=1","account_id":3050905,"user_type":"registered","user_id":2585483,"link":"https://stackoverflow.com/users/2585483/juniar","reputation":1309,"display_name":"Juniar","accept_rate":50},"content_license":"CC BY-SA 3.0","score":0,"is_accepted":false,"last_activity_date":1381441209,"creation_date":1381441209,"body":"<p>List &lt; Object > is meant to pass input type parameter of an Object. While List &lt; ? > represents Wildcard type. The wildcard &lt; ? > is of Unknown parameter type. The wildcard cannot be used as a type argument for a generic method and cannot be used to create a generic instance of a class. Wildcard can be used to extend a subtype class, List &lt; ? extends Number >. To relax the restriction of an Object type and in this case to relax \"Number\" Object type.</p>\n","answer_id":19306727,"question_id":490091},{"owner":{"profile_image":"https://i.stack.imgur.com/cEOYD.jpg?s=256&g=1","account_id":1649504,"user_type":"registered","user_id":1520364,"link":"https://stackoverflow.com/users/1520364/karthik-t","reputation":31606,"display_name":"Karthik T","accept_rate":70},"content_license":"CC BY-SA 3.0","score":2,"is_accepted":false,"last_activity_date":1376637777,"creation_date":1376637380,"body":"<p>Take a look at this <a href=\"http://rickyclarkson.blogspot.sg/2008/06/cross-language-generics-trick-java.html\" rel=\"nofollow\">post</a> The person tries to simulate this by chaining <code>pair</code></p>\n\n<p>He does this</p>\n\n<pre><code>Pair&lt;String, Integer&gt; pair = Pairs.pair(\"hello\", 5);\nPair&lt;Double, Pair&lt;String, Integer&gt;&gt; withDouble = Pairs.pair(3.0, pair);\n</code></pre>\n\n<p>And proposes the below to make it cleaner</p>\n\n<pre><code>public class Pair&lt;T, U&gt; { ...\n  public &lt;V&gt; Pair&lt;V, Pair&lt;T, U&gt;&gt; prepend(V v) {\n   return pair(v, this); } }\n</code></pre>\n\n<p>So that it becomes  </p>\n\n<pre><code>Pair&lt;Double, Pair&lt;String, Integer&gt;&gt; pair = Pairs.pair(\"hello\", 5).prepend(3.0);\n</code></pre>\n\n<p>Note: you might need to write <code>Pair</code>.</p>\n\n<p>Note: Seems he actually endorses javatuples at the end..</p>\n\n<p><strong>More relevant:</strong></p>\n\n<p>After reading your comment, this more obvious solution presents itself.\nMultidimensional maps, much like multimensional arrays</p>\n\n<pre><code>Map&lt;XKey, Map&lt;YKey, Value&gt; &gt;\n</code></pre>\n","answer_id":18267838,"question_id":18267714,"last_edit_date":1376637777},{"owner":{"profile_image":"https://www.gravatar.com/avatar/fcbd636611fa901a055a84a16c463219?s=256&d=identicon&r=PG","account_id":165405,"user_type":"registered","user_id":388827,"link":"https://stackoverflow.com/users/388827/qqilihq","reputation":10947,"display_name":"qqilihq","accept_rate":89},"content_license":"CC BY-SA 3.0","score":1,"is_accepted":false,"last_activity_date":1376637323,"creation_date":1376637323,"body":"<p>If you need variable-length keys, you can use <a href=\"http://www.javatuples.org\" rel=\"nofollow\">javatuples</a> or something similar, which wrap an arbitrary number and arbitrary types of arguments (they provide tuples until a length of 10):</p>\n\n<p><code>Map&lt;Triplet&lt;Double,Float,Integer&gt;, Object&gt; mapWithCombinedKeys = ...</code></p>\n","answer_id":18267824,"question_id":18267714},{"owner":{"profile_image":"https://www.gravatar.com/avatar/4143c51b65350247de84a33eb8a9b46c?s=256&d=identicon&r=PG","account_id":880980,"user_type":"registered","user_id":244365,"link":"https://stackoverflow.com/users/244365/paulmurraycbr","reputation":1190,"display_name":"PaulMurrayCbr","accept_rate":25},"content_license":"CC BY-SA 3.0","score":0,"is_accepted":false,"last_activity_date":1342582822,"creation_date":1342582822,"body":"<p><code>List, List&lt;?&gt;, and List&lt;? extends Object&gt;</code> are the same thing. The second is more explicit. For a list of this type, you cannot know what types are legal to put into it, and you don't know anything about the types you can get out of it, except that they will be objects.</p>\n\n<p><code>List&lt;Object&gt;</code> specifically means that the list contains any sort of object.</p>\n\n<p>Let's say we make a list of <code>Foo</code>:</p>\n\n<pre><code>List&lt;Foo&gt; foos= new ArrayList&lt;Foo&gt;();\n</code></pre>\n\n<p>It is not legal to put a <code>Bar</code> into foos.</p>\n\n<pre><code>foos.add(new Bar()); // NOT OK!\n</code></pre>\n\n<p>It is always legal to put anything into a <code>List&lt;Object&gt;</code>. </p>\n\n<pre><code>List&lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\nobjs.add(new Foo());\nobjs.add(new Bar());\n</code></pre>\n\n<p>But you mustn't be allowed to put a <code>Bar</code> into a <code>List&lt;Foo&gt;</code> - that's the whole point. So that means that this:</p>\n\n<pre><code>List&lt;Object&gt; objs = foos; // NOT OK!\n</code></pre>\n\n<p>is not legal.</p>\n\n<p>But it's ok to say that foos is a list of something but we don't know specifically what it is:</p>\n\n<pre><code>List&lt;?&gt; dontKnows = foos;\n</code></pre>\n\n<p>But that then means that it must be prohibited to go</p>\n\n<pre><code>dontKnows.add(new Foo()); // NOT OK\ndontKnows.add(new Bar()); // NOT OK\n</code></pre>\n\n<p>because the variable dontKnows does't know what types are legal.</p>\n","answer_id":11533966,"question_id":490091},{"owner":{"profile_image":"https://www.gravatar.com/avatar/ded1c591320cc2be6aa8109d02a74640?s=256&d=identicon&r=PG","account_id":195025,"user_type":"registered","user_id":437679,"link":"https://stackoverflow.com/users/437679/martin-algesten","reputation":13170,"display_name":"Martin Algesten","accept_rate":63},"content_license":"CC BY-SA 2.5","score":29,"is_accepted":false,"last_activity_date":1290802115,"creation_date":1290800460,"body":"<p>Any java collection is just a collection of objects be it string or other. The type argument is just sugar. Depending on situation, such as dealing with very large lists, you may just want to convert it - obviously risking mixing two different types of objects in the same list.</p>\n\n<pre><code>List&lt;Object&gt; objectList = (List)stringList;\n</code></pre>\n\n<p>And put a @SuppressWarning to get rid of nasties...</p>\n","answer_id":4288129,"question_id":4288084,"last_edit_date":1290802115},{"owner":{"profile_image":"https://www.gravatar.com/avatar/94066dfa49c2feb14706cb081848fda7?s=256&d=identicon&r=PG","account_id":10836,"user_type":"registered","user_id":20654,"link":"https://stackoverflow.com/users/20654/oscarryz","reputation":196641,"display_name":"OscarRyz","accept_rate":80},"content_license":"CC BY-SA 2.5","score":1,"is_accepted":false,"last_activity_date":1290800513,"creation_date":1290800513,"body":"<pre><code>List&lt;Object&gt; ofObjects = new ArrayList&lt;Object&gt;(ofStrings);\n</code></pre>\n\n<p>as in:</p>\n\n<pre><code>import java.util.*;\nclass C { \n  public static void main( String[] args ) { \n     List&lt;String&gt; s = new ArrayList&lt;String&gt;();\n     s.add(\"S\");\n     List&lt;Object&gt; o = new ArrayList&lt;Object&gt;(s);\n     o.add( new Object() );\n     System.out.println(  o );\n\n  }\n}\n</code></pre>\n\n<p>As an alternative you can try the <code>addAll</code> method, if the list of objects is an existing list.</p>\n","answer_id":4288138,"question_id":4288084},{"owner":{"profile_image":"https://www.gravatar.com/avatar/c8d80416510ccfb160d59c96d062707d?s=256&d=identicon&r=PG","account_id":114151,"user_type":"registered","user_id":300311,"link":"https://stackoverflow.com/users/300311/erick-robertson","reputation":32353,"display_name":"Erick Robertson","accept_rate":88},"content_license":"CC BY-SA 2.5","score":103,"is_accepted":true,"last_activity_date":1290800387,"creation_date":1290800387,"body":"<p>Pass the <code>List&lt;String&gt;</code> as a parameter to the constructor of a new <code>ArrayList&lt;Object&gt;</code>.</p>\n\n<pre><code>List&lt;Object&gt; objectList = new ArrayList&lt;Object&gt;(stringList);\n</code></pre>\n\n<p>Any <code>Collection</code> can be passed as an argument to the constructor as long as its type extends the type of the <code>ArrayList</code>, as <code>String</code> extends <code>Object</code>.  The constructor takes a <code>Collection</code>, but <code>List</code> is a subinterface of <code>Collection</code>, so you can just use the <code>List&lt;String&gt;</code>.</p>\n","answer_id":4288124,"question_id":4288084},{"owner":{"profile_image":"https://www.gravatar.com/avatar/32373e3d6ddf18b71b26edac43b03c56?s=256&d=identicon&r=PG","account_id":196062,"user_type":"registered","user_id":439317,"link":"https://stackoverflow.com/users/439317/riley-lark","reputation":20700,"display_name":"Riley Lark","accept_rate":84},"content_license":"CC BY-SA 2.5","score":4,"is_accepted":false,"last_activity_date":1290800325,"creation_date":1290800325,"body":"<p>This is pretty inefficient, but at least you don't have to write a lot of code~</p>\n\n<pre><code>List&lt;String&gt; stringList = new ArrayList&lt;String&gt;();\nList&lt;Object&gt; objectList = Arrays.asList(stringList.toArray());\n</code></pre>\n","answer_id":4288119,"question_id":4288084},{"owner":{"profile_image":"https://www.gravatar.com/avatar/f1463ac968a26c990eccf12ac6cc8eb4?s=256&d=identicon&r=PG","account_id":2539,"user_type":"registered","user_id":3542,"link":"https://stackoverflow.com/users/3542/rob","reputation":48119,"display_name":"Rob"},"content_license":"CC BY-SA 2.5","score":15,"is_accepted":false,"last_activity_date":1257785485,"creation_date":1233190929,"body":"<p>I refer you to the excellent <a href=\"http://java.sun.com/docs/books/tutorial/java/generics/index.html\" rel=\"noreferrer\">Java Generics tutorial</a>, and the <a href=\"http://java.sun.com/docs/books/tutorial/extra/generics/index.html\" rel=\"noreferrer\">\"advanced\" Generics tutorial</a>, both available from Sun Microsystems. Another great resource is the <a href=\"http://oreilly.com/catalog/9780596527754\" rel=\"noreferrer\">Java Generics and Collections</a> book.</p>\n","answer_id":490103,"question_id":490091,"last_edit_date":1257785485},{"owner":{"profile_image":"https://www.gravatar.com/avatar/94066dfa49c2feb14706cb081848fda7?s=256&d=identicon&r=PG","account_id":10836,"user_type":"registered","user_id":20654,"link":"https://stackoverflow.com/users/20654/oscarryz","reputation":196641,"display_name":"OscarRyz","accept_rate":80},"content_license":"CC BY-SA 2.5","score":0,"is_accepted":false,"last_activity_date":1233193551,"creation_date":1233193551,"body":"<blockquote>\n  <p><em>When would I want to use</em></p>\n</blockquote>\n\n<pre><code>public void CanYouGiveMeAnAnswer( List l ){}\n</code></pre>\n\n<p>When you cant to do all the casting your self.</p>\n\n<blockquote>\n  <p><em>When would I want to use</em></p>\n</blockquote>\n\n<pre><code>public void CanYouGiveMeAnAnswer( List l&lt;Object&gt; ){}\n</code></pre>\n\n<p>When you want to restrict the type of the List. For instance, this would be an invalid argument.</p>\n\n<pre><code> new ArrayList&lt;String&gt;();\n</code></pre>\n\n<blockquote>\n  <p><em>When would I want to use</em></p>\n</blockquote>\n\n<pre><code>public void CanYouGiveMeAnAnswer( List l&lt;?&gt; ){}\n</code></pre>\n\n<p>Mostly never.</p>\n","answer_id":490211,"question_id":490091},{"owner":{"profile_image":"https://www.gravatar.com/avatar/94066dfa49c2feb14706cb081848fda7?s=256&d=identicon&r=PG","account_id":10836,"user_type":"registered","user_id":20654,"link":"https://stackoverflow.com/users/20654/oscarryz","reputation":196641,"display_name":"OscarRyz","accept_rate":80},"content_license":"CC BY-SA 2.5","score":42,"is_accepted":false,"last_activity_date":1233193144,"creation_date":1233192659,"body":"<p>In my own simple terms:</p>\n\n<blockquote>\n  <p>List</p>\n</blockquote>\n\n<p>Would declare an ordinary collection, can hold any type, and will always return Object.</p>\n\n<blockquote>\n  <p>List&lt;Object&gt;</p>\n</blockquote>\n\n<p>Will create a list that can hold any type of object, but can only get assigned a another <em>List&lt;Object&gt;</em> </p>\n\n<p>For instance this doesn't work;</p>\n\n<pre><code>List&lt;Object&gt; l = new ArrayList&lt;String&gt;();\n</code></pre>\n\n<p>Of course you can add anything but only can pull Object.</p>\n\n<pre><code>List&lt;Object&gt; l = new ArrayList&lt;Object&gt;();\n\nl.add( new Employee() );\nl.add( new String() );\n\nObject o = l.get( 0 );\nObject o2 = l.get( 1 );\n</code></pre>\n\n<p>Finally </p>\n\n<blockquote>\n  <p>List&lt;?></p>\n</blockquote>\n\n<p>Will let you assign any type, including </p>\n\n<pre><code>List &lt;?&gt; l = new ArrayList(); \nList &lt;?&gt; l2 = new ArrayList&lt;String&gt;();\n</code></pre>\n\n<p>This would be called collection of <em>unknown</em> and since the common denominator of <em>unknown</em> is Object you will be able to fetch Objects ( a coincidence ) </p>\n\n<p>The importance of <em>unknown</em> comes when its used with subclassing:</p>\n\n<pre><code>List&lt;? extends Collection&gt; l = new ArrayList&lt;TreeSet&gt;(); // compiles\n\nList&lt;? extends Collection&gt; l = new ArrayList&lt;String&gt;(); // doesn't,\n// because String is not part of *Collection* inheritance tree. \n</code></pre>\n\n<p>I hope using Collection as the type doesn't create confusion, that was the only tree that came to my mind.</p>\n\n<p>The difference here, is that l is a collection of <em>unknow</em> that belongs to the <em>Collection</em> hierarchy.</p>\n","answer_id":490181,"question_id":490091,"last_edit_date":1233193144},{"owner":{"profile_image":"https://www.gravatar.com/avatar/528394f867632bcca8497088cd71a6d4?s=256&d=identicon&r=PG","account_id":9757,"user_type":"registered","user_id":18154,"link":"https://stackoverflow.com/users/18154/fabian-steeg","reputation":45128,"display_name":"Fabian Steeg","accept_rate":100},"content_license":"CC BY-SA 2.5","score":1,"is_accepted":false,"last_activity_date":1233192579,"creation_date":1233192579,"body":"<p>I'd put it this way: While <code>List</code> and <code>List&lt;Object&gt;</code> can contain any type of objects, <code>List&lt;?&gt;</code> contains elements of an unknown type, but once that type is captured, it can only contain elements of that type. Which is why it is the only type safe variant of those three, and therefore generally preferable.</p>\n","answer_id":490178,"question_id":490091},{"owner":{"profile_image":"https://www.gravatar.com/avatar/7e4008352df551afc7748ba3f71b3e9d?s=256&d=identicon&r=PG","account_id":21852,"user_type":"registered","user_id":53444,"link":"https://stackoverflow.com/users/53444/tim","reputation":19896,"display_name":"Tim","accept_rate":70},"content_license":"CC BY-SA 2.5","score":0,"is_accepted":false,"last_activity_date":1233191858,"creation_date":1233191112,"body":"<p>To complement the tutorials mentioned by Rob, here's a wikibook explaining the topic:<br>\n<a href=\"http://en.wikibooks.org/wiki/Java_Programming/Generics\" rel=\"nofollow noreferrer\">http://en.wikibooks.org/wiki/Java_Programming/Generics</a></p>\n\n<hr>\n\n<p>Edit:</p>\n\n<ol>\n<li><p>No restrictions on type of items in list</p></li>\n<li><p>Items in list must extend Object</p></li>\n<li><p>Wildcard used by itself, so it matches anything</p></li>\n</ol>\n\n<p>Would it be naive of me to conclude at this point that there's hardly any/no difference at all?</p>\n","answer_id":490114,"question_id":490091,"last_edit_date":1233191858},{"owner":{"profile_image":"https://www.gravatar.com/avatar/3d184a8ef609eaabcaabd0dd19196a74?s=256&d=identicon&r=PG","account_id":23143,"user_type":"registered","user_id":57752,"link":"https://stackoverflow.com/users/57752/eddie","reputation":53986,"display_name":"Eddie","accept_rate":73},"content_license":"CC BY-SA 2.5","score":3,"is_accepted":false,"last_activity_date":1233191697,"creation_date":1233191697,"body":"<p>The shortest possible explanation is:  The second item is a list that can hold any type, and you can add objects to it:</p>\n\n<pre><code>List&lt;Object&gt;\n</code></pre>\n\n<p>The first item you list is treated as essentially equivalent to this, except you will get compiler warnings because it is a \"raw type\".</p>\n\n<pre><code>List\n</code></pre>\n\n<p>The third is a list that can hold any type, but you cannot add anything to it:</p>\n\n<pre><code>List&lt;?&gt; \n</code></pre>\n\n<p>Basically, you use the second form (<code>List&lt;Object&gt;</code>) when you truly have a list that can contain any object and you want to be able to add elements to the list.  You use the third form (<code>List&lt;?&gt;</code>)when you receive the list as a method return value and you will iterate over the list but never add anything to it   Never use the first form (<code>List</code>) in new code compiling under Java 5 or later.</p>\n","answer_id":490140,"question_id":490091},{"owner":{"profile_image":"https://www.gravatar.com/avatar/83fd7d4059fec16d3f138f4f351b6423?s=256&d=identicon&r=PG","account_id":7808,"user_type":"registered","user_id":13687,"link":"https://stackoverflow.com/users/13687/john-gardner","reputation":24390,"display_name":"John Gardner"},"content_license":"CC BY-SA 2.5","score":4,"is_accepted":false,"last_activity_date":1233191609,"creation_date":1233191609,"body":"<p>Simplest explanation which is not \"RTFM\":</p>\n\n<pre><code>List\n</code></pre>\n\n<p>Will generate lots of compiler warnings, but is mostly equivalent to:</p>\n\n<pre><code>List&lt;Object&gt;\n</code></pre>\n\n<p>While:</p>\n\n<pre><code>List&lt;?&gt;\n</code></pre>\n\n<p>basically means its something generic, but you don't know what the generic type is.  Its great for getting rid of compiler warnings when you cant modify the return types of other things that just returned List.  Its much more useful in the form:</p>\n\n<pre><code>List&lt;? extends SomeOtherThing&gt;\n</code></pre>\n","answer_id":490137,"question_id":490091},{"owner":{"profile_image":"https://i.stack.imgur.com/KzMc4.jpg?s=256&g=1","account_id":320962,"user_type":"registered","user_id":639520,"link":"https://stackoverflow.com/users/639520/e-riz","reputation":31681,"display_name":"E-Riz","accept_rate":72},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":true,"last_activity_date":1660667395,"creation_date":1660667395,"body":"<p>You can eliminate the unchecked cast by declaring the interface itself with a type parameter (instead of the method). Like this:</p>\n<pre class=\"lang-java prettyprint-override\"><code>interface Service&lt;T&gt; {\n    List&lt;T&gt; list(String location, String type );\n}\n\nclass LocalService implements Service&lt;MyConcreteClass&gt; {\n    @Override\n    public List&lt;MyConcreteClass&gt; list(String location, String type ) {\n        // Some logic to retrieve, alter and return a list\n        return null;\n    }\n}\n\nclass StringService implements Service&lt;String&gt; {\n    @Override\n    public List&lt;String&gt; list(String location, String type) {\n        // TODO Auto-generated method stub\n        return null;\n    }\n}\n\nclass MyConcreteClass {\n    /// ...\n}\n</code></pre>\n<p>(I changed a couple of things to make it compile, not relevant to the answer).</p>\n","answer_id":73377291,"question_id":73376182},{"owner":{"profile_image":"https://www.gravatar.com/avatar/d99204bcce923f40f5c72b7f80121644?s=256&d=identicon&r=PG","account_id":2139538,"user_type":"registered","user_id":1898563,"link":"https://stackoverflow.com/users/1898563/michael","reputation":42521,"display_name":"Michael","accept_rate":78},"content_license":"CC BY-SA 4.0","score":2,"is_accepted":true,"last_activity_date":1660579652,"creation_date":1660579652,"body":"<p>Isn't your problem just here?</p>\n<pre><code>public &lt;T extends specialComparable&lt;T&gt;&gt; userClass(List&lt;specialComparable&lt;T&gt;&gt; comparables) {\n</code></pre>\n<p>You have a <code>List&lt;specialComparable&lt;specialComparable&lt;?&gt;&gt;&gt;</code>. That double nesting is presumably not the intention.</p>\n<p>Your signature should just be</p>\n<pre><code>public &lt;T extends specialComparable&lt;T&gt;&gt; userClass(List&lt;T&gt; comparables) {\n</code></pre>\n<p>FWIW, this interface seems useless since it adds no methods to the regular <code>Comparable</code>. The method is also fairly redundant. You can simply call this on any list of <code>Comparable</code>s.</p>\n<pre><code>listOfComparables.sort(Comparator.naturalOrder());\n</code></pre>\n","answer_id":73363594,"question_id":73363223,"community_owned_date":1660579652},{"owner":{"profile_image":"https://www.gravatar.com/avatar/f8c60eb5f46783d753e86238a9c18cd9?s=256&d=identicon&r=PG","account_id":265649,"user_type":"registered","user_id":552759,"link":"https://stackoverflow.com/users/552759/jtahlborn","reputation":53086,"display_name":"jtahlborn"},"content_license":"CC BY-SA 4.0","score":15,"is_accepted":true,"last_activity_date":1660410228,"creation_date":1425776992,"body":"<p>Others have described the problem, here is the solution with cleaner test:</p>\n<pre><code>if (type.isInstance(next)) {\n    return type.cast(next);\n}\n</code></pre>\n","answer_id":28921986,"question_id":28921833,"last_edit_date":1660410228},{"owner":{"profile_image":"https://i.stack.imgur.com/BBLLR.jpg?s=256&g=1","account_id":268201,"user_type":"registered","user_id":1573368,"link":"https://stackoverflow.com/users/1573368/sheel-prabhakar","reputation":419,"display_name":"Sheel Prabhakar"},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":true,"last_activity_date":1660408185,"creation_date":1660393641,"body":"<p><code>&lt;T extends BaseCommand&gt;</code> means at the calling side Type T <em>can</em> be BaseCommand OR derived from BaseCommand class/interface.</p>\n<p><code>Class&lt;T&gt;</code> type means the first argument should be the type of Class T.</p>\n<pre><code>class Command extends BaseCommand{ \n}\n</code></pre>\n<p>then you can call like this</p>\n<pre><code>registerHandle( Command.class, ...);\n</code></pre>\n<p>So that inside implementation one can create instance of Type Command.</p>\n","answer_id":73344263,"question_id":73344126,"last_edit_date":1660408185},{"owner":{"profile_image":"https://www.gravatar.com/avatar/b13bedc5215730fbce5edff6c130988a?s=256&d=identicon&r=PG","account_id":401843,"user_type":"registered","user_id":768644,"link":"https://stackoverflow.com/users/768644/rzwitserloot","reputation":89873,"display_name":"rzwitserloot"},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":false,"last_activity_date":1660277009,"creation_date":1660277009,"body":"<p>The warning is unavoidable. Isolate it in a helper method and toss the appropriate <code>@SuppressWarnings</code> at it. Or, refactor how this thing works. In general, the generics of <code>Class&lt;?&gt;</code> are weird and don't work well; if you try to write code that relies on the generics part to make it work, it's likely to result in many situations where you can't avoid these warnings, and the API is suboptimal.<sup>1</sup></p>\n<p>One tricky way to do what you're trying to do here in a one-size-fits-all way is so-called Super Type Tokens. You can search the web for this concept, because for what you're specifically doing here, STTs are overkill. What you are looking for, is a <em>supplier</em>.</p>\n<p>You want the caller not to pass you the type of a set. No. You want the caller to pass you a piece of code that, if executed, creates the set.</p>\n<p>While we're at it, let's get rid of the array, you're shifting the elements through that array for absolutely no sensible reason.</p>\n<pre><code>public &lt;S extends Set&lt;String&gt;&gt; S decodeStringSet(String key, @Nullable Set&lt;String&gt; defaultValue, Supplier&lt;S&gt; setMaker) {\n    Set&lt;String&gt; result = sp.getStringSet(key, defaultValue);\n    if(result == null) return defaultValue;\n\n    S a = setMaker.get();\n    a.addAll(result);\n    return a;\n}\n</code></pre>\n<p>This code can be used as follows:</p>\n<pre><code>LinkedHashSet&lt;String&gt; mySet = decodeStringSet(&quot;myKey&quot;, null, LinkedHashSet::new);\n</code></pre>\n<p>Perhaps you're unfamiliar with this syntax. <code>new LinkedHashSet()</code> will, when you run that code, create a LinkedHashSet. In contrast, <code>LinkedHashSet::new</code> will, when you run that code, produce an object that can be asked to create a LinkedHashSet, by invoking its <code>get()</code> method. One does the act right this very moment. The other wraps 'do the act' into a little machine. You can hand the machine to other code, or press the button on the machine to make it do the act, and you can press the button as often as you feel like.</p>\n<hr />\n<p>[1] Need some more explanations as to why relying on the generics of <code>j.l.Class</code> is awkward and not a good idea?</p>\n<p>A class object simply <strong>cannot</strong>, itself, represent generics, whereas generics can represent generics. That is: <code>List&lt;List&lt;String&gt;&gt;</code> is perfectly fine. However, <code>Class&lt;List&lt;String&gt;&gt;</code> does not make sense. You can write it, (j.l.Class does not have hardcoded rules to keep sanity alive in the langspec), but it doesn't represent anything: There's just one class object that represents the type <code>j.u.List</code>. This one object cannot therefore represent the generics; you can't have one class object representing <code>List&lt;String&gt;</code> and another representing <code>List&lt;Integer&gt;</code>. Less important, but still annoying - there are things class objects can represent that generics cannot. <code>int.class</code> is types as <code>Class&lt;Integer&gt;</code> but this isn't quite right.</p>\n<p>Hence, in your example, the compiler consider <code>Class&lt;? extends Set&gt;</code> as problematic; it's got a raw type <em>inside</em> the generics. However, it is technically correct, in that it is not possible to represent e.g. a <code>Set&lt;T&gt;</code>, merely 'a Set, whose generics are unknown, given that j.l.Class objects cannot represent them'.</p>\n<p>Lastly, classes basically only produce (the P in PECS - which explains what the difference is between <code>&lt;Number&gt;</code>, <code>&lt;? extends Number&gt;</code>, and <code>&lt;? super Number&gt;</code>); it is mentally difficult to fathom the difference between <code>Class&lt;? extends String&gt;</code> and <code>Class&lt;String&gt;</code>, because it's an irrelevant difference, given that j.l.Class only produces. And yet, often you really do need to write <code>Class&lt;? extends String&gt;</code> because if you don't, the compiler refuses to compile your code for imaginary, irrelevant reasons. That's because, again, j.l.Class is not hardcoded in the lang spec: The compiler does not <em>know</em> that there is no effective distinction between <code>Class&lt;T&gt;</code> and <code>Class&lt;? extends T&gt;</code>, and java does not have a way to mark off a given generics param as forced Produces-only or some such.</p>\n","answer_id":73329135,"question_id":73328558},{"owner":{"profile_image":"https://lh3.googleusercontent.com/a-/AOh14GjMpYukQ5aYVFfZyOxY8TIuB55KTzeCeZdLaaK5Ag=k-s256","account_id":23667337,"user_type":"registered","user_id":17694626,"link":"https://stackoverflow.com/users/17694626/cheng-thao","reputation":1467,"display_name":"Cheng Thao"},"content_license":"CC BY-SA 4.0","score":2,"is_accepted":false,"last_activity_date":1660230348,"creation_date":1660230348,"body":"<p>Your sub interface inherits the method <code>assign</code> from <code>Assigner</code>.  All you need to do in the sub interface is pass the types to the super interface.</p>\n<pre><code>interface Assigner&lt;S, T&gt; { S assign(T type);}\ninterface PlayerAssigner&lt;S&gt; extends Assigner&lt;S,Player&gt; {}\ninterface ManagerAssigner&lt;S&gt; extends Assigner&lt;S,Manager&gt; {}\ninterface CityBasedAssigner&lt;T&gt; extends Assigner&lt;City,T&gt; {}\n</code></pre>\n","answer_id":73322961,"question_id":73319233},{"owner":{"profile_image":"https://i.stack.imgur.com/v58O6.jpg?s=256&g=1","account_id":4181375,"user_type":"registered","user_id":3426309,"link":"https://stackoverflow.com/users/3426309/andrey-b-panfilov","reputation":5121,"display_name":"Andrey B. Panfilov"},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":true,"last_activity_date":1660176633,"creation_date":1660176633,"body":"<p>If I properly understood requirements...</p>\n<pre class=\"lang-java prettyprint-override\"><code>@FunctionalInterface\ninterface MapFilter {\n\n    &lt;T&gt; Map&lt;String, T&gt; filter(Map&lt;String, T&gt; map);\n\n}\n\npublic void setNewMapAttribute(MapFilter mapConsumer) {\n    this.setIdToRatings(mapConsumer.filter(this.getIdToRatings()));\n    this.setIdToNames(mapConsumer.filter(this.getIdToNames()));\n}\n</code></pre>\n","answer_id":73313972,"question_id":73313839},{"owner":{"profile_image":"https://i.stack.imgur.com/1bP9c.png?s=256&g=1","account_id":2538731,"user_type":"registered","user_id":2205089,"link":"https://stackoverflow.com/users/2205089/alin-gabriel-arhip","reputation":2578,"display_name":"Alin Gabriel Arhip"},"content_license":"CC BY-SA 4.0","score":3,"is_accepted":true,"last_activity_date":1660148049,"creation_date":1660147026,"body":"<p>peterz detailed exactly what happens under the hood.</p>\n<p>Sounds like what you need is an explicit conversion from the primitive <code>double</code> Java predicate (<code>java.util.function.DoublePredicate</code>) to the <code>scala.Double</code> Scala predicate (<code>Double =&gt; Boolean</code>).</p>\n<p>Scala actually offers one such conversion called <code>FromJavaDoublePredicate</code>.\nThe code does not require explicit <code>Double</code> cast anymore:</p>\n<pre><code>  /* some scala file */\n  def hasCompleteness(\n      x: Double,\n      f: Double =&gt; Boolean\n  ): Unit = println(f(x))\n\n  /* some java file */\n  public static FromJavaDoublePredicate atLeast(double thresholdPercentage) {\n      return new scala.compat.java8.functionConverterImpls.FromJavaDoublePredicate(\n        actualPercentage -&gt; actualPercentage &gt;= thresholdPercentage);\n  }\n\n  FromJavaDoublePredicate f = atLeast(3.0);\n  Test.hasCompleteness(5, f);  // true\n</code></pre>\n<p>PS. From what I saw, you chose <a href=\"https://github.com/scala/scala-java8-compat\" rel=\"nofollow noreferrer\">scala-java8-compat</a>, so I assumed you use an earlier version of Scala. Their maintainers state:</p>\n<blockquote>\n<p>If you are using Scala 2.13 or newer only, then don't use this\nlibrary! Use the classes under <code>scala.jdk</code> instead; they were added to\nthe standard library in 2.13.</p>\n</blockquote>\n<p>So for Scala 2.13.x I recommend using the <a href=\"https://www.scala-lang.org/api/2.13.8/scala/jdk/FunctionWrappers$$FromJavaDoublePredicate.html\" rel=\"nofollow noreferrer\">FromJavaDoublePredicate</a> case class in the <code>FunctionWrappers</code> object instead.</p>\n","answer_id":73309330,"question_id":73298883,"last_edit_date":1660148049},{"owner":{"profile_image":"https://www.gravatar.com/avatar/80ae1a555585070d3fba444b79e350e2?s=256&d=identicon&r=PG","account_id":19896468,"user_type":"registered","user_id":14577465,"link":"https://stackoverflow.com/users/14577465/liunix","reputation":11,"display_name":"liunix"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1660117318,"creation_date":1660117318,"body":"<p>what abt this</p>\n<pre><code>import java.util.function.BinaryOperator;\npublic class GenericArithmetic {\n\n    public static &lt;T extends Number&gt; BinaryOperator&lt;T&gt; get_multiplier(T t1){\n        BinaryOperator&lt;Integer&gt; intMultiper = (i1, i2) -&gt; i1 * i2;\n        BinaryOperator&lt;Float&gt; floatMultiper = (i1, i2) -&gt; i1 * i2;\n\n        // should cache\n        switch (t1.getClass().getName()) {\n            case &quot;java.lang.Integer&quot;:\n                return (BinaryOperator&lt;T&gt;) intMultiper;\n            case &quot;java.lang.Float&quot;:\n                return (BinaryOperator&lt;T&gt;) floatMultiper;\n            default:\n                return null;\n        }\n    }\n\n    public static &lt;T extends Number&gt; Number multiply(T x, T y) throws Exception{\n        var multiplier = get_multiplier(x);\n        var res = multiplier.apply(x, y);\n        return res;\n    }\n\n\n    public static void main(String[] args) throws Exception{\n        var a1 = 3;\n        var a2 = 5;\n\n        var res = multiply(a1, a2);\n        System.out.println(res);\n\n        var b1 = 2.0f;\n        var b2 = 3.0f;\n        var res2 = multiply(b1,b2);\n        System.out.println(res2);   \n    }\n}\n\n</code></pre>\n","answer_id":73302497,"question_id":20819824},{"owner":{"profile_image":"https://i.stack.imgur.com/W3DFb.jpg?s=256&g=1","account_id":23020603,"user_type":"registered","user_id":17141716,"link":"https://stackoverflow.com/users/17141716/peterz","reputation":341,"display_name":"peterz"},"content_license":"CC BY-SA 4.0","score":3,"is_accepted":false,"last_activity_date":1660115038,"creation_date":1660115038,"body":"<p>That seems how Scala compiler translates &quot;primitive&quot; Scala types (remember, <code>Double</code> here is <code>scala.Double</code> and not <code>java.lang.Double</code>). E.g. Scala declarations</p>\n<pre><code>  var d: Double =&gt; Boolean;\n  var s: String =&gt; String;\n</code></pre>\n<p>produce (as shown by javap):</p>\n<pre><code>  public abstract scala.Function1&lt;java.lang.Object, java.lang.Object&gt; d();\n  public abstract scala.Function1&lt;java.lang.String, java.lang.String&gt; s();\n</code></pre>\n<p>Note how <code>Double</code> and <code>Boolean</code> both translate to <code>Object</code>, but <code>String</code> is preserved</p>\n","answer_id":73301988,"question_id":73298883},{"owner":{"profile_image":"https://graph.facebook.com/10210973455051695/picture?type=large","account_id":15988209,"user_type":"registered","user_id":11538031,"link":"https://stackoverflow.com/users/11538031/%d0%95%d0%bc%d0%b8%d0%bb%d0%b8%d1%8f%d0%bd-%d0%99%d0%be%d1%80%d0%b4%d0%b0%d0%bd%d0%be%d0%b2","reputation":150,"display_name":"Емилиян Йорданов"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1660111090,"creation_date":1660111090,"body":"<p>Because your interface is defined as <code>T extends AbstractPoiSearchData</code>,\nThen <code>List&lt;PoiSearchDataProvider&lt;AbstractPoiSearchData&gt;&gt;</code> it is declared as single <code>AbstractPoiSearchData</code> which doesn't extend itself.</p>\n<p>I think that in your case :</p>\n<pre><code>public interface PoiSearchDataProvider&lt;AbstractPoiSearchData&gt; {\n\n    AbstractPoiSearchData fetch(PoiSearchRequest poiSearchRequest) throws Exception;\n\n}\n</code></pre>\n<p>Will be enough and you can use magic of the polymorphism</p>\n","answer_id":73301283,"question_id":73300740},{"owner":{"profile_image":"https://i.stack.imgur.com/dVLIh.jpg?s=256&g=1","account_id":5281408,"user_type":"registered","user_id":4216641,"link":"https://stackoverflow.com/users/4216641/turing85","reputation":18797,"display_name":"Turing85"},"content_license":"CC BY-SA 4.0","score":4,"is_accepted":true,"last_activity_date":1641583272,"creation_date":1641580019,"body":"<h2>Problem</h2>\n<p>In the code presented, we declare:</p>\n<pre><code>HashMap&lt;Integer, String&gt; map = new HashMap&lt;&gt;();\n</code></pre>\n<p>and</p>\n<pre><code>public static &lt;K,V&gt; Map&lt;K,V&gt; fillMap(Map&lt;K,V&gt; map, K[] keys, V[] values)\n</code></pre>\n<p>Hence, if we call</p>\n<pre><code>map = MyUtil.fillMap(map, keys, values);\n</code></pre>\n<p>we try to assing a <code>Map&lt;...&gt;</code> (returned by <code>MyUtil::fillMap</code>) to a <code>HashMap&lt;...&gt;</code>. This cannot work since a <code>Map</code> is not a <code>HashMap</code>.</p>\n<hr />\n<h2>Possible solutions</h2>\n<p>There are two ways that come to my mind to fix this issue:</p>\n<ol>\n<li>either change the type of <code>map</code>,</li>\n<li>or make the return-type of <code>MyUtil::fillMap</code> generic.</li>\n</ol>\n<h3>1. change the type of <code>map</code>:</h3>\n<p>We can change the type of <code>map</code> from <code>HashMap&lt;...&gt;</code> to <code>Map&lt;...&gt;</code>:</p>\n<pre><code>Map&lt;Integer, String&gt; map = new HashMap&lt;&gt;();\n...\nmap = MyUtil.fillMap(map, keys, values);\n</code></pre>\n<p><a href=\"https://ideone.com/Etxw9r\" rel=\"nofollow noreferrer\"><kbd>Ideone demo</kbd></a></p>\n<h3>2. Make the return-type of <code>MyUtil::fillMap</code> generic:</h3>\n<p>By adding an additional generic parameter, we can make the concrete implementation of the return type generic as well:</p>\n<pre><code>public static void main(String[] args) {\n  HashMap&lt;Integer, String&gt; map = new HashMap&lt;&gt;();\n  final Integer[] keys = IntStream.range(0, 12).boxed().toArray(Integer[]::new);\n  final String[] values = new String[] {&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;Mai&quot;, &quot;Jun&quot;,\n      &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Okt&quot;, &quot;Nov&quot;, &quot;Dez&quot;};\n  map = MyUtil.fillMap(map, keys, values);\n  System.out.println(map);\n}\n\npublic static &lt;K, V, M extends Map&lt;K, V&gt;&gt; M fillMap(M map, K[] keys, V[] values) {\n  final int l = keys.length;\n  for (int i = 0; i &lt; l; i++) {\n    map.put(keys[i], values[i]);\n  }\n  return map;\n}\n</code></pre>\n<p><a href=\"https://ideone.com/ILKQQy\" rel=\"nofollow noreferrer\"><kbd>Ideone demo</kbd></a></p>\n<hr />\n<h3>Bonus: state-free construction of the return-value</h3>\n<p>If it is not necessary to pass-in the concrete implementation of the map used to the method, I would propose a third option that creates the map to return within the method:</p>\n<pre><code>public static &lt;K, V&gt; Map&lt;K, V&gt; fillMap(K[] keys, V[] values) {\n  return IntStream.range(0, keys.length)\n      .boxed()\n      .collect(Collectors.toMap(\n          index -&gt; keys[index],\n          index -&gt; values[index]));\n}\n</code></pre>\n<p><a href=\"https://ideone.com/dgXgcj\" rel=\"nofollow noreferrer\"><kbd>Ideone demo</kbd></a></p>\n","answer_id":70625645,"question_id":70625495,"last_edit_date":1641583272},{"owner":{"profile_image":"https://www.gravatar.com/avatar/7a46f8c7e87a67455586b285c91c57ac?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":6948309,"user_type":"registered","user_id":8819319,"link":"https://stackoverflow.com/users/8819319/shivam","reputation":79,"display_name":"Shivam"},"content_license":"CC BY-SA 4.0","score":4,"is_accepted":false,"last_activity_date":1641574705,"creation_date":1641574705,"body":"<p>The get-max operation on a queue can be implemented in amortized O(1) time by maintaining the candidates for the max value in a separate double-ended queue (<code>Deque</code>).</p>\n<ul>\n<li>On enqueue (or <code>offer</code>) operation, we check whether there are any elements at the back of the <code>Deque</code> which are lesser in value than the element being enqueued. These values can simply be removed – for these can never be the maximum value going forward.</li>\n<li>On dequeue (or <code>poll</code>) operation, we check whether the first element in the <code>Deque</code> is equal to the first element in the regular queue and if yes, remove it too.</li>\n<li>The max element is simply the first element of the <code>Deque</code>.</li>\n</ul>\n<p>All operations have amortized O(1) time complexity.</p>\n<p>Here's an implementation in Java:</p>\n<pre class=\"lang-java prettyprint-override\"><code>public class QueueWithMax&lt;T extends Comparable&lt;T&gt;&gt; {\n    Queue&lt;T&gt; queue;\n    Deque&lt;T&gt; cMax; // candidates for Max value\n\n    public QueueWithMax() {\n        queue = new LinkedList&lt;&gt;();\n        cMax = new LinkedList&lt;&gt;();\n    }\n\n    public void offer(T element) {\n        queue.offer(element);\n        while (!cMax.isEmpty() &amp;&amp; element.compareTo(cMax.peekLast()) &gt; 0) {\n            cMax.pollLast();\n        }\n        cMax.offerLast(element);\n    }\n\n    public T poll() {\n        if (cMax.peekFirst().equals(queue.peek()))\n            cMax.pollFirst();\n        return queue.poll();\n    }\n\n    public T getMax() {\n        return cMax.peekFirst();\n    }\n}\n</code></pre>\n","answer_id":70624675,"question_id":40877146},{"owner":{"profile_image":"https://lh3.googleusercontent.com/-9JmWKNYVrkA/AAAAAAAAAAI/AAAAAAAAACI/eTrny6Lo14Q/photo.jpg?sz=256","account_id":9508774,"user_type":"registered","user_id":7067337,"link":"https://stackoverflow.com/users/7067337/roy-alilin","reputation":107,"display_name":"Roy Alilin"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1641544923,"creation_date":1641544923,"body":"<p>In terms of List functionality differences, the other responses already answered this question. In terms of applicable rules of Java generics, it's a complicated topic. I wrote an in-depth article about Java generics rules, this is the link: <a href=\"https://medium.com/@royalilin/java-generics-rules-1d05de86e9cb\" rel=\"nofollow noreferrer\">https://medium.com/@royalilin/java-generics-rules-1d05de86e9cb</a></p>\n","answer_id":70618634,"question_id":490091},{"owner":{"profile_image":"https://i.stack.imgur.com/dfqcw.png?s=256&g=1","account_id":6651855,"user_type":"registered","user_id":5133585,"link":"https://stackoverflow.com/users/5133585/sweeper","reputation":224850,"display_name":"Sweeper","accept_rate":96},"content_license":"CC BY-SA 4.0","score":5,"is_accepted":true,"last_activity_date":1641543284,"creation_date":1641474746,"body":"<p>The reason why your <code>test</code> methods produce an error is because they have totally unrelated, different signatures. Note that the <a href=\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-8.html#jls-8.4.2\" rel=\"nofollow noreferrer\">signature</a> of a method consists of its name, parameter list, <em>and type parameters</em>.</p>\n<p>Quote from the Java Language Specification:</p>\n<blockquote>\n<p>Two methods or constructors, M and N, have the same signature if they have the same name, the same type parameters (if any) (§8.4.4), and, after adapting the formal parameter types of N to the type parameters of M, the same formal parameter types.</p>\n</blockquote>\n<p>Crucially, your two <code>test</code> methods do not have the <a href=\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-8.html#jls-8.4.4\" rel=\"nofollow noreferrer\">same type parameters</a>, because <code>U</code> in <code>A.test</code> has a different <em>bound</em> from <code>U</code> in <code>B.test</code>.</p>\n<blockquote>\n<p>Two methods or constructors M and N have the same type parameters if both of the following are true:</p>\n<ul>\n<li><p>M and N have same number of type parameters (possibly zero).</p>\n</li>\n<li><p>Where A1, ..., An are the type parameters of M and B1, ..., Bn are the type parameters of N, let θ=[B1:=A1, ..., Bn:=An]. Then, for all i (1 ≤ i ≤ n), the bound of Ai is the same type as θ applied to the bound of Bi.</p>\n</li>\n</ul>\n</blockquote>\n<p>Think about what would happen if <code>B.test</code> actually overrode <code>A.test</code>. You could pass a type to the type parameter <code>U</code> that is out of its bounds!</p>\n<pre><code>A a = new B();\n// This will call B.test, and U is Double, T is Integer\n// but U should extends Integer!\nDouble x = a.test((Integer)0); \n</code></pre>\n<p>For more info, <a href=\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-8.html#jls-8.4.8.1\" rel=\"nofollow noreferrer\">here</a> are the precise rules for when overriding happens. Note that criteria #4 and #5 on your list are not actually considered. They are just additional requirements that make your code not compile if you break them. One method is still &quot;defined&quot; to override another even if you break those requirements. They are listed <a href=\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-8.html#jls-8.4.8.3\" rel=\"nofollow noreferrer\">here</a> in the JLS.</p>\n","answer_id":70607642,"question_id":70607154,"last_edit_date":1641543284},{"owner":{"profile_image":"https://i.stack.imgur.com/qDozH.jpg?s=256&g=1","account_id":5126886,"user_type":"registered","user_id":4108590,"link":"https://stackoverflow.com/users/4108590/ravindra-ranwala","reputation":20904,"display_name":"Ravindra Ranwala","accept_rate":57},"content_license":"CC BY-SA 4.0","score":2,"is_accepted":true,"last_activity_date":1641524179,"creation_date":1641254379,"body":"<p>You can't create a generic array in Java. Arrays are reifiable types, and carry their type information at runtime whereas generics are non reifiable, and their type information is erased after the compile time due to erasure. This is due to the implementation of the type system in java and even though this causes some rough edges and corner cases, it eases the evolution of code into generics. Since generic type information is erased, you don't have them at runtime and that's why you can't create a generic array in java.</p>\n<p>There are two solutions to circumvent the issue you are facing. You can either create an Object array and cast it to the generic type you need.</p>\n<pre><code>final T[] arr = (T[]) new Object[n]\n</code></pre>\n<p>or else</p>\n<pre><code>final Object[] arr = new Object[]\n</code></pre>\n<p>You can do the cast when you get the items from this array like this</p>\n<pre><code>T itm = (T) arr[1];\n</code></pre>\n<p>Both of the above approaches work if you don't return this internal array.</p>\n<p>However, if you are returning the internal array, you need to create it reflectively, since you need to maintain the proper reifiable type.</p>\n<pre><code>static &lt;T&gt; T[] createArr(Class&lt;T&gt; clz) {\n    return (T[]) Array.newInstance(clz, 5);\n}\n</code></pre>\n","answer_id":70572715,"question_id":70572512,"last_edit_date":1641524179},{"owner":{"profile_image":"https://www.gravatar.com/avatar/b0615f9d8910677c053724488c8e5240?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":14529138,"user_type":"registered","user_id":14367481,"link":"https://stackoverflow.com/users/14367481/mr-proper","reputation":33,"display_name":"Mr. Proper"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1641519580,"creation_date":1641518648,"body":"<p>Given that I find the relevant JLS rules (cited in Sweeper's answer above) quite confusing, it's useful to mention the rules, as formulated by the great people at Enthuware (<a href=\"https://enthuware.com/\" rel=\"nofollow noreferrer\">https://enthuware.com/</a>).\nThey don't mention the visibility and exceptions rules, but they go in detail with Generics. And they seem to explain my two cases, mentioned in  the comments above. I'll just state the cases again here:</p>\n<pre><code>class A {\n    public &lt;T,U&gt; U test(T test) {\n        return null;\n    }\n}\n\nclass B extends A {\n    //Successful override even though type parameters do not match\n    //This method even has none.\n    @Override\n    public Number test(Object test) {\n        return null;\n    }\n}\n\nclass C {\n    public Object test(Object test) {\n        return null;\n    }\n}\n\nclass D extends C {\n    //Same situation as A and B, but with places being exchanged.\n    //Now the generic method overrides non-generic. \n    //And we have error. \n    @Override\n    public &lt;T,U&gt; U test(T test) {\n        return null;\n    }\n}\n</code></pre>\n<p>Now the steps, as formulated by Enthuware:</p>\n<p><em><strong>Steps to check for valid override:</strong></em></p>\n<p><strong>First</strong>, check the method signature (i.e. method name and the parameter list). If the signature of the method in the subclass matches the signature of the method in the super class, then it could be a valid override, otherwise it is just an overloaded method. <strong>Note that signature does not include parameter names and parameter's generic type specification.</strong></p>\n<p><em>NOTE: I think they mean for us to replace the type parameter with its bound and then compare both methods.</em></p>\n<p><strong>Second</strong>, if it is a potential override, check the generic type specification of the parameters. <strong>If the overriding method does not use a generic type specification for the parameter type, then it is valid. The reverse is not valid i.e. the overriding method is allowed to erase the generic type specification but is not allowed to add a generic type specification if the overridden method does not have it. If both the methods have a generic type specification, then the specification must match exactly.</strong> For example, if the overridden method has Set&lt;Integer&gt;, then the overriding method can use Set or Set&lt;Integer&gt;. But if overridden method has Set, then the overriding method must also have Set for a valid override.</p>\n<p><strong>Third</strong>, if it is a potential override, check the return type. Java allows &quot;covariant&quot; returns, which means, the return type of the overriding method must be the same or be a subtype of the return type mentioned in the overridden method. Check the two return types without the generic type specification. If return type of the overriding method is covariant with respect to the return type of the overriding method (for example, ArrayList is covariant with List), then perform the same check including the generic type specification (for example, ArrayList&lt;CharSequence&gt; is covariant with List&lt;? extends CharSequence&gt;).  Don't get confused by the presence of &lt;T&gt; in the code. The same rules of overriding still apply. The T in &lt;T&gt; is called as the &quot;type&quot; parameter. It is used as a place holder for whatever type is actually used while invoking the method. For example, if you call the method &lt;T&gt; List&lt;T&gt; transform(List&lt;T&gt; list) with List&lt;String&gt;, T will be typed to String. Thus, it will return List&lt;String&gt;. If, in another place, you call the same method with Integer, T will be typed to Integer and therefore, the return type of the method for that invocation will be List&lt;Integer&gt;</p>\n","answer_id":70615556,"question_id":70607154,"last_edit_date":1641519580},{"owner":{"profile_image":"https://i.stack.imgur.com/dJrV3.jpg?s=256&g=1","account_id":1888343,"user_type":"registered","user_id":1707091,"link":"https://stackoverflow.com/users/1707091/rgettman","reputation":176617,"display_name":"rgettman"},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":true,"last_activity_date":1641491487,"creation_date":1641491487,"body":"<p>Java doesn't allow this because a <code>List&lt;Car&gt;</code> is not a <code>List&lt;Object&gt;</code> even though a <code>Car</code> is an <code>Object</code>.</p>\n<p>It's not necessary to declare a type parameter, because we don't care what the type actually is.  Every reference type descends from <code>Object</code> which has a <code>toString</code> method, so we can just replace <code>List&lt;Object&gt;</code> with <code>List&lt;?&gt;</code>:</p>\n<pre><code>public static String formatList(List&lt;?&gt; listToFormat, int indentationSize) {\n</code></pre>\n","answer_id":70611427,"question_id":70610873},{"owner":{"profile_image":"https://www.gravatar.com/avatar/6a6909762e756d3ba9c521f334824e79?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":22450291,"user_type":"registered","user_id":16653700,"link":"https://stackoverflow.com/users/16653700/alias-cartellano","reputation":364,"display_name":"Alias Cartellano"},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":false,"last_activity_date":1641491060,"creation_date":1641491060,"body":"<p>You use <code>public static &lt;T&gt; String formatList(List&lt;T&gt; listToFormat,int indentationSize){</code> to accept objects instead.</p>\n<h3>Code:</h3>\n<pre><code>public static &lt;T&gt; String formatList(List&lt;T&gt; listToFormat,int indentationSize){\n        String indentation = Stream.generate(()-&gt;&quot;\\t&quot;).limit(indentationSize).collect(Collectors.joining());\n        String newIndentedLine = &quot;\\n&quot;+indentation;\n        return newIndentedLine+listToFormat.stream()\n                .map(Object::toString)\n                .collect(Collectors.joining(newIndentedLine));\n    }\n</code></pre>\n","answer_id":70611341,"question_id":70610873},{"owner":{"profile_image":"https://i.stack.imgur.com/QZvw8.jpg?s=256&g=1","account_id":4564492,"user_type":"registered","user_id":3705861,"link":"https://stackoverflow.com/users/3705861/younes-el-ouarti","reputation":2199,"display_name":"Younes El Ouarti"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1641477790,"creation_date":1641477790,"body":"<p>As an alternative, your <code>OpponentListAdapter</code> could have a <code>public static</code> &quot;creator&quot;-methods. This would look like this:</p>\n<pre class=\"lang-java prettyprint-override\"><code>public class OpponentListAdapter {\n\n  // A constructor is not necessary but you could have one if you want\n  public OpponentListAdapter(Context c, ArrayList&lt;String&gt; l){\n    ...\n  }\n\n  //now the creator method\n  public static OpponentListAdapter create(Context c, ArrayList&lt;MyCustomObject&gt; l){\n     // implement the creation here and return it\n  }\n\n}\n</code></pre>\n<p>This way you have still type safety. This pattern is used fairly often and names for the methods are usually something like:</p>\n<ul>\n<li><code>create()</code></li>\n<li><code>of()</code>  // popular example is <code>List.of()</code> from Java 9+</li>\n<li><code>from()</code></li>\n</ul>\n<p>In your case you could have e.g. 2 different static functions:</p>\n<ul>\n<li><code>createFromString(Context c, List&lt;String&gt; l)</code></li>\n<li><code>createFromMyCustomObject(Context c, List&lt;MyCustomObject&gt; l)</code></li>\n</ul>\n<p>Calling it would look something like this:</p>\n<pre class=\"lang-java prettyprint-override\"><code>...\n  List&lt;String&gt; ls = ...\n  List&lt;MyCustomObject&gt; lo = ...\n\n  OpponentListAdapter adapterFromStrings = OpponentListAdapter.createFromStrings(c, ls);\n  OpponentListAdapter adapterFromMyObject = OpponentListAdapter.createFromObjects(c, lo);\n...\n</code></pre>\n","answer_id":70608308,"question_id":21556925},{"owner":{"profile_image":"https://www.gravatar.com/avatar/ba0c264a341dfc252b07c87c8f958c0a?s=256&d=identicon&r=PG","account_id":23845919,"user_type":"unregistered","user_id":17850414,"link":"https://stackoverflow.com/users/17850414/sanjay","reputation":1,"display_name":"Sanjay"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1641472510,"creation_date":1641472510,"body":"<pre><code>List&lt;String&gt; list = Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);        \nsort(list, Comparable::&lt;String&gt;compareTo);\n</code></pre>\n<p>The <code>int compareTo (T o)</code> is not a generic method invocation. Although <code>Comparable&lt;T&gt;</code> is an interface with a type. Even if <code>compareTo</code> had returned <code>T</code>, i.e. <code>T compareTo (T o)</code> it still is not a generic method. For it to be a generic method, it needs to include a list of <code>type parameters</code>, i.e. <code>&lt;T&gt; T compareTo (T o)</code>.</p>\n","answer_id":70607179,"question_id":22588518},{"owner":{"profile_image":"https://i.stack.imgur.com/UPTah.jpg?s=256&g=1","account_id":17725449,"user_type":"registered","user_id":12869305,"link":"https://stackoverflow.com/users/12869305/alex-a","reputation":51,"display_name":"Alex A"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1641443191,"creation_date":1641442628,"body":"<p>Recently I implemented an abstract DAO (Repository) in Spring Data style and reactive manner with WebFlux for AWS DynamoDB. Not the ideal, but works fine and as I assume it can fit to your case:</p>\n<p>The first part is the abstract DAO. The common interface looks like this:</p>\n<pre><code>public interface DynamoDbRepository&lt;T&gt; {\n\n  /** Constant prefix for logging purposes */\n  String SN = &quot;[DynamoDbRepository]&quot;;\n\n  Mono&lt;PutItemEnhancedResponse&lt;T&gt;&gt; insert(final T object);\n\n  Mono&lt;T&gt; getById(final String id);\n\n  Flux&lt;T&gt; getAll();\n}\n</code></pre>\n<p>Logic implementation class which extends <strong>DynamoDbRepository</strong>:</p>\n<pre><code>@Log4j2\n@Repository\npublic abstract class EntityDynamoDbRepository&lt;T&gt; implements DynamoDbRepository&lt;T&gt; {\n\n  private final Class&lt;T&gt; clazz;\n  private DynamoDbAsyncTable&lt;T&gt; dynamoDbAsyncTable;\n\n  @Autowired\n  @SneakyThrows\n  public final void setAsyncClient(DynamoDbEnhancedAsyncClient asyncClient) {\n    DynamoDbTable tableName = AnnotationUtils.getAnnotation(clazz, DynamoDbTable.class);\n    this.dynamoDbAsyncTable =\n        asyncClient.table(tableName.value(), TableSchema.fromBean(this.clazz));\n  }\n\n  @SuppressWarnings(&quot;unchecked&quot;)\n  @SneakyThrows\n  public EntityDynamoDbRepository() {\n    clazz =\n        (Class&lt;T&gt;) GenericTypeResolver.resolveTypeArgument(getClass(), DynamoDbRepository.class);\n    if (clazz == null) {\n      throw new Exception(&quot;Not possible to resolve generic type&quot;);\n    }\n  }\n\n  @Override\n  public Mono&lt;PutItemEnhancedResponse&lt;T&gt;&gt; insert(final T object) {\n    final PutItemEnhancedRequest&lt;T&gt; putItemEnhancedRequest =\n        PutItemEnhancedRequest.builder(this.clazz)\n            .item(object)\n            .build();\n    return Mono.fromFuture(dynamoDbAsyncTable.putItemWithResponse(putItemEnhancedRequest));\n  }\n\n  public Mono&lt;T&gt; getById(final String id) {\n    return Mono.fromFuture(dynamoDbAsyncTable.getItem(getKeyBuild(id)));\n  }\n\n  public Flux&lt;T&gt; getAll() {\n    return Flux.from(dynamoDbAsyncTable.scan().items());\n  }\n\n  private Key getKeyBuild(final String id) {\n    return Key.builder().partitionValue(id).build();\n  }\n}\n</code></pre>\n<p>And finally to implement a concrete Repository:</p>\n<pre><code>@Repository\n@Log4j2\npublic class ConcreteRepository extends EntityDynamoDbRepository&lt;ConcreteEntity&gt; {}\n</code></pre>\n<p>You might noticed <strong>setAsyncClient</strong> method which defines <strong>dynamoDbAsyncTable</strong>. Due to @DynamoDbBean using the entity class name as a DynamoDB table name, I put custom annotation to assign custom table name there:</p>\n<pre><code>@Retention(RetentionPolicy.RUNTIME)\n@DynamoDbBean\npublic @interface DynamoDbTable {\n  String value();\n}\n</code></pre>\n<p>Answering your question: you can add/call whatever you want inside the <strong>EntityDynamoDbRepository</strong> constructor to wrap your &lt;POJO&gt; with any possible logic.</p>\n<p>p.s.: I didn't paste the DynamoDbEnhancedAsyncClient bean but there are a lot of samples on a GitHub</p>\n","answer_id":70602411,"question_id":67275241,"last_edit_date":1641443191},{"owner":{"profile_image":"https://www.gravatar.com/avatar/bedab8d59cdd9ca2366251c11df4795e?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":7595189,"user_type":"registered","user_id":5761558,"link":"https://stackoverflow.com/users/5761558/ernest-k","reputation":44576,"display_name":"ernest_k"},"content_license":"CC BY-SA 4.0","score":8,"is_accepted":true,"last_activity_date":1640096068,"creation_date":1640082162,"body":"<p>Compatibility with the return type <code>Stream&lt;Optional&lt;? extends Number&gt;&gt;</code> in the first case is not obtained by virtue of <code>numbers.map(Optional::of)</code> returning a <code>Stream&lt;Optional&lt;? extends Number&gt;&gt;</code> on its own; it's the compiler inferring the return type of <code>numbers.map(...)</code> due to  it being a generic method:</p>\n<pre><code>&lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper);\n</code></pre>\n<p>while <code>Stream.filter()</code> is not:</p>\n<pre><code>Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate);\n</code></pre>\n<p>Therefore, in the first case the compiler can take into account the return statement's context (<code>getNumbers</code>'s type) when inferring type of <code>numbers.map(...)</code>.<br />\nCompiler cannot do the same for <code>numbers.map(...)</code> in the second case,  as there are subsequent chained calls, that may further change the type, so it would be very hard to guess what the right inferring should be at this stage. As a result, the most specific possible type is assumed for <code>numbers.map(...)</code> (<code>Stream&lt;Optional&lt;Number&gt;&gt;</code>) and further carried on by <code>filter(...)</code>.</p>\n<p>As a different example to illustrate that, please figure out why both of these compile (<code>List.of()</code> is the same code, after all):</p>\n<pre><code>static List&lt;String&gt; stringList() {\n    return List.of();\n}\nstatic List&lt;Integer&gt; intList() {\n    return List.of();\n}\n</code></pre>\n<p>Now, why does this fail:</p>\n<pre><code>static List&lt;String&gt; stringList() {\n    return List.of().subList(0, 0);\n}\n</code></pre>\n<p>That's because <code>List.subList(...)</code> does not infer the returned list's <code>E</code> type in context (i.e., the method is not generic), it carries the <code>List</code> instance's <code>E</code> type, which, with <code>List.of()</code> in that case gets defaulted to <code>Object</code> (yes, when you have <code>return List.of();</code>, return type inference kicks in, forcing the compiler to figure out that the intent is to make <code>E</code> match <code>String</code>, the type argument in the method's return type). <i>Please note that this gets more complex than that, there are corners where inference doesn't work as wished/expected.</i></p>\n<hr />\n<p><strong>Short answer</strong>: <code>return numbers.map(Optional::of)</code> takes advantage of type inference as <code>map()</code> is generic, and <code>filter()</code> does not, expecting the <code>E</code> of <code>Stream&lt;E&gt;</code> to be carried. And with <code>numbers.map(Optional::of)</code>, <code>E</code> is <code>Optional&lt;Number&gt;</code>, not <code>Optional&lt;? extends Number&gt;</code>, and <code>filter</code> carries that.</p>\n","answer_id":70433906,"question_id":70433519,"last_edit_date":1640096068},{"owner":{"profile_image":"https://i.stack.imgur.com/uAEcW.jpg?s=256&g=1","account_id":1689973,"user_type":"registered","user_id":1552534,"link":"https://stackoverflow.com/users/1552534/wjs","reputation":37330,"display_name":"WJS"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1624035689,"creation_date":1624035689,"body":"<p>Here is how I would do it.  I'm using the Stack that's part of the API but as long as a stack has push and pop, any implementation should work.</p>\n<ul>\n<li>create a new stack in the reverse method.</li>\n<li>and as you pop one value from the original stack, push it on to the new stack.</li>\n<li>return the new stack</li>\n</ul>\n<pre><code>Stack&lt;Integer&gt; stack = new Stack&lt;&gt;();\nfor (int i = 1; i &lt; 6; i++) {\n    stack.push(i);\n}\n\nSystem.out.println(stack);\nstack = reverse(stack);\nSystem.out.println(stack);\n    \n    \npublic static &lt;T&gt; Stack&lt;T&gt; reverse(Stack&lt;T&gt; stack) {\n    Stack&lt;T&gt; reversed = new Stack&lt;&gt;();\n    while (!stack.isEmpty()) {\n        reversed.push(stack.pop());\n    }\n    return reversed;\n}\n</code></pre>\n<p>Prints</p>\n<pre><code>[1, 2, 3, 4, 5]\n[5, 4, 3, 2, 1]\n</code></pre>\n","answer_id":68038986,"question_id":68038527},{"owner":{"profile_image":"https://www.gravatar.com/avatar/96c5736faea666b5204770aa7810c4f1?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":8803777,"user_type":"registered","user_id":6579116,"link":"https://stackoverflow.com/users/6579116/pirate","reputation":2955,"display_name":"Pirate","accept_rate":27},"content_license":"CC BY-SA 4.0","score":-2,"is_accepted":true,"last_activity_date":1624034405,"creation_date":1624033414,"body":"<p>Use another stack to reverse the stack.</p>\n<pre><code>public static &lt;E&gt; Stack&lt;E&gt; reverse(Stack&lt;E&gt; s) {\n    Stack&lt;E&gt; reversedStack = new Stack&lt;E&gt;(null, null);\n    while(!Stack.&lt;E&gt;isEmpty(s) {\n        Stack.&lt;E&gt;push(reversedStack, s.value);\n        s = Stack.&lt;E&gt;pop(s));\n    }\n    return reversedStack;\n}\n</code></pre>\n","answer_id":68038541,"question_id":68038527,"last_edit_date":1624034405},{"owner":{"profile_image":"https://www.gravatar.com/avatar/7686280776045b6d5250c0762c92ffd5?s=256&d=identicon&r=PG","account_id":135067,"user_type":"registered","user_id":337621,"link":"https://stackoverflow.com/users/337621/g%c3%a1bor-lipt%c3%a1k","reputation":9676,"display_name":"G&#225;bor Lipt&#225;k","accept_rate":70},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":true,"last_activity_date":1623918736,"creation_date":1623918736,"body":"<p>I came up with this solution:</p>\n<pre><code>public interface SerializableList&lt;T&gt; extends List&lt;T&gt;, Serializable {\n}\n\npublic class SerializableArrayList&lt;T&gt; extends ArrayList&lt;T&gt; implements SerializableList&lt;T&gt; {\n    public SerializableArrayList(int initialCapacity) {\n        super(initialCapacity);\n    }\n\n    public SerializableArrayList() {\n    }\n\n    public SerializableArrayList(Collection&lt;? extends T&gt; c) {\n        super(c);\n    }\n}\n</code></pre>\n<p>Then whenever I need a <code>Serializable</code> <code>List</code> type, I can use the <code>SerializableList</code> interface and its implementation <code>SerializableArrayList</code></p>\n","answer_id":68015730,"question_id":68014704},{"owner":{"profile_image":"https://i.stack.imgur.com/uJhj3.jpg?s=256&g=1","account_id":4647011,"user_type":"registered","user_id":3764965,"link":"https://stackoverflow.com/users/3764965/nikolas-charalambidis","reputation":41835,"display_name":"Nikolas Charalambidis","accept_rate":94},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":true,"last_activity_date":1623898489,"creation_date":1623898489,"body":"<p>Use generic type, not the raw type. Try to use the narrowest type possible (ex. <code>Speak</code> instead of <code>Dog</code> because you call only methods from that interface).</p>\n<pre><code>List&lt;Speak&gt; dogs = new ArrayList&lt;&gt;();\ndogs.add(new Dog(&quot;Fred&quot;));\ndogs.add(new Dog(&quot;Wanda&quot;));\nfor (Speak e: dogs) {\n    e.speak();\n}\n</code></pre>\n","answer_id":68012279,"question_id":68012208},{"owner":{"profile_image":"https://i.stack.imgur.com/PO7Uz.jpg?s=256&g=1","account_id":2673407,"user_type":"registered","user_id":2310289,"link":"https://stackoverflow.com/users/2310289/scary-wombat","reputation":44640,"display_name":"Scary Wombat"},"content_license":"CC BY-SA 4.0","score":2,"is_accepted":false,"last_activity_date":1623898483,"creation_date":1623898483,"body":"<p>ArrayList can / should take a type</p>\n<pre><code>ArrayList&lt;Dog&gt; dogs= new ArrayList&lt;&gt;();\ndogs.add(new Dog(&quot;Fred&quot;));\ndogs.add(new Dog(&quot;Wanda&quot;));\nfor (Dog e: dogs)\n{\n    e.speak();\n}\n</code></pre>\n","answer_id":68012278,"question_id":68012208},{"owner":{"profile_image":"https://i.stack.imgur.com/JF1RF.jpg?s=256&g=1","account_id":8423897,"user_type":"registered","user_id":7505687,"link":"https://stackoverflow.com/users/7505687/dilermando-lima","reputation":1034,"display_name":"Dilermando Lima"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":true,"last_activity_date":1623897988,"creation_date":1623897537,"body":"<p>When you return a String you don't need to use generics and you can receive only an Object on methods</p>\n<pre class=\"lang-java prettyprint-override\"><code>// you can treate try and catch inside them as you prefer\n\npublic static &lt;T&gt; T fromJson(String json, Class&lt;T&gt; classToReturn) throws Exception{\n    return  new ObjectMapper().readValue(json, classToReturn);\n}\n\npublic static String toJson(Object obj) throws Exception{\n    return new ObjectMapper().writeValueAsString(obj);\n}\n\npublic static String toJsonPrettyNonNullTreatingDateTypes(Object obj) throws Exception{\n    return  new ObjectMapper()\n            .setSerializationInclusion(Include.NON_NULL)\n            .setSerializationInclusion(Include.NON_EMPTY)\n            .registerModule(new JavaTimeModule() );\n            .writerWithDefaultPrettyPrinter()\n            .writeValueAsString(obj);\n}\n\n\n</code></pre>\n<p>using them</p>\n<pre class=\"lang-java prettyprint-override\"><code>MyObject obj = fromJson(jsonString, MyObject.class );\n\nString json = toJson(new MyObject()); //  Object can accept any types\n\nString json = toJsonPrettyNonNullTreatingDateTypes(new MyObject());\n\n</code></pre>\n","answer_id":68012167,"question_id":67961312,"last_edit_date":1623897988},{"owner":{"profile_image":"https://i.stack.imgur.com/W6OMC.png?s=256&g=1","account_id":1056871,"user_type":"registered","user_id":1059372,"link":"https://stackoverflow.com/users/1059372/eugene","reputation":117749,"display_name":"Eugene","accept_rate":97},"content_license":"CC BY-SA 4.0","score":5,"is_accepted":true,"last_activity_date":1623786523,"creation_date":1623786523,"body":"<p>change the type and the constructor:</p>\n<pre><code>private final Class&lt;T&gt; enumClass;\n\npublic EnumSimplesConverter(Class&lt;T&gt; enumClass) {\n    this.enumClass = enumClass;\n}\n</code></pre>\n<p>you already enforce the <code>T</code> via <code>T extends Enum&lt;T&gt;</code></p>\n","answer_id":67992612,"question_id":67992546},{"owner":{"profile_image":"https://i.stack.imgur.com/W6A8i.jpg?s=256&g=1","account_id":14429973,"user_type":"registered","user_id":10423604,"link":"https://stackoverflow.com/users/10423604/volodya-lombrozo","reputation":2483,"display_name":"Volodya Lombrozo"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":true,"last_activity_date":1623785809,"creation_date":1623785809,"body":"<p>You could use <code>&lt;? super RunnableRule&lt;?,?&gt;&gt;</code> in this case:</p>\n<pre class=\"lang-java prettyprint-override\"><code> List&lt;? super RunnableRule&lt;?,?&gt;&gt; list = new ArrayList&lt;&gt;();\n list.add(new AcksTermsSignUpRule());\n list.add(new RunnableRule&lt;String, Double&gt;() {});\n</code></pre>\n<p>You could read docs right <a href=\"https://docs.oracle.com/javase/tutorial/extra/generics/wildcards.html\" rel=\"nofollow noreferrer\">there</a></p>\n<blockquote>\n<p>Collection&lt;?&gt; (pronounced &quot;collection of unknown&quot;), that is, a\ncollection whose element type matches anything</p>\n<p>A lower bounded wildcard restricts the unknown type to be a specific\ntype or a super type of that type. A lower bounded wildcard is\nexpressed using the wildcard character ('?'), following by the super\nkeyword, followed by its lower bound: &lt;? super A&gt;.</p>\n</blockquote>\n","answer_id":67992459,"question_id":67988538},{"owner":{"profile_image":"https://i.stack.imgur.com/jXcg4.png?s=256&g=1","account_id":1263831,"user_type":"registered","user_id":1221571,"link":"https://stackoverflow.com/users/1221571/eran","reputation":388998,"display_name":"Eran","accept_rate":67},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":true,"last_activity_date":1609919832,"creation_date":1609919832,"body":"<p>If you change</p>\n<pre><code>public static &lt;T extends InstanceClass&lt;Integer&gt;&gt; void prt(T q)\n</code></pre>\n<p>to</p>\n<pre><code>public static &lt;T&gt; void prt(T q)\n</code></pre>\n<p>the compiler wouldn't know that the type parameter <code>T</code> must be an <code>InstanceClass</code>, and therefore it wouldn't know that it has <code>getNum()</code> and <code>calculate()</code> methods, which you are trying to call from <code>prt</code>.</p>\n<p>In fact, the compiler would allow you to pass to the <code>prt</code> method any argument, including instances of classes unrelated to <code>InstanceClass</code>, which don't have the methods you are trying to call inside <code>prt</code>.</p>\n","answer_id":65592093,"question_id":65592052},{"owner":{"profile_image":"https://www.gravatar.com/avatar/b13bedc5215730fbce5edff6c130988a?s=256&d=identicon&r=PG","account_id":401843,"user_type":"registered","user_id":768644,"link":"https://stackoverflow.com/users/768644/rzwitserloot","reputation":89873,"display_name":"rzwitserloot"},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":false,"last_activity_date":1609904070,"creation_date":1609904070,"body":"<blockquote>\n<p><code>assertEquals(new GenericInterfaceImpl&lt;String&gt;().getGenericType(), String.class, &quot;Type should resolve to String.class&quot;);</code></p>\n</blockquote>\n<p>impossible.</p>\n<blockquote>\n<p><code>assertEquals(new TypedInterfaceImpl().getGenericType(), String.class, &quot;Type should resolve to String.class&quot;);</code></p>\n</blockquote>\n<p>Possible, but a bad idea; it would require you to document your interface with 'when implementing this interface, you <strong>must</strong> pick a concrete, non-type-parameterized type for <code>T</code> or nothing works right.', which is a weird caveat.</p>\n<blockquote>\n<p><code>Class&lt;T&gt; getGenericType() {</code></p>\n</blockquote>\n<p>Bad idea; the thing in the <code>&lt;&gt;</code> does not have to be a <code>Class</code> - for example, it could be <code>List&lt;String&gt;</code>, which is not representable as a class object (only <code>List</code> is, there is one object that represents all lists, there's no way to have an instance of j.l.Class that represents <code>List&lt;String&gt;</code>).</p>\n<blockquote>\n<p>The Javadocs for getGenericInterfaces</p>\n</blockquote>\n<p><code>getGenericInterfaces</code> is a reflective tool, but it reflects on the definition of the type only. Given <code>class Foo&lt;T&gt; implements Thingie&lt;T&gt;</code>, <code>getGenericInterfaces</code> can only be executed on the entire <code>Foo</code> class, and you get back an object that presents <code>Thingie&lt;T&gt;</code>. Given an instance such as <code>new Foo&lt;String&gt;()</code> it is <strong>not possible</strong> to derive String.</p>\n<blockquote>\n<p>Is there a way to solve this problem at all or is this a &quot;core limitation&quot; of the Java language?</p>\n</blockquote>\n<p>It's a core limitation, so, no. Not directly.</p>\n<p>One trick is to add a method:</p>\n<pre><code>public interface Foo&lt;T&gt; {\n   public Class&lt;T&gt; getType();\n}\n</code></pre>\n<p>and let implementers worry about the problem. This is still a bad idea, for example, a <code>Class</code> object cannot represent <code>List&lt;String&gt;</code>, so you've effectively made it impossible for Foo to properly represent anything where you want the <code>T</code> to be anything that has type params.</p>\n<p>Take a step back instead. What are you <em>actually</em> trying to do? Nobody wakes up and goes: I know! I'll build an interface that can report its own type parameter but reified! What did you want to build? A chat app? A plugin system for photoshop?</p>\n<p><code>java.lang.Class</code>, with the intent to invoke <code>.newInstance()</code> on it, is a piss poor factory. Thus, if that is what you intend to do, use factories instead.</p>\n<p>Anotehr solution, but you probably don't want this, and before you got all excited, it's got plenty of limitations, are a concept called Super Type Tokens; you can search the web if you must know.</p>\n","answer_id":65589852,"question_id":65589741},{"owner":{"profile_image":"https://i.stack.imgur.com/s4qlq.png?s=256&g=1","account_id":6780825,"user_type":"registered","user_id":5221149,"link":"https://stackoverflow.com/users/5221149/andreas","reputation":155680,"display_name":"Andreas"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":true,"last_activity_date":1609867103,"creation_date":1609867103,"body":"<p>Read the <em>documentation</em>, i.e. the javadoc of <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\" rel=\"nofollow noreferrer\"><code>getClass()</code></a> in class <code>Object</code>:</p>\n<blockquote>\n<p><strong>The actual result type is <code>Class&lt;? extends |X|&gt;</code> where <code>|X|</code> is the erasure of the static type of the expression on which <code>getClass</code> is called.</strong> For example, no cast is required in this code fragment:</p>\n<pre class=\"lang-java prettyprint-override\"><code>Number n = 0;\nClass&lt;? extends Number&gt; c = n.getClass();\n</code></pre>\n</blockquote>\n<p><sup><em>The bolding is from the javadoc, not added by me.</em></sup></p>\n<p>For class <code>Object</code> itself, it means that the return type is <code>Class&lt;? extends Object&gt;</code>, but since <code>Class&lt;?&gt;</code> is shorthand for <code>Class&lt;? extends Object&gt;</code>, the javadoc simply shows the shorthand.</p>\n<p>Quoting the Java Language Specification, section <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1\" rel=\"nofollow noreferrer\">4.5.1. Type Arguments of Parameterized Types</a>:</p>\n<blockquote>\n<p>The wildcard <code>? extends Object</code> is equivalent to the unbounded wildcard <code>?</code>.</p>\n</blockquote>\n","answer_id":65583567,"question_id":65583228},{"owner":{"profile_image":"https://www.gravatar.com/avatar/44c841338e1646af9a977f1fa0e23948?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":162699,"user_type":"registered","user_id":3788176,"link":"https://stackoverflow.com/users/3788176/andy-turner","reputation":138060,"display_name":"Andy Turner","accept_rate":54},"content_license":"CC BY-SA 4.0","score":3,"is_accepted":false,"last_activity_date":1609865860,"creation_date":1609865860,"body":"<blockquote>\n<p>But why does the return type of the getClass method is just<code>Class&lt;?&gt;</code> in the Object class</p>\n</blockquote>\n<p><code>Class&lt;?&gt;</code> is the same as <code>Class&lt;? extends Object&gt;</code>, because all classes (except <code>Object</code>) have <code>Object</code> as a superclass. There's no reason to include that bound explicitly.</p>\n","answer_id":65583280,"question_id":65583228},{"owner":{"profile_image":"https://www.gravatar.com/avatar/0cff99aaf31098275563ea9924cb05cf?s=256&d=identicon&r=PG","account_id":1539741,"user_type":"registered","user_id":1434678,"link":"https://stackoverflow.com/users/1434678/soroosh-sarabadani","reputation":439,"display_name":"Soroosh Sarabadani"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1609864514,"creation_date":1609864514,"body":"<p>Your class has several unknown types for Quarkus and as the result, it cannot make an object out of it.</p>\n<p>You can define producer for DaoManagers with your interested entity, then Quarkus is able to create objects.</p>\n","answer_id":65582916,"question_id":65505831},{"owner":{"profile_image":"https://i.stack.imgur.com/eR09c.jpg?s=256&g=1","account_id":13177411,"user_type":"registered","user_id":9517937,"link":"https://stackoverflow.com/users/9517937/sdindiver","reputation":501,"display_name":"sdindiver"},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":false,"last_activity_date":1609843174,"creation_date":1609843174,"body":"<p>I am giving the answer to my posted question that I found more accurate.</p>\n<pre><code>public static &lt;T&gt; void sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c) {\n        list.sort(c);\n}\n</code></pre>\n<p>and</p>\n<pre><code>public static &lt;T&gt; void sort(List&lt;? extends T&gt; list, Comparator&lt;? super T&gt; c) {\n        list.sort(c);\n}\n</code></pre>\n<p>are same. Because we are calling above methods either this way</p>\n<pre><code>ArrayList&lt;Employee&gt; list = new ArrayList&lt;&gt;();\nlist.add(new Manager(106,true));\nlist.add(new Manager(102,true));\nsort(list, (p1, p2) -&gt; \np1.getEmployeeId().compareTo(p2.getEmployeeId()));\n\n`T` argument in `sort()` will be considered as Manager in this case\n</code></pre>\n<p>or</p>\n<pre><code> ArrayList&lt;Employee&gt; list = new ArrayList&lt;&gt;();\n list.add(new Employee(106,true));\n list.add(new Employee(102,true));\n sort(list, (p1, p2) -&gt; \n p1.getEmployeeId().compareTo(p2.getEmployeeId()));\n\n`T` argument in `sort()` will be Employee in this case.\n</code></pre>\n<p>We do not gain anything writing <code>List&lt;? extends T&gt;</code> in <code>sort()</code>. A real word example if have two balls, then we can use either only one terms, first ball is bigger than second or first ball is smaller than second. Only one thing is possible either bigger or smaller\nif we have three balls, we can say, first ball is smaller than second and third ball is bigger than second, then two terms can be used smaller and bigger.</p>\n<p>We need some base <code>T</code> then we can use either  <code>? extends T</code> or  <code>? super T</code> or both for example binary search method signature that I have posted above.</p>\n<p>JDK also provided sort method with three signature also but in different way</p>\n<pre><code>public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt; implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable {\n    public ArrayList(Collection&lt;? extends E&gt; c) {\n        elementData = c.toArray();\n        if ((size = elementData.length) != 0) {\n            // c.toArray might (incorrectly) not return Object[] (see 6260652)\n            if (elementData.getClass() != Object[].class)\n                elementData = Arrays.copyOf(elementData, size, Object[].class);\n        } else {\n            // replace with empty array.\n            this.elementData = EMPTY_ELEMENTDATA;\n        }\n    }\n\n@Override\n    @SuppressWarnings(&quot;unchecked&quot;)\n    public void sort(Comparator&lt;? super E&gt; c) {\n        final int expectedModCount = modCount;\n        Arrays.sort((E[]) elementData, 0, size, c);\n        if (modCount != expectedModCount) {\n            throw new ConcurrentModificationException();\n        }\n        modCount++;\n    }\n</code></pre>\n<p>Above <code>ArrayList&lt;E&gt;</code> can be of <code>E</code> type, It can accept <code>Collection&lt;? extends E&gt; c</code> and can be sorted using <code>Comparator&lt;? super E&gt; c</code>. So as per explain we also have three balls</p>\n<ul>\n<li>E type of element It can be</li>\n<li>Collection&lt;? extends E&gt; It can accept list</li>\n<li>Comparator&lt;? super E&gt; c It can be sorted by such comparator</li>\n</ul>\n","answer_id":65577279,"question_id":65414023},{"owner":{"profile_image":"https://i.stack.imgur.com/3KaJD.jpg?s=256&g=1","account_id":461282,"user_type":"registered","user_id":1249225,"link":"https://stackoverflow.com/users/1249225/krushna","reputation":5319,"display_name":"Krushna","accept_rate":81},"content_license":"CC BY-SA 4.0","score":2,"is_accepted":true,"last_activity_date":1609779027,"creation_date":1376637528,"body":"<p>You can not do var-arg generic but you can do something like below</p>\n<pre><code>import java.util.Collection;\nimport java.util.Set;\n\npublic interface NKeyMap&lt;K, V&gt; {\n    public void clear();\n    public boolean containsKey(K... k );\n    public boolean containsValue(V value);\n    public V get(K... k);\n    public boolean isEmpty();\n    public V put(V value, K...k);\n    public V remove(V value, K... k);\n    public int size();\n    public Collection&lt;V&gt; values();\n    public Set&lt;K&gt; keys();\n}\n</code></pre>\n","answer_id":18267879,"question_id":18267714,"last_edit_date":1609779027},{"owner":{"profile_image":"https://www.gravatar.com/avatar/4c16849c5f9444a685f62cdc2a15c3ac?s=256&d=identicon&r=PG","account_id":1119690,"user_type":"registered","user_id":1108305,"link":"https://stackoverflow.com/users/1108305/m-justin","reputation":15787,"display_name":"M. Justin","accept_rate":47},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1609743949,"creation_date":1609743949,"body":"<p>In Scheme, list equivalence is based completely on the structure of the items.</p>\n<p>In Java by comparison, equality is context-dependent depending on the type of object, and may use some or all of the internal structure in its equivalence calculation.  What it means for two objects of the same type to be &quot;equal&quot; is up to the object type to determine, so long as the <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\" rel=\"nofollow noreferrer\">general contract for equals</a> is met (most notably that it forms an <a href=\"https://en.wikipedia.org/wiki/Equivalence_relation\" rel=\"nofollow noreferrer\">equivalence relation</a> with all other objects).</p>\n<p>Assuming all types used in a program have a reasonable <code>equals</code> definition, they <em>should</em> have a &quot;reliable&quot; value comparison, at least in the sense of the object oriented paradigm.</p>\n<p>Returning to the analogous Java <code>equal?</code> implementation.  It's a bit hard to piece together from the question's phrasing, but from context clues it appears that this is also attempting to operate on lists of items.  The <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/List.html#equals(java.lang.Object)\" rel=\"nofollow noreferrer\"><code>equals</code></a> method on Java's <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/List.html\" rel=\"nofollow noreferrer\"><code>List</code></a> type already implements behavior directly analogous to Scheme's <code>equals?</code> operation:</p>\n<blockquote>\n<p>Compares the specified object with this list for equality. Returns <code>true</code> if and only if the specified object is also a list, both lists have the same size, and all corresponding pairs of elements in the two lists are <em>equal</em>. (Two elements e1 and e2 are <em>equal</em> if <code>Objects.equals(e1, e2)</code>.) In other words, two lists are defined to be equal if they contain the same elements in the same order.</p>\n</blockquote>\n<p>This definition also means that recursive list structures also work in a similar manner as Scheme's <code>equals?</code> operation.</p>\n<p>Note that the <code>List</code> behavior is notably different from that of Java's array type (which you mention in your question).  Arrays in Java are a fairly low-level type, and do not support much of the typical object-oriented functionality one might expect.  Of particular note, for equality, arrays are compared by object reference rather than by a structural comparison of the items in the array.  There are ways to do sensible equality comparison on arrays using methods in the <code>Arrays</code> class (e.g. <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Arrays.html#equals(java.lang.Object%5B%5D,java.lang.Object%5B%5D)\" rel=\"nofollow noreferrer\"><code>Arrays.equals</code></a> and <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Arrays.html#deepEquals(java.lang.Object%5B%5D,java.lang.Object%5B%5D)\" rel=\"nofollow noreferrer\"><code>Arrays.deepEquals</code></a>).</p>\n<hr />\n<p>As an aside, to address your postscript about the equality of two bare <code>Object</code>s.</p>\n<pre class=\"lang-java prettyprint-override\"><code>assert !(new Object().equals(new Object()))\n</code></pre>\n<p>From an object-oriented perspective, it is sensible that two bare objects be equal only if they're the same reference.  First, as mentioned above, there is not a direct relation between an object's internal structure and its equality, so there's no <em>need</em> for them to be equal.  There is virtually no context as to what two different instances of <code>Object</code> represent from a object modeling perspective, so there's no inherent conceptual way to tell that these two objects are logically the &quot;same&quot; thing.</p>\n<hr />\n<p>In summary, assuming all the types in your list have a <em>sensible</em> version of <code>equals()</code> defined per their object's type, Java's <code>List.equals()</code> behaves directly analogously to Scheme's <code>equals?</code> operation.</p>\n","answer_id":65558844,"question_id":19051021},{"owner":{"profile_image":"https://graph.facebook.com/2006365462920236/picture?type=large","account_id":13055145,"user_type":"registered","user_id":9434244,"link":"https://stackoverflow.com/users/9434244/martin-clever","reputation":147,"display_name":"Martin Clever"},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":true,"last_activity_date":1609665056,"creation_date":1609665056,"body":"<p>As long as @JohannesKuhn doesn't post his comment as an answer:<br />\nThe solution is <code>class B&lt;T extends SomeClass, R extends SomeClass, S extends A&lt;T, R&gt;&gt;</code></p>\n","answer_id":65548194,"question_id":65541924},{"owner":{"profile_image":"https://i.stack.imgur.com/a6vMO.jpg?s=256&g=1","account_id":11119792,"user_type":"registered","user_id":8163025,"link":"https://stackoverflow.com/users/8163025/saver","reputation":2581,"display_name":"saver"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1609634511,"creation_date":1609634511,"body":"<p>The main issue is inside of <code>BasicComboBoxRenderer</code>, because that class hasn't generic parameter for <code>ListCellRenderer</code> interface, but <code>JComboBox</code> class expects generalized <code>aRenderer</code> variable, see snippet:</p>\n<pre><code>    public void setRenderer(ListCellRenderer&lt;? super E&gt; aRenderer) {\n        ListCellRenderer&lt;? super E&gt; oldRenderer = renderer;\n        renderer = aRenderer;\n        firePropertyChange( &quot;renderer&quot;, oldRenderer, renderer );\n        invalidate();\n    }\n</code></pre>\n<p>As workaround I can propose to copy all logic from <code>BasicComboBoxRenderer</code> to you own custom class and add generic type for <code>ListCellRenderer</code>, and that approcu will solve warning during compilation process.</p>\n","answer_id":65545601,"question_id":64888934},{"owner":{"profile_image":"https://lh4.googleusercontent.com/--0W1SyomlMg/AAAAAAAAAAI/AAAAAAAAAGY/w5Ja9a3U4zE/photo.jpg?sz=256","account_id":9127082,"user_type":"registered","user_id":6790326,"link":"https://stackoverflow.com/users/6790326/dorian-gray","reputation":2952,"display_name":"Dorian Gray"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1608667264,"creation_date":1608667264,"body":"<p>In the sort function, you only have two different types: The type of the list and the type of the comparator. <code>T</code> is the type of the elements in the <code>List</code>, and <code>? super T</code> is the type of the <code>Comparator</code>. You do not gain anything by adding\n<code>List&lt;? extends T&gt;</code> there.</p>\n<p>In <code>binarySearch</code> you have three types: <code>T</code>denotes the type of the <code>key</code> to be searched, <code>? extends T</code> is the type of the list and <code>? super T</code> is the type of the comparator.</p>\n","answer_id":65415114,"question_id":65414023},{"owner":{"profile_image":"https://www.gravatar.com/avatar/c17dd9cf3e2322be19639e96da9f3eb3?s=256&d=identicon&r=PG","account_id":1082858,"user_type":"registered","user_id":1079354,"link":"https://stackoverflow.com/users/1079354/makoto","reputation":104688,"display_name":"Makoto","accept_rate":93},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1608662204,"creation_date":1608662204,"body":"<p>Sorting a list only makes sense only if the list is homogeneous; if one is sorting a pile of papers, it suddenly breaks down if you introduce a whole book in the mix.</p>\n<p>Searching a list makes sense if each item is comparable to each other.  If you can define a relationship between a piece of A4 paper and a novel, then you can search between them.</p>\n","answer_id":65414091,"question_id":65414023},{"owner":{"profile_image":"https://i.stack.imgur.com/mOJf7.jpg?s=256&g=1","account_id":18536445,"user_type":"registered","user_id":13506001,"link":"https://stackoverflow.com/users/13506001/rohith-v","reputation":1099,"display_name":"Rohith V"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1606552774,"creation_date":1606552774,"body":"<p>I think you can also make use of\n<code>Collections.max(queue)</code> in case of queue</p>\n","answer_id":65047840,"question_id":40877146},{"owner":{"profile_image":"https://www.gravatar.com/avatar/23e44feadef4ec70940f7dde38bf772e?s=256&d=identicon&r=PG","account_id":2197912,"user_type":"registered","user_id":1943126,"link":"https://stackoverflow.com/users/1943126/michail-alexakis","reputation":1425,"display_name":"Michail Alexakis"},"content_license":"CC BY-SA 4.0","score":5,"is_accepted":false,"last_activity_date":1597606010,"creation_date":1597606010,"body":"<p>If you are willing to convert to an unmodifiable <code>List&lt;Object&gt;</code>, you can simply wrap your list with <code>Collections.unmodifiableList</code>. This works because this static method has a proper wildcard type <code>? extends T</code> for the element type of the wrapped list (where <code>T</code> is the type of the result list).</p>\n<p>Note that, in most cases, creating an unmodifiable view is what you <em>should</em> do, otherwise objects of different types (other than <code>String</code>) may be added in the original list (which should only hold <code>String</code>s).</p>\n","answer_id":63441108,"question_id":4288084},{"owner":{"profile_image":"https://i.stack.imgur.com/zNAXD.jpg?s=256&g=1","account_id":7666017,"user_type":"registered","user_id":5809720,"link":"https://stackoverflow.com/users/5809720/sagar-gangwal","reputation":7604,"display_name":"Sagar Gangwal"},"content_license":"CC BY-SA 4.0","score":2,"is_accepted":true,"last_activity_date":1597600350,"creation_date":1597595898,"body":"<p>You can try below code.</p>\n<p>For getting that User class you can use <strong><code>fieldElement.getEnclosingElement()</code></strong>, it will give you class name with full package name.</p>\n<p>Now if you want only name of that class you can use <strong><code>enclosingElement.getSimpleName()</code></strong>.</p>\n<p>And to get enclosedByElement you can use <a href=\"https://javadoc.io/doc/org.kohsuke.sorcerer/sorcerer-javac/latest/com/sun/tools/javac/code/Symbol.TypeSymbol.html\" rel=\"nofollow noreferrer\">TypeSymbol</a>.Simply cast fieldElement.asType() to <strong><code>Type</code></strong> and get <strong><code>tsym</code></strong> attribute.</p>\n<pre><code>        VariableElement fieldElement;\n\n        Symbol.TypeSymbol containerForEnclosingElement=((Type)fieldElement.asType()).tsym;\n        Element enclosingElement=fieldElement.getEnclosingElement();\n\n        System.out.println(&quot;containerForEnclosingElement:- &quot; +  containerForEnclosingElement);\n        System.out.println(&quot;enclosingElement:- &quot; +  enclosingElement);\n        System.out.println(&quot;enclosingElement Name:- &quot; +  enclosingElement.getSimpleName());\n        System.out.println(&quot;fieldElement without root Type:- &quot;+((Type) fieldElement.asType()).getTypeArguments().get(0));\n</code></pre>\n<p>Above code will print output as below.</p>\n<pre><code>containerForEnclosingElement:- java.util.Set\nenclosingElement:- com.example.demo.test.model.User.\nenclosingElement Name:- User\nfieldElement without root Type:- com.example.demo.test.model.User\n</code></pre>\n<p>You can also create one Utility method to get this two values.</p>\n<p>This will help you.</p>\n","answer_id":63439432,"question_id":63437899,"last_edit_date":1597600350},{"owner":{"profile_image":"https://lh5.googleusercontent.com/-gCJ9KuZ_-mA/AAAAAAAAAAI/AAAAAAAAAF8/rloa0hwh82Q/photo.jpg?sz=256","account_id":6183412,"user_type":"registered","user_id":4818195,"link":"https://stackoverflow.com/users/4818195/hatem-mohamed","reputation":220,"display_name":"Hatem Mohamed"},"content_license":"CC BY-SA 4.0","score":2,"is_accepted":false,"last_activity_date":1597435712,"creation_date":1597434966,"body":"<p>In your case, you don't need to use generics as the basic polymorphism will be sufficient</p>\n<pre><code> public String translateBar(Foo pojo){\n    //return translated string\n}\n</code></pre>\n<p>And this will solve the issue if you just want to call the <code>getFoo()</code></p>\n","answer_id":63419287,"question_id":63419194,"last_edit_date":1597435712},{"owner":{"profile_image":"https://www.gravatar.com/avatar/a1254dabbec32d7cbc502dfd2fd0438d?s=256&d=identicon&r=PG","account_id":990530,"user_type":"registered","user_id":1007991,"link":"https://stackoverflow.com/users/1007991/renato","reputation":13072,"display_name":"Renato","accept_rate":82},"content_license":"CC BY-SA 4.0","score":3,"is_accepted":true,"last_activity_date":1597435055,"creation_date":1597435055,"body":"<p>In Java, a method that accepts a certain type, say <code>Foo</code>, will accept also any sub-type of <code>Foo</code>. There's no need to use generics in such case.</p>\n<p>Here's how your code should look like:</p>\n<pre><code>public interface Foo {\n    String getFoo();\n}\n\npublic class Bar1 implements Foo {\n    final String foo = &quot;foobar&quot;;\n    @Override\n    public String getFoo(){\n        return foo;\n    }\n}\n\npublic class TranslateBar {\n    public String translateBar(Foo pojo) {\n        //return translated string\n    }\n}\n</code></pre>\n<p>Now you can call <code>translateBar</code> with any implementation of <code>Foo</code> including <code>Bar1</code>:</p>\n<pre><code>new TranslateBar().translateBar(new Bar1());\n</code></pre>\n<p>You would use generic for different cases... for example, where the type returned by the <code>getFoo</code> method depended on the implementation.</p>\n<pre><code>// the type T is generic and depends on the implementation\npublic interface Foo&lt;T&gt; {\n    T getFoo();\n}\n\npublic class Bar1 implements Foo&lt;String&gt; {\n    final String foo = &quot;foobar&quot;;\n    @Override\n    public String getFoo(){\n        return foo;\n    }\n}\n\npublic class TranslateBar {\n    public String translateBar(Foo&lt;?&gt; pojo) {\n        //return translated string\n    }\n}\n</code></pre>\n","answer_id":63419297,"question_id":63419194},{"owner":{"profile_image":"https://i.stack.imgur.com/7ghSp.jpg?s=256&g=1","account_id":238684,"user_type":"registered","user_id":507738,"link":"https://stackoverflow.com/users/507738/mc-emperor","reputation":22543,"display_name":"MC Emperor","accept_rate":71},"content_license":"CC BY-SA 4.0","score":2,"is_accepted":false,"last_activity_date":1597421664,"creation_date":1597335436,"body":"<p>I think that this is not a bug, but a consequence of type inference. OP already mentioned it. The compiler will not try to match an exact type, but <em>the most specific one</em>.</p>\n<p>Let us analyse how type inference works with the example provided by OP.</p>\n<pre><code>public static &lt;F, T&gt; Predicate&lt;F&gt; isEquals(Function&lt;F, T&gt; func, T expValue) {\n    return actual -&gt; Objects.equals(func.apply(actual), expValue);\n}\n</code></pre>\n<pre><code>Predicate&lt;String&gt; lLengthIs20 = isEquals(String::length, &quot;Whud?&quot;);\n</code></pre>\n<p>Here the target type is <code>Predicate&lt;String&gt;</code>, and according to the return type of the method, which is <code>Predicate&lt;F&gt;</code> (where <code>F</code> is a generic type), <code>F</code> is bound to a <code>String</code>. Then the method reference <code>String::length</code> is checked whether it fits into the method parameter <code>Function&lt;F, T&gt;</code>, where <code>F</code> is <code>String</code> and <code>T</code> some unbounded type. And this is important: while the method reference <code>String::length</code> looks like its target type is <code>Integer</code>, it is also compatible to <code>Object</code>. Similarly, <code>Object obj = &quot;Hello&quot;.length()</code> is valid. It is not <em>required</em> to be an <code>Integer</code>. Likewise, both <code>Function&lt;String, Object&gt; func = String::length</code> and <code>Function&lt;String, Object&gt; func = str -&gt; str.length()</code> are valid and do not emit a compiler warning.</p>\n<h2>What exactly is inference?</h2>\n<p>Inference is to defer the job of selecting the appropriate type to the compiler. You ask the compiler: &quot;Please, could you fill in appropriate types, so that it'll work?&quot; And then the compiler answers: &quot;Okay, but I follow certain rules when selecting the type.&quot;</p>\n<p>The compiler selects the most specific type. In the case of <code>isEquals(String::length, 20)</code>, both the target type of <code>String::length</code> and <code>20</code> is <code>Integer</code>, so the compiler infers it as such.</p>\n<p>However, in the case of <code>isEquals(String::length, &quot;Whud?&quot;)</code> the compiler first tries to infer <code>T</code> to an <code>Integer</code> because of the type of <code>String::length</code>, but it fails to do so because of the type of the second argument. The compiler then tries to find the closest intersection of <code>Integer</code> and <code>String</code>.</p>\n<h2>Can I aid or bypass the compiler?</h2>\n<p>Bypass? No, not really. Well, sometimes typecasting is a way of bypassing, like in the following example:</p>\n<pre><code>Object o = 23; // Runtime type is integer\nString str = (String) o; // Will throw a ClassCastException\n</code></pre>\n<p>The typecast here is a potentially unsafe operation, because <code>o</code> may or may not be a <code>String</code>. With this typecast, you say to the compiler: &quot;In this specific case, I know better than you&quot; – with the risk of getting an exception during runtime.</p>\n<p>Still, not all typecast operations are permitted:</p>\n<pre><code>Integer o = 23;\nString str = (String) o;\n// Results in a compiler error: &quot;incompatible types: Integer cannot be converted to String&quot;\n</code></pre>\n<p>But you can certainly aid the compiler.</p>\n<h3>Type witness</h3>\n<p>One option may be to <strong>use a <em>type witness</em></strong>:</p>\n<pre><code>Predicate&lt;String&gt; lLengthIs20 = YourClass.&lt;String, Integer&gt;isEquals(String::length, &quot;what?&quot;);\n</code></pre>\n<p>This code will emit a compiler error:</p>\n<blockquote>\n<p>incompatible types: String cannot be converted to Integer</p>\n</blockquote>\n<h3>Add a <code>Class&lt;T&gt;</code> parameter to <code>isEquals</code></h3>\n<p>Another option would be to <strong>add a parameter</strong> to <code>isEquals</code>:</p>\n<pre><code>public static &lt;F, T&gt; Predicate&lt;F&gt; isEquals(Class&lt;T&gt; type, Function&lt;F, T&gt; func, T expValue) {\n    return actual -&gt; Objects.equals(func.apply(actual), expValue);\n}\n</code></pre>\n<pre><code>// This will succeed:\nPredicate&lt;String&gt; lLengthIs20 = isEquals(Integer.class, String::length, 20);\n// This will fail:\nPredicate&lt;String&gt; lLengthIs20 = isEquals(Integer.class, String::length, &quot;Whud?&quot;);\n</code></pre>\n<h3>Typecasting</h3>\n<p>A third option may be <em><strong>typecasting</strong></em>. Here you cast <code>String::length</code> to a <code>Function&lt;String, Integer&gt;</code>, and now the compiler is restricted to <code>F = String, T = Integer</code>. Now the usage of <code>&quot;Whud?&quot;</code> causes trouble.</p>\n<pre><code>Predicate&lt;String&gt; predicate = isEquals((Function&lt;String, Integer&gt;) String::length, &quot;Whud?&quot;);\n</code></pre>\n","answer_id":63399216,"question_id":63384914,"last_edit_date":1597421664},{"owner":{"profile_image":"https://i.stack.imgur.com/7bZhz.png?s=256&g=1","account_id":5640884,"user_type":"registered","user_id":4465539,"link":"https://stackoverflow.com/users/4465539/deduper","reputation":1954,"display_name":"deduper","accept_rate":33},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":true,"last_activity_date":1597411987,"creation_date":1597411987,"body":"<p><em><strong>TL;DR</strong></em>: Not trying to snipe @MAnouti's points that you've earmarked for him/her. But for the sake of completeness, OP, I wanted to share what I observed in <a href=\"https://www.browxy.com#USER_307436\" rel=\"nofollow noreferrer\"><em>my attempt to reproduce your error</em></a>.</p>\n<hr />\n<blockquote>\n<p>„<em>This results in the following error:</em>“</p>\n<pre><code>Type mismatch: cannot convert from Class&lt;Integer&gt; to Integer\n</code></pre>\n</blockquote>\n<p>The original example code in your question fails to compile (<a href=\"https://www.browxy.com#USER_307436\" rel=\"nofollow noreferrer\"><em>as confirmed by my failed attempt to reproduce the same error</em></a>) with these <em>different</em> compilation errors…</p>\n<pre><code>...\nincompatible types: IntegerTransformer cannot be converted to Transformer&lt;T&gt;\n...\nincompatible types: ByteTransformer cannot be converted to Transformer&lt;T&gt;\n...\n</code></pre>\n<p>…Notice those are not the same as the error you reported in your question.</p>\n<p>And even if you did follow the advice of the other answers/comments and replaced <em><code>T</code></em> with <em><code>Class&lt;T&gt;</code></em> as the second formal parameter of your method, you would still get the above <em><code>cannot be converted to Transformer&lt;T&gt;</code></em> compilation errors.</p>\n<blockquote>\n<p>„<em>…Is there any way I can do that without modifying the generic structure of interface and factory?</em>“</p>\n</blockquote>\n<p>I have <a href=\"https://www.browxy.com#USER_307438\" rel=\"nofollow noreferrer\"><em>confirmed by a simple experiment</em></a> that this meets that criteria. <em><strong>And</strong></em> it successfully compiles and runs as expected…</p>\n<pre><code>    public &lt; T, U extends Transformer&lt; T &gt; &gt; U getTransformer( SomeEnum eNum, Class&lt; T &gt; type ){ \n    \n    switch( eNum ){ \n        case FOO:\n            return (U)new IntegerTransformer( );\n        case BAR:\n            return (U)new ByteTransformer( );\n        default:\n            throw new RuntimeException( &quot;Detected Decepticons Among Us!&quot; );\n    }\n}\n</code></pre>\n<p>…It fixes both the error you reported in your question, <em><strong>and</strong></em> the <em><code>cannot be converted to Transformer&lt;T&gt;</code></em> errors you'd get if the only thing you changed was the parameter to <em><code>Class&lt;T&gt;</code></em>.</p>\n","answer_id":63413798,"question_id":63411281},{"owner":{"profile_image":"https://lh6.googleusercontent.com/-CLisJv2LfKw/AAAAAAAAAAI/AAAAAAAAAAA/lqE6eNyd2RY/photo.jpg?sz=256","account_id":15284776,"user_type":"registered","user_id":11028099,"link":"https://stackoverflow.com/users/11028099/luis-i%c3%b1esta","reputation":401,"display_name":"Luis I&#241;esta"},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":false,"last_activity_date":1597402374,"creation_date":1597402374,"body":"<p>The signature of <code>getTransformer(final SomeEnum enum, final T type)</code> expects an actual objet of type <code>T</code>. What you want is pass a instance of <code>class</code>, so it should be:\n<code>getTransformer(final SomeEnum enum, final Class&lt;T&gt; type)</code></p>\n<p>In addition, since Java 8 there is no need for declaring such simple interfaces. Using the generic <code>Function&lt;String,T&gt;</code> would serve you perfectly.</p>\n","answer_id":63411379,"question_id":63411281},{"owner":{"profile_image":"https://www.gravatar.com/avatar/44c841338e1646af9a977f1fa0e23948?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":162699,"user_type":"registered","user_id":3788176,"link":"https://stackoverflow.com/users/3788176/andy-turner","reputation":138060,"display_name":"Andy Turner","accept_rate":54},"content_license":"CC BY-SA 4.0","score":14,"is_accepted":true,"last_activity_date":1597392756,"creation_date":1475740270,"body":"<p>Remember that <code>...</code> is just syntactic sugar for an array parameter. You can call a method with a variadic parameter <code>foo(Object...)</code> either using</p>\n<pre><code>foo(&quot;hello&quot;, 1);\n</code></pre>\n<p>or</p>\n<pre><code>foo(new Object[]{&quot;hello&quot;, 1});\n</code></pre>\n<p>since the compiler constructs the second form anyway.</p>\n<p>Because the receiver type isn't considered when the compiler infers types, it looks at <code>Arrays.asList(new Object[]{&quot;bar&quot;, 286})</code> and thinks that you mean to create a list of <code>Object</code>, not a singleton list of <code>Object[]</code>.</p>\n<p>The easiest way with your existing syntax is just to add an explicit type parameter:</p>\n<pre><code>List&lt;Object[]&gt; bar = Arrays.&lt;Object[]&gt;asList(new Object[]{&quot;bar&quot;, 286});\n</code></pre>\n<p>Adding the <code>&lt;Object[]&gt;</code> tells the compiler what T should be.</p>\n<p>Or, if you don't need the list to be mutable:</p>\n<pre><code>List&lt;Object[]&gt; bar = Collections.singletonList(new Object[]{&quot;bar&quot;, 286});\n</code></pre>\n","answer_id":39890475,"question_id":39889498,"last_edit_date":1597392756},{"owner":{"user_type":"does_not_exist","display_name":"user14089698"},"content_license":"CC BY-SA 4.0","score":5,"is_accepted":false,"last_activity_date":1597377088,"creation_date":1597317239,"body":"<p>Java does not support &quot;optional&quot; or gradual typing. You can try creating a subclass that defaults metadata to <code>null</code>, i.e. <code>NoMetadataTriple&lt;K,V&gt;</code>, or give <code>Void</code> for M instead as mentioned in the other answer.</p>\n<p>The <a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/Void.html\" rel=\"nofollow noreferrer\"><code>Void</code></a> &quot;type&quot; cannot be instantiated. It's basically <code>void</code> (the output parameter) as a <code>Class</code>.</p>\n","answer_id":63393932,"question_id":63393807,"last_edit_date":1597377088},{"owner":{"profile_image":"https://i.stack.imgur.com/7bZhz.png?s=256&g=1","account_id":5640884,"user_type":"registered","user_id":4465539,"link":"https://stackoverflow.com/users/4465539/deduper","reputation":1954,"display_name":"deduper","accept_rate":33},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1597334132,"creation_date":1597279864,"body":"<blockquote>\n<p>„<em>…is there a way for me to tell Java to not use the Object version…</em>“</p>\n</blockquote>\n<p>Yes. And the term — <em>in the context of Generics</em> — for telling Java to not use <code>Object</code> is called: „<em>Specifying a bound</em>“.</p>\n<p><a href=\"https://jdoodle.com/ia/fw\" rel=\"nofollow noreferrer\">My experiment confirmed</a> that calling the following method as <code>isEquals(String::hashCode, &quot;What the theoretical fuck!&amp;?*!?@!&quot;)</code> will produce <code>error: no suitable method found for isEquals(String::hashCode,String)</code>...</p>\n<pre><code>public static &lt;F extends String, T extends Number&gt; Predicate&lt;F&gt; isEquals(Function&lt;F, T&gt; aFunction, T aValue)\n{\n    return input -&gt; Objects.equals(aFunction.apply(input), aValue);\n}  \n</code></pre>\n<p>If you have both, the above method, and the following one in the same class, then this version is called for <code>isEquals(String::length, 20)</code>...</p>\n<pre><code>public static &lt;F&gt; Predicate&lt;F&gt; isEquals(ToIntFunction&lt;F&gt; aFunction, int aValue)\n{\n    return input -&gt; aFunction.applyAsInt(input) == aValue;\n}\n</code></pre>\n<p>...But the first one is called for <code>isEquals(String::length, Integer.valueOf(42))</code>.</p>\n<p>Click the blue <em>Execute</em> button <a href=\"https://jdoodle.com/ia/fw\" rel=\"nofollow noreferrer\"><em>in this demo</em></a> to see it working.</p>\n","answer_id":63386541,"question_id":63384914,"last_edit_date":1597334132},{"owner":{"profile_image":"https://www.gravatar.com/avatar/da698e0f6137f881e120ba96344c72a1?s=256&d=identicon&r=PG","account_id":2190376,"user_type":"registered","user_id":1937593,"link":"https://stackoverflow.com/users/1937593/paranoidandroid","reputation":533,"display_name":"paranoidAndroid"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1597333440,"creation_date":1597333440,"body":"<p>As far as I'm concerned, this smells like a real java compiler bug to me..Compiler should be able to infer arguments without assignment to a variable, since we have <code>Function&lt;F, T&gt; aInMapFunction</code> which should enforce T, as the compiler &quot;knows&quot; that <code>String::length</code> returns an Integer.\nHowever I came up with a sort of solution for you:</p>\n<pre><code>public class PredicateBuilder&lt;F,T&gt;\n{\n    public Predicate&lt;F&gt; isEquals(\n            Function&lt;F, T&gt; aInMapFunction, T aInExpectedValue)\n    {\n        return aInActual -&gt; Objects.equals(\n                aInMapFunction.apply(aInActual), aInExpectedValue);\n    }\n}\n</code></pre>\n<p>and usage:</p>\n<pre><code>new PredicateBuilder&lt;String, Integer&gt;().isEquals(String::length, 5);\n</code></pre>\n<p>Won't compile with other argument types, won't compile either if you try this:</p>\n<pre><code>new PredicateBuilder&lt;&gt;().isEquals(String::length, 5);\n</code></pre>\n","answer_id":63398639,"question_id":63384914},{"owner":{"profile_image":"https://www.gravatar.com/avatar/9e462b11b46069ee682e1ce8bc5f5825?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":1063012,"user_type":"registered","user_id":1064245,"link":"https://stackoverflow.com/users/1064245/m-a","reputation":71986,"display_name":"M A","accept_rate":82},"content_license":"CC BY-SA 4.0","score":5,"is_accepted":false,"last_activity_date":1597317162,"creation_date":1597317162,"body":"<p>I would argue that if you determine that the third parameter is not present (as intended by using <code>null</code>), then it's no longer a triplet, but a pair. Just keep things simple and use a <code>Pair</code> class instead.</p>\n","answer_id":63393915,"question_id":63393807},{"owner":{"profile_image":"https://i.stack.imgur.com/H3QRx.jpg?s=256&g=1","account_id":5644665,"user_type":"registered","user_id":4467208,"link":"https://stackoverflow.com/users/4467208/murat-karag%c3%b6z","reputation":35951,"display_name":"Murat Karag&#246;z","accept_rate":51},"content_license":"CC BY-SA 4.0","score":9,"is_accepted":false,"last_activity_date":1597316932,"creation_date":1597316932,"body":"<p>You can use <code>Void</code> e.g.</p>\n<pre><code>Triplet&lt;Integer, String, Void&gt; t2 = new Triplet&lt;&gt;();\n</code></pre>\n","answer_id":63393854,"question_id":63393807},{"owner":{"profile_image":"https://lh6.googleusercontent.com/-lBu2zXF4zZA/AAAAAAAAAAI/AAAAAAAAAAA/AMZuuclG9eBOieyH1P1A0-4FoDEkCWVRuA/photo.jpg?sz=256","account_id":18983313,"user_type":"registered","user_id":13854263,"link":"https://stackoverflow.com/users/13854263/stack-overflow","reputation":71,"display_name":"stack overflow"},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":true,"last_activity_date":1594132403,"creation_date":1594132403,"body":"<p>There is an abstract class ReferencePipeline which extends abstract class AbstractPipeline and implements Stream, but isn't overriding the close() method. This abstract class is the connection and the answer I was looking for. Now, everything seams reasonable and is clear for me. Here is the full diagram, which clears the answer to this question.</p>\n<p><a href=\"https://i.stack.imgur.com/sMEQQ.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/sMEQQ.png\" alt=\"enter image description here\" /></a></p>\n<p>Thanks to everyone that participated and helped me find the answer.\nCheers!</p>\n","answer_id":62777661,"question_id":62699892},{"owner":{"profile_image":"https://i.stack.imgur.com/D2M1j.jpg?s=256&g=1","account_id":310510,"user_type":"registered","user_id":623517,"link":"https://stackoverflow.com/users/623517/prem","reputation":4823,"display_name":"Prem","accept_rate":82},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1593695293,"creation_date":1593695293,"body":"<p>Problem could be because you are using String. String is immutable in Java. What it means is in more simple words is, every time you do some operation on your String, it keeps allocating more memory.</p>\n<p>Simple alternate is use StringBuilder. It has all the required methods needed for you to work on basic string operations like replace, append, etc. and it will solve your memory problem as well.</p>\n","answer_id":62697109,"question_id":62662513},{"owner":{"profile_image":"https://www.gravatar.com/avatar/8c81968a630691c03d4d9e657770f527?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":5871770,"user_type":"registered","user_id":4623892,"link":"https://stackoverflow.com/users/4623892/dr-click","reputation":449,"display_name":"Dr_Click","accept_rate":58},"content_license":"CC BY-SA 4.0","score":3,"is_accepted":true,"last_activity_date":1593542514,"creation_date":1593542514,"body":"<p>Finally, I found the explanation. The RTP streaming with the payload 10 or 11 are big endian. So, it's impossible to stream with a little endian codec.\nThe right way to stream is to change the codec and the command line is becoming :</p>\n<pre><code>ffmpeg -re -i /home/dr_click/live.wav -acodec pcm_s16be -ar 44100 -ac 2 -payload_type 10 -f rtp rtp://127.0.0.1:1234\n</code></pre>\n<p>Thank you to those who read my question.</p>\n","answer_id":62664154,"question_id":62413763},{"owner":{"profile_image":"https://www.gravatar.com/avatar/1a287f537db55a647bda0003781e317e?s=256&d=identicon&r=PG","account_id":5604285,"user_type":"registered","user_id":4439471,"link":"https://stackoverflow.com/users/4439471/adarsh-verma","reputation":25,"display_name":"Adarsh Verma"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":true,"last_activity_date":1593201834,"creation_date":1593201834,"body":"<p>Fixed it:</p>\n<pre class=\"lang-java prettyprint-override\"><code>XMLInputFactory factory = XMLInputFactory.newInstance()\n\nwhile (true) {\n    /*\n     * &lt;-- Request code --&gt;\n     */\n\n    Response response = client.newCall(request).execute();\n    InputStream responseReader = response.body().byteStream();\n    XMLEventReader eventReader = factory.createXMLEventReader(responseReader);\n\n    while (eventReader.hasNext()) {\n        XMLEvent event = eventReader.nextEvent();\n\n        if (event.getEventType() == XMLStreamConstants.START_ELEMENT) {\n            StartElement startElement = event.asStartElement();\n            String elementBuffer = startElement.getName().getLocalPart();\n            tracker.push(elementBuffer);\n            String currentXPath = tracker.getXPath(); //Joins all elements in the stack with '/' as delimiter.\n\n            if (eventReader.peek().getEventType() == XMLStreamConstants.CHARACTERS) {\n                String data = &quot;&quot;;\n                \n                while(eventReader.peek().getEventType() == XMLStreamConstants.CHARACTERS)\n                    data += eventReader.nextEvent().asCharacters().getData().replace('\\n', ' ');\n\n                if (currentXPath.equals(&quot;/ABC/DEF/GHI&quot;))\n                    // Do something\n                if (currentXPath.equals(&quot;/JKL/MNO/PQR&quot;))\n                    // Do something\n\n                /*\n                 * Remaining operations\n                 */\n            }\n        } else if (event.getEventType() == XMLStreamConstants.END_ELEMENT) {\n            tracker.pop();\n        }\n    }\n\n    eventReader.close();\n    responseReader.close();\n    response.close();\n}\n</code></pre>\n","answer_id":62602098,"question_id":62586403},{"owner":{"profile_image":"https://i.stack.imgur.com/BwrUZ.jpg?s=256&g=1","account_id":1693760,"user_type":"registered","user_id":1555615,"link":"https://stackoverflow.com/users/1555615/marinos-an","reputation":9824,"display_name":"Marinos An","accept_rate":62},"content_license":"CC BY-SA 4.0","score":2,"is_accepted":true,"last_activity_date":1593004674,"creation_date":1593003938,"body":"<p><code>BufferedInputStream</code> ( stream replay ):</p>\n<ul>\n<li>you <strong>mark now</strong> (start creating a buffer) so that you <strong>can replay later</strong> (at some buffer position).</li>\n<li>Also you <strong>cannot replace the buffered</strong> content with something else.</li>\n</ul>\n<p><code>PushbackInputStream</code> ( stream corrected-replay ):</p>\n<ul>\n<li>there is <strong>always a buffer available</strong> to which you can reset (at some buffer position)</li>\n<li>You can <strong>provide the replay contents</strong> to that buffer.</li>\n</ul>\n<p>Below I provide the corresponding examples with length-1-buffers for simplicity:</p>\n<pre class=\"lang-java prettyprint-override\"><code>PushbackInputStream pbis = \nnew PushbackInputStream(new ByteArrayInputStream(new byte[]{'a','b','c'}));\nSystem.out.println((char)pbis.read());\nSystem.out.println((char)pbis.read());\npbis.unread('x'); //pushback after read\nSystem.out.println((char)pbis.read());        \nSystem.out.println((char)pbis.read());        \n\nBufferedInputStream bis = \nnew BufferedInputStream(new ByteArrayInputStream(new byte[]{'a','b','c'}));\nSystem.out.println((char)bis.read());\nbis.mark(1);//mark before read\nSystem.out.println((char)bis.read());\nbis.reset();//reset after read\nSystem.out.println((char)bis.read());        \nSystem.out.println((char)bis.read());\n\n</code></pre>\n<p><strong>Result:</strong></p>\n<pre><code>a\nb\nx   //correction\nc\n\na\nb\nb   //replay\nc\n</code></pre>\n","answer_id":62555759,"question_id":23848081,"last_edit_date":1593004674},{"owner":{"profile_image":"https://i.stack.imgur.com/fYFFP.jpg?s=256&g=1","account_id":3306670,"user_type":"registered","user_id":2781271,"link":"https://stackoverflow.com/users/2781271/crosp","reputation":4539,"display_name":"CROSP","accept_rate":58},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":true,"last_activity_date":1578325414,"creation_date":1449239905,"body":"<p>I end up with following solution. It is not as good as I wanted, but it works and better than duplicating code.    </p>\n\n<p>My base request class.</p>\n\n<pre><code>public abstract class BaseGetRequest&lt;L extends List&lt;T&gt;, T, V&gt; extends RetrofitSpiceRequest&lt;L, V&gt; implements FilterableRequest {\n    // Context\n    protected Context mContext;\n    // Filter used in request and in queries\n    protected Map&lt;Property, String&gt; mFilterMap;\n    // Session provided Singletone\n    protected DaoSessionProvider mSessionProvider;\n\n    public BaseGetRequest(Class&lt;L&gt; clazz, Class&lt;V&gt; retrofitedInterfaceClass, Context context, Map&lt;Property, String&gt; filterMap) {\n        super(clazz, retrofitedInterfaceClass);\n        mContext = context;\n        mFilterMap = filterMap;\n        mSessionProvider = ((DaoSessionProvider) mContext.getApplicationContext());\n        // TODO determine required retry count\n        setRetryPolicy(new RetryPolicy() {\n            @Override\n            public int getRetryCount() {\n                return 0;\n            }\n\n            @Override\n            public void retry(SpiceException e) {\n\n            }\n\n            @Override\n            public long getDelayBeforeRetry() {\n                return 0;\n            }\n        });\n    }\n\n    protected WhereCondition[] getWhereConditions() {\n        return QueryUtils.convertPropertyMapToConditionalArray(mFilterMap);\n    }\n\n    public BaseGetRequestV2(Class&lt;L&gt; clazz, Class&lt;V&gt; retrofitedInterfaceClass, Context context) {\n        this(clazz, retrofitedInterfaceClass, context, null);\n    }\n\n    public abstract AbstractDao&lt;T, Long&gt; getDao();\n\n    public abstract L createDataList(List&lt;T&gt; list);\n\n    public L getCachedData() {\n        if (mFilterMap != null &amp;&amp; mFilterMap.size() &gt; 0) {\n            WhereCondition[] whereConditions = getWhereConditions();\n            return createDataList(getDao().queryBuilder().where(whereConditions[0], Arrays.copyOfRange(whereConditions, 1, whereConditions.length)).list());\n        } else {\n            return createDataList(getDao().loadAll());\n        }\n    }\n\n    public abstract L getData();\n\n    @Override\n    public Map&lt;Property, String&gt; getFilterMap() {\n        return mFilterMap;\n    }\n\n    public Map&lt;String, String&gt; getStringMap() {\n        return QueryUtils.convertPropertyMapToString(mFilterMap);\n    }\n\n    @Override\n    public L loadDataFromNetwork() throws Exception {\n        L receivedData = null;\n        try {\n            receivedData = getData();\n            WhereCondition[] conditions = getWhereConditions();\n            getDao().queryBuilder().where(conditions[0],Arrays.copyOfRange(conditions, 1, conditions.length)).buildDelete().executeDeleteWithoutDetachingEntities();\n            getDao().insertOrReplaceInTx(receivedData);\n        } catch (Exception ex) {\n            receivedData = getCachedData();\n        }\n        return receivedData;\n    }\n}\n</code></pre>\n\n<p>And I can extend this class like so:   </p>\n\n<pre><code>public class NewsRequest extends BaseGetRequest&lt;NewsArticle.List, NewsArticle, API&gt; {\n\n    public static final String TARGET_URL = \"/news\";\n    NewsArticleDao mNewsArticleDao;\n\n    public NewsRequest(Context context) {\n        this(context, null);\n    }\n\n    public NewsRequest(Context context, Map&lt;Property, String&gt; filterMap) {\n        super(NewsArticle.List.class, API.class, context, filterMap);\n        mNewsArticleDao = mSessionProvider.getDaoSession().getNewsArticleDao();\n    }\n\n    @Override\n    public AbstractDao&lt;NewsArticle, Long&gt; getDao() {\n        return mNewsArticleDao;\n    }\n\n    @Override\n    public NewsArticle.List createDataList(List&lt;NewsArticle&gt; list) {\n       return new NewsArticle.List(list);\n    }\n\n    @Override\n    public NewsArticle.List getData() {\n        return getService().getNews(getStringMap());\n    }\n}\n</code></pre>\n","answer_id":34090759,"question_id":33754844,"last_edit_date":1578325414},{"owner":{"profile_image":"https://www.gravatar.com/avatar/2f0d9dec16bae1e06552af55ddefc11f?s=256&d=identicon&r=PG","account_id":277416,"user_type":"registered","user_id":571407,"link":"https://stackoverflow.com/users/571407/jb-nizet","reputation":681888,"display_name":"JB Nizet","accept_rate":100},"content_license":"CC BY-SA 4.0","score":2,"is_accepted":true,"last_activity_date":1576332781,"creation_date":1576332781,"body":"<p>Make your base class generic (with generic type T), and make <code>show()</code> accept a <code>Consumer&lt;T&gt;</code> (or a <code>Consumer&lt;? super T&gt;</code>. Make the subclass extend <code>BaseClass&lt;Protection&gt;</code>.</p>\n\n<pre><code>class BaseClass&lt;T&gt; {\n    public void show(Consumer&lt;T&gt; validationHandler) { //  or Consumer&lt;? super T&gt;\n    }\n}\n\nclass SubClass extends BaseClass&lt;Protection&gt; {\n    @Override\n    public void show(Consumer&lt;Protection&gt; validationHandler) { //  or Consumer&lt;? super Protection&gt;\n        super.show(validationHandler);\n    }\n}\n\nclass Protection {}\n</code></pre>\n","answer_id":59335900,"question_id":59335819},{"owner":{"profile_image":"https://lh5.googleusercontent.com/-NiBD6Mu-FEo/AAAAAAAAAAI/AAAAAAAABHk/_Lp4u1HQ_nw/photo.jpg?sz=256","account_id":15432262,"user_type":"registered","user_id":11133359,"link":"https://stackoverflow.com/users/11133359/daniel-naves","reputation":126,"display_name":"Daniel Naves"},"content_license":"CC BY-SA 4.0","score":5,"is_accepted":true,"last_activity_date":1567183030,"creation_date":1567026932,"body":"<p>You can try to do something like this:</p>\n\n<p>1 - Create a class to store your results and convert the data to a MultiGauge.Row</p>\n\n<pre><code>@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class UserData {\n\n  private String gender;\n  private Long counter;\n\n  public MultiGauge.Row&lt;UserData&gt; toRow() {\n    return MultiGauge.Row.of(Tags.of(\"gender\", gender), this, c -&gt; this.counter);\n  }\n\n}\n</code></pre>\n\n<p>2 - Create a custom query to group your results</p>\n\n<pre><code>@Query(value = \"select new multigauge.multigauge.UserData(usr.gender, count(usr.id)) \" +\n    \"from users usr \" +\n    \"group by usr.gender\")\n   List&lt;UserData&gt; retrieveUsersGroupedByGender();\n</code></pre>\n\n<p>3 - Convert the list using the toRow method and register your MultiGauge</p>\n\n<pre><code>@Scheduled(fixedDelay = 1000)\n  public void updateGauges() {\n    multiGauge.register(userRepository.retrieveUsersGroupedByGender()\n      .stream()\n      .map(UserData::toRow)\n      .collect(toList()), true);\n  }\n</code></pre>\n\n<p>4 - Initialize your MultiGauge</p>\n\n<pre><code>@PostConstruct\n  public void init() {\n    multiGauge = MultiGauge.builder(\"users_grouped_by_gender_metric\").register(prometheusMeterRegistry);\n  }\n</code></pre>\n\n<p>I recommend taking a look at the unit tests from the official GitHub repo: </p>\n\n<p><a href=\"https://github.com/micrometer-metrics/micrometer/blob/master/micrometer-core/src/test/java/io/micrometer/core/instrument/MultiGaugeTest.java\" rel=\"noreferrer\">https://github.com/micrometer-metrics/micrometer/blob/master/micrometer-core/src/test/java/io/micrometer/core/instrument/MultiGaugeTest.java</a></p>\n","answer_id":57700129,"question_id":56913027,"last_edit_date":1567183030},{"owner":{"profile_image":"https://www.gravatar.com/avatar/7ffdb6cd7dee86394ef625ad9c1d2c93?s=256&d=identicon&r=PG","account_id":9035,"user_type":"registered","user_id":16513,"link":"https://stackoverflow.com/users/16513/jjohn","reputation":9796,"display_name":"jjohn"},"content_license":"CC BY-SA 4.0","score":107,"is_accepted":false,"last_activity_date":1565228778,"creation_date":1233193952,"body":"<p>As the other posts have noted, you are asking about a Java feature called generics.  In C++, this is called templates.  This feature in Java is usually easier to work with than the that found in C++.</p>\n\n<p>Let me answer your questions functionally (if that's not a naughty word for OO discussions).</p>\n\n<p>Before generics, there were concrete classes like Vector.  </p>\n\n<pre><code>Vector V = new Vector();\n</code></pre>\n\n<p>Vectors hold any object you give them.  </p>\n\n<pre><code>V.add(\"This is an element\");\nV.add(new Integer(2));\nv.add(new Hashtable());\n</code></pre>\n\n<p>They do this by casting all values given to it into an Object (the root of all Java classes).  When you attempt to retrieve the values stored in your Vector, you need to cast the value back into the <em>original</em> class (if you want to do anything meaningful with it).</p>\n\n<pre><code>String s = (String) v.get(0);\nInteger i = (Integer) v.get(1);\nHashtable h = (Hashtable) v.get(2);\n</code></pre>\n\n<p>Casting gets old fast.  More than that, the compiler complains to you about unchecked casts.   The most urgent problem with casting like this is that consumers of your Vector have to know the classes of its values at <em>compile time</em> in order to cast correctly.  In cases where the producer of the Vector and the consumer of the same are completely isolated from each other (think RPC messages), this can be a fatal issue. </p>\n\n<p>Enter generics.  Generics attempt to create strongly typed classes to do generic operations. </p>\n\n<pre><code>ArrayList&lt;String&gt; aList = new ArrayList&lt;String&gt;();\naList.add(\"One\");\nString element = aList.get(0); // no cast needed\nSystem.out.println(\"Got one: \" + element); \n</code></pre>\n\n<p>The <em>Design Patterns</em> book encourages the reader to think in terms of contracts, not concrete types. There is wisdom (and code re-use) in divorcing variables from their implementing class.</p>\n\n<p>With this in mind, you might think that all implementations List objects should do the same set of things: <code>add()</code>, <code>get()</code>, <code>size()</code>, etc.  With a little reflection, you can imagine many implementations of List operations that obey the List contract in various ways (e.g. <code>ArrayList</code>).  However, the type of data these objects deal with is orthogonal to the actions performed on them.</p>\n\n<p>Put it all together and you'll see the following kinds of code frequently:</p>\n\n<pre><code>List&lt;String&gt; L = new ArrayList&lt;String&gt;();\n</code></pre>\n\n<p>You should read that as \"L is a kind of List that deals with String objects\".  When you start dealing with Factory classes, it is critical to deal with contracts rather than specific implementations.  Factories produce objects of various types at runtime.  </p>\n\n<p>Using generics is pretty easy (most of the time).  </p>\n\n<p>One day you may decide you want to implement your own generic class.  Perhaps you want to write a new database abstraction interface that elides the differencesbetween various data stores.  When you define that generic class, you will use <code>&lt;t&gt;</code> as a placeholder for the kind of object that will be manipulated by the methods.</p>\n\n<p>If you are still confused, use the generic classes for List until you are comfortable.  Later, you can dive into the implementation with a bit more confidence.  Or you can look at the source code for the various List classes that ship with the JRE.  Open source is great that way.</p>\n\n<p>Have a look at the Oracle/Sun <a href=\"http://www.oracle.com/technetwork/articles/javase/generics-136597.html\" rel=\"noreferrer\">docs about generics</a>.\nCheers.</p>\n","answer_id":490225,"question_id":490091,"last_edit_date":1565228778},{"owner":{"profile_image":"https://i.stack.imgur.com/9bcVI.jpg?s=256&g=1","account_id":14963506,"user_type":"registered","user_id":10802531,"link":"https://stackoverflow.com/users/10802531/mosayeb-masoumi","reputation":513,"display_name":"Mosayeb Masoumi"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1562528610,"creation_date":1562528610,"body":"<h2>model.class</h2>\n\n<p>public class Model {</p>\n\n<pre><code>private List&lt;String&gt; stringList = new ArrayList&lt;&gt;();\n\npublic List&lt;String&gt; getStringList() {\n    return stringList;\n}\n\npublic void setStringList(List&lt;String&gt; stringList) {\n    this.stringList = stringList;\n}\n</code></pre>\n\n<h2>}</h2>\n\n<h2>MainActivity</h2>\n\n<p>public class MainActivity extends AppCompatActivity {</p>\n\n<pre><code>Model model = new Model();\nSpinner spinner;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\n    spinner=findViewById(R.id.spinner);\n\n    List&lt;String&gt; itemList = new ArrayList&lt;String&gt;();\n    itemList.add(\"item1\");\n    itemList.add(\"item2\");\n    itemList.add(\"item3\");\n\n\n   model.setStringList(itemList);\n\n\n    ArrayAdapter&lt;String&gt; dataAdapter = new ArrayAdapter&lt;String&gt;(this, android.R.layout.simple_spinner_item, model.getStringList());\n    dataAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n\n    spinner.setAdapter(dataAdapter);\n\n}\n</code></pre>\n\n<p>}</p>\n","answer_id":56925557,"question_id":4288084},{"owner":{"profile_image":"https://lh5.googleusercontent.com/-Jz13IVvb0TQ/AAAAAAAAAAI/AAAAAAAAAAA/APUIFaM7cVAzDpHSI9CDxjyRWoumzVxyoA/mo/photo.jpg?sz=256","account_id":14385234,"user_type":"registered","user_id":10391432,"link":"https://stackoverflow.com/users/10391432/ale%d1%87","reputation":85,"display_name":"Aleч"},"content_license":"CC BY-SA 4.0","score":5,"is_accepted":false,"last_activity_date":1537447650,"creation_date":1537447650,"body":"<p>Just point compiler the proper version of generic Comparator with\n<code>(Comparator&lt;String&gt;)</code></p>\n\n<p>So the answer will be </p>\n\n<p><code>sort(list, (Comparator&lt;String&gt;)(a, b) -&gt; a.compareTo(b));</code></p>\n","answer_id":52425521,"question_id":22588518},{"owner":{"profile_image":"https://www.gravatar.com/avatar/49aa114f503078d86733fba209b753b0?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":4386848,"user_type":"registered","user_id":3576723,"link":"https://stackoverflow.com/users/3576723/iconfly","reputation":158,"display_name":"iconfly"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1534593247,"creation_date":1534593247,"body":"<p>You mean something like this?:</p>\n\n<pre><code>&lt;T,S&gt;(T t, S s)-&gt;...\n</code></pre>\n\n<p>Of what type is this lambda? You couldn't express that in Java and therefore cannot compose this expression in a function application and expressions have to be composable.</p>\n\n<p>For this need to be work you would need support for <a href=\"https://prime.haskell.org/wiki/Rank2Types\" rel=\"nofollow noreferrer\">Rank2 Types</a> in Java.</p>\n\n<p>Methods are allowed to be generic but therefore you couldn't use them as expressions. They can, however be reduced to lambda expression by specializing all necessary generic types before you can pass them: <code>ClassName::&lt;TypeName&gt;methodName</code> </p>\n","answer_id":51908366,"question_id":22588518},{"owner":{"profile_image":"https://www.gravatar.com/avatar/724815fcb668181454703ac7e6a686be?s=256&d=identicon&r=PG","account_id":13990462,"user_type":"registered","user_id":10104545,"link":"https://stackoverflow.com/users/10104545/p-maestro","reputation":91,"display_name":"P.Maestro"},"content_license":"CC BY-SA 4.0","score":3,"is_accepted":true,"last_activity_date":1532528076,"creation_date":1532528076,"body":"<p>I modify the 'download' method with stream and it works correctly like I want.</p>\n\n<pre><code>public void download(Integer id, HttpServletResponse response){\n    Line line = getById(Line.class, id);\n    InputStream is = line.getFile().getBinaryStream;\n    IOUtils.copy(is, response.getOutputStream());\n    response.flushBuffer();\n}\n</code></pre>\n\n<p>And my controller was like that :</p>\n\n<pre><code>public ResponseEntity&lt;?&gt; download(@RequestParam(\"id\") Integer id, HttpServletResponse response)\n{\n    lineService.download(id,response);\n    return new ResponseEntity&lt;&gt;(HttpStatus.OK);\n}\n</code></pre>\n","answer_id":51521151,"question_id":51519160},{"owner":{"profile_image":"https://www.gravatar.com/avatar/fdef7da2101f2c094cf4348fee071c99?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":4738905,"user_type":"registered","user_id":3832393,"link":"https://stackoverflow.com/users/3832393/t-e-m-a","reputation":580,"display_name":"T_E_M_A","accept_rate":75},"content_license":"CC BY-SA 4.0","score":3,"is_accepted":false,"last_activity_date":1532523918,"creation_date":1532522995,"body":"<p>I hope i helped you. With way work for me.</p>\n\n<pre><code>import org.springframework.core.io.UrlResource;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.net.MalformedURLException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport org.springframework.core.io.Resource;\n\n@RestController\npublic class SomeClass{\n\n\n    @GetMapping(\"/{fileName}\")\n    public ResponseEntity&lt;Resource&gt; getFile(@PathVariable String fileName, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        Resource file = getFileAsResource(fileName);\n        HttpHeaders headers = prepareHeaderForFileReturn(fileName, request, response);\n        return new ResponseEntity&lt;Resource&gt;(file, headers, HttpStatus.OK);\n    }\n\n    private HttpHeaders prepareHeaderForFileReturn(String fileName, HttpServletRequest request,\n                                                   HttpServletResponse response) {\n        HttpHeaders headers = new HttpHeaders();\n        headers.set(HttpHeaders.CONTENT_TYPE, getContentTypeForAttachment(fileName));\n        response.setHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + fileName + \"\\\"\");\n        return headers;\n    }\n\n\n    public Resource getFileAsResource(String filename) throws FileNotFoundException {\n        String filePath = path +  \"/\" + filename;\n        Resource file = loadAsResource(filePath);\n        return file;\n    }\n\n    private Resource loadAsResource(String filename) throws FileNotFoundException {\n        try {\n            Path file = Paths.get(filename);\n            org.springframework.core.io.Resource resource = new UrlResource(file.toUri());\n            if (resource.exists() || resource.isReadable()) {\n                return resource;\n            } else {\n                log.error(\"Could not read file: \" + filename);\n                throw new FileNotFoundException();\n            }\n        } catch (MalformedURLException e) {\n            log.error(\"Could not read file: \" + filename, e);\n            throw new FileNotFoundException();\n        }\n    }\n\n    //Obtains a content type for file by his extension.\n\n    public String getContentTypeForAttachment(String fileName) {\n        String fileExtension = com.google.common.io.Files.getFileExtension(fileName);\n        if (fileExtension.equals(\"pdf\")) return \"application/pdf\";\n        else if (fileExtension.equals(\"doc\")) return \"application/msword\";\n        else if (fileExtension.equals(\"jpeg\")) return \"image/jpeg\";\n\n    }\n}\n</code></pre>\n","answer_id":51519326,"question_id":51519160,"last_edit_date":1532523918},{"owner":{"user_type":"does_not_exist","display_name":"user1134181"},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":false,"last_activity_date":1532497927,"creation_date":1532496333,"body":"<p>The <a href=\"https://docs.oracle.com/javase/8/docs/api/java/io/BufferedOutputStream.html\" rel=\"nofollow noreferrer\"><code>BufferedOutputStream</code></a> allows to improve performance by using buffer. When the buffer fills up, calling the <code>write()</code> method causes to underlying output stream <code>write()</code> method call, and the contents of the buffer are written to destination. The next calls of the <code>write()</code> method of <code>BufferedOutputStream</code> will store bytes in buffer until it filled again.</p>\n\n<p>Usually used as wrapper, for example:</p>\n\n<pre><code>FileOutputStream fos = new FileOutputStream(\"file.txt\");\nBufferedOutputStream bos = new BufferedOutputStream(fos);\nbos.write( ... );\n</code></pre>\n\n<p>Thus, the number of calls of the underlying operating system functions is minimized.</p>\n\n<p>The <a href=\"https://docs.oracle.com/javase/8/docs/api/?java/io/ByteArrayOutputStream.html\" rel=\"nofollow noreferrer\"><code>ByteArrayOutputStream</code></a> allows to write the stream of bytes to the array of bytes.</p>\n","answer_id":51511336,"question_id":43818630,"last_edit_date":1532497927},{"owner":{"profile_image":"https://i.stack.imgur.com/IIQJV.jpg?s=256&g=1","account_id":318670,"user_type":"registered","user_id":636009,"link":"https://stackoverflow.com/users/636009/david-conrad","reputation":15681,"display_name":"David Conrad"},"content_license":"CC BY-SA 4.0","score":7,"is_accepted":true,"last_activity_date":1532460606,"creation_date":1532459909,"body":"<p>You can use <code>Stream::peek</code>:</p>\n\n<pre><code>itemStream.parallel()\n    .peek(item -&gt; { if (item == null) log.warn(\"Skipping a null item!\"); })\n    .filter(Objects::nonNull)\n    .forEach(item -&gt; randomMethod(item));\n</code></pre>\n\n<p>You can also use a method reference for <code>randomMethod</code> (here I assume it's a member of <code>this</code>):</p>\n\n<pre><code>itemStream.parallel()\n    .peek(item -&gt; { if (item == null) log.warn(\"Skipping a null item!\"); })\n    .filter(Objects::nonNull)\n    .forEach(this::randomMethod);\n</code></pre>\n","answer_id":51506083,"question_id":51505884,"last_edit_date":1532460606},{"owner":{"profile_image":"https://i.stack.imgur.com/II4q8.jpg?s=256&g=1","account_id":7743155,"user_type":"registered","user_id":5862071,"link":"https://stackoverflow.com/users/5862071/ousmane-d","reputation":55371,"display_name":"Ousmane D.","accept_rate":86},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":false,"last_activity_date":1532459714,"creation_date":1532459389,"body":"<p>With <code>.filter(Objects::nonNull)</code> you're filtering out all the <code>null</code> elements and only retaining the non-null elements which means in the <code>forEach</code> you won't receive any null elements never mind logging it. instead, you want:</p>\n\n<pre><code>itemStream.parallel()\n          .forEach(item -&gt; { \n               if(Objects.isNull(item)) { ... } else { ... }; // or if(item == null) ...\n          });\n</code></pre>\n","answer_id":51505951,"question_id":51505884,"last_edit_date":1532459714},{"owner":{"profile_image":"https://i.stack.imgur.com/OgAZP.jpg?s=256&g=1","account_id":2325826,"user_type":"registered","user_id":2040375,"link":"https://stackoverflow.com/users/2040375/majid","reputation":13961,"display_name":"Majid","accept_rate":98},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":false,"last_activity_date":1532459518,"creation_date":1532459518,"body":"<p>After filtering <code>null</code> items you can't find them!</p>\n\n<p>Simply use this:</p>\n\n<pre><code>itemStream.parallel().forEach((item)-&gt; {\n    if(item==null)\n       log.warn(\"Skipping a null item!\");\n    else\n       randomMethod(item)\n});\n</code></pre>\n","answer_id":51505995,"question_id":51505884},{"owner":{"profile_image":"https://lh4.googleusercontent.com/-8EJRijIRKm0/AAAAAAAAAAI/AAAAAAAAADk/0v_YNDIZ-s0/photo.jpg?sz=256","account_id":13983852,"user_type":"registered","user_id":10099420,"link":"https://stackoverflow.com/users/10099420/marc","reputation":197,"display_name":"Marc"},"content_license":"CC BY-SA 4.0","score":-1,"is_accepted":false,"last_activity_date":1532424162,"creation_date":1532424162,"body":"<p>you can use the random library</p>\n\n<pre><code>import java.util.Random;\n</code></pre>\n\n<p>More possible solutions for random elements <a href=\"https://www.mkyong.com/java/java-return-a-random-item-from-a-list/\" rel=\"nofollow noreferrer\">here</a> =)</p>\n","answer_id":51495030,"question_id":51493859},{"owner":{"profile_image":"https://i.stack.imgur.com/jSvMr.jpg?s=256&g=1","account_id":2252907,"user_type":"registered","user_id":1984767,"link":"https://stackoverflow.com/users/1984767/leviand","reputation":2755,"display_name":"Leviand","accept_rate":50},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1532421033,"creation_date":1532421033,"body":"<p>You can take a random item from your list, based on your list size:</p>\n\n<pre><code>import java.util.Random;\n\nList&lt;?&gt; yourList = new ArrayList&lt;&gt;();\nyourList.get(new Random().nextInt(yourList.size()));\n</code></pre>\n","answer_id":51493994,"question_id":51493859},{"owner":{"profile_image":"https://i.stack.imgur.com/CXHwy.png?s=256&g=1","account_id":11868306,"user_type":"registered","user_id":8685240,"link":"https://stackoverflow.com/users/8685240/j-money","reputation":509,"display_name":"j-money"},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":false,"last_activity_date":1531998009,"creation_date":1531998009,"body":"<p>Maybe before I ripped out my hair (and went to places on the internet I can never unsee) I should've maybe done a little research on ockham's razor.... It turns out that I can not count as well as I originally thought and the buffer I was creating of size 10000000 should have actually been 1000000....</p>\n","answer_id":51420957,"question_id":51419529},{"owner":{"profile_image":"https://lh6.googleusercontent.com/-68zpsh6jWmQ/AAAAAAAAAAI/AAAAAAAAAAA/AB6qoq0-5b4PrHsISIoGVq9HVgx2AqixUA/mo/photo.jpg?sz=256","account_id":13839187,"user_type":"registered","user_id":9989971,"link":"https://stackoverflow.com/users/9989971/redacted","reputation":623,"display_name":"Redacted"},"content_license":"CC BY-SA 4.0","score":1,"is_accepted":false,"last_activity_date":1531834603,"creation_date":1531834603,"body":"<h1>General description of method:</h1>\n\n<p>You can make a separate currency map: Map currency map = new HashMap&lt;>();\nThen you will need an if statement to group your currencies based upon your <code>accId</code> since the currency-map holds all of your currencies with a common <code>accId</code>. You then need to find all your unique Ids, group them and add a <code>currencyMap</code> to them.</p>\n\n<h1>Code Example:</h1>\n\n<pre><code>Map&lt;String,Map&lt;String,String&gt;&gt; comparisonMap = new HashMap&lt;&gt;();\nMap&lt;String,String&gt; currencyMap = new HashMap&lt;&gt;();\nfor(Map&lt;String,String&gt; myMap:myListOfMaps){\n    //if we have seen this id before or the currency map is empty\n    //then put in the newest entry in the currencymap and set the currentId\n    if (currencyMap.keySet().size() = 0 || myMap.get(\"aacId\").equals(currentId)){\n        currencyMap.put(myMap.get(\"currency\"),myMap.get(\"amount\"))}\n        String currentId = myMap.get(\"aacId\")\n    //if we see a different ID then, record the old id and old currency map, set the \n    //currentId to the new Id, create a new currencyMap and add in this entry's data \n    //to the new currencyMap\n    else {\n        comparisonMap.put(currentId,currencyMap);\n        currentId = myMap.get(\"aacId\");\n        Map&lt;String,String&gt; currencyMap = new HashMap&lt;&gt;();\n        currencyMap.put(myMap.get(\"currency\"),myMap.get(\"amount\"));  \n    }\n}\n\nnew Map&lt;String,Object&gt; Accountmap = new HashMap&lt;&gt;();\nnew ArrayList&lt;Map&lt;String,Object&gt;&gt; finalList = new ArrayList&lt;&gt;();\n}\n//loop through your original list and seperate out individual unique accounts.\nfor(Map&lt;String,String&gt; myMap:myListOfMaps){\n     //if the accountmap is empty, fill in the first account you see\n     if(Accountmap.get(\"aacID\") == null &amp;&amp; \n     Accountmap.get(\"aacName\") == null &amp;&amp; \n     Accountmap.get(\"aacNumber\") == null){\n         Accountmap.put(\"aacID\",myMap.get(\"aacID\"));\n         Accountmap.put(\"aacName\",myMap.get(\"aacName\"));\n         Accountmap.put(\"aacNumber\",myMap.get(\"aacNumber\"));\n     }\n     //if the account info you see next is different than what you have, add the \n     //account info you have now to the final list and create a new Accountmap\n     //to hold the newest data we are seeing now.\n     else if(!(Accountmap.get(\"aacID\").equals(myMap.get(\"aacID\")) &amp;&amp; \n     Accountmap.get(\"aacName\").equals(myMap.get(\"aacName\")) &amp;&amp; \n     Accountmap.get(\"aacNumber\").equals(myMap.get(\"aacNumber\")))))\n     {\n         finalList.add(Accountmap);\n         new Map&lt;String,Object&gt; Accountmap = new HashMap&lt;&gt;();\n         Accountmap.put(\"aacID\",myMap.get(\"aacID\"));\n         Accountmap.put(\"aacName\",myMap.get(\"aacName\"));\n         Accountmap.put(\"aacNumber\",myMap.get(\"aacNumber\"));\n     }\n }\n</code></pre>\n\n<p>finally once you have all your unique accounts in your <code>finalList</code> you can then loop through it and compare their unique Ids to each entry in the <code>comparisonMap</code> so you can put in entries (<code>currencyMaps</code>) into those unique Id maps (<code>accountMaps</code>).</p>\n\n<pre><code> for(HashMap&lt;String,Object&gt; accountMap:finalList){\n     //put in the key \"currency\" and the value as a currencyMap.\n     //the currencyMaps are gotten by matching the Ids from the accountMap to the Id\n     //in the comparisonMap \n     //conveniently the ID maps to its currencyMap\n     accountMap.put(\"currencies\",comparisonMap.get(accountMap.get(\"aacId\")))\n }\n</code></pre>\n\n<h1>Notes about output</h1>\n\n<p>At the end your <code>finalList</code> would contain the list of <code>accountMaps</code> as the desired output for this question. I don't make any guarantees on the run-ability of this code but It shows a general method to achieving what you need.</p>\n\n<p>this solution assumes your accounts are listed like they are in the question. It won't work as expected if the same account info is repeated AND split between accounts down the list.\n(i. e.) nothing like:</p>\n\n<ol>\n<li>Account 1 information</li>\n<li>Account 2 information</li>\n<li>Account 1 information repeated.</li>\n</ol>\n\n<p>the last entry would cause duplicate entries in your finalList</p>\n","answer_id":51382817,"question_id":51378453},{"owner":{"profile_image":"https://www.gravatar.com/avatar/3b6dbcbcffe05e41ae00175c41af621b?s=256&d=identicon&r=PG","account_id":2315188,"user_type":"registered","user_id":2032415,"link":"https://stackoverflow.com/users/2032415/tomasz-linkowski","reputation":4406,"display_name":"Tomasz Linkowski"},"content_license":"CC BY-SA 4.0","score":2,"is_accepted":false,"last_activity_date":1531833095,"creation_date":1531833095,"body":"<p>It's best to make use of composition here - consider creating these kinds of objects:</p>\n\n<ul>\n<li><code>AccountInfo</code> with account ID, account name and account number (you would need it to have value semantics, i.e. <code>equals</code> and <code>hashCode</code> implemented - see e.g. <a href=\"https://projectlombok.org/features/EqualsAndHashCode\" rel=\"nofollow noreferrer\">@EqualsAndHashCode</a>)</li>\n<li><code>AccountBalance</code> with account currency and amount</li>\n<li><code>AccountRecord</code> with an <code>AccountInfo</code> and an <code>AccountBalance</code></li>\n<li><code>Account</code> with an <code>AccountInfo</code> and a list of <code>AccountBalance</code>s</li>\n</ul>\n\n<p>Now what you want to do <strong>simplifies</strong> to mapping a stream of <code>AccountRecord</code>s into a stream of <code>Account</code>s. This can be achieved by:</p>\n\n<ol>\n<li>Mapping your objects into <code>AccountRecord</code>s.</li>\n<li>Grouping by <code>AccountInfo</code>.</li>\n<li>Constructing an <code>Account</code> from the <code>AccountInfo</code> and a list of <code>AccountRecord</code>s.</li>\n</ol>\n\n<p>Example:</p>\n\n<pre><code>Stream&lt;AccountRecord&gt; accountStream = Stream.of(); // your data here\nList&lt;Account&gt; accountList = accountStream\n        .collect(Collectors.groupingBy(AccountRecord::getAccountInfo))\n        .entrySet().stream()\n        .map(entry -&gt; new Account(\n                entry.getKey(),\n                entry.getValue().stream()\n                        .map(AccountRecord::getAccountBalance)\n                        .collect(Collectors.toList())\n        ))\n        .collect(Collectors.toList());\n</code></pre>\n","answer_id":51382277,"question_id":51378453},{"owner":{"profile_image":"https://lh3.googleusercontent.com/-UUvglId7ROg/AAAAAAAAAAI/AAAAAAAACDY/8nEhPIFCxtU/photo.jpg?sz=256","account_id":11643394,"user_type":"registered","user_id":8527109,"link":"https://stackoverflow.com/users/8527109/l%c3%a1szl%c3%b3-stahorszki","reputation":1124,"display_name":"L&#225;szl&#243; Stahorszki"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":true,"last_activity_date":1531723834,"creation_date":1531682984,"body":"<p>Okay, so the answer to this particular case has become a bit different.</p>\n\n<p>While the <a href=\"https://stackoverflow.com/questions/51349384/java-streams-put-new-element-through-existing-stream/51349527#51349527\">answer of Tomasz Linkowski</a> seemed like a really nice solution, the main problem with it was the fact that my function is more sequential then <code>BlockingQueue</code>s would suggest, which was detrimental for readability.</p>\n\n<p>So I came up with <code>Stream.Builder</code>, which is actually just what I need and nothing more.</p>\n","answer_id":51351549,"question_id":51349384,"last_edit_date":1531723834},{"owner":{"profile_image":"https://www.gravatar.com/avatar/3b6dbcbcffe05e41ae00175c41af621b?s=256&d=identicon&r=PG","account_id":2315188,"user_type":"registered","user_id":2032415,"link":"https://stackoverflow.com/users/2032415/tomasz-linkowski","reputation":4406,"display_name":"Tomasz Linkowski"},"content_license":"CC BY-SA 4.0","score":6,"is_accepted":false,"last_activity_date":1531683189,"creation_date":1531666440,"body":"<p>In order to do what you described you'd need some kind of blocking. I'd use a <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html\" rel=\"nofollow noreferrer\"><code>BlockingQueue</code></a> (any kind would do - if you want to avoid collections, use <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html\" rel=\"nofollow noreferrer\"><code>SynchronousQueue</code></a>, which has no internal state at all), and create an infinite <code>Stream</code> from it using <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#generate-java.util.function.Supplier-\" rel=\"nofollow noreferrer\"><code>Stream.generate</code></a>.</p>\n\n<p>Example:</p>\n\n<pre><code>class StreamableQueue&lt;T&gt; {\n\n    private BlockingQueue&lt;T&gt; dataSource;\n\n    Stream&lt;T&gt; asStream() {\n        return Stream.generate(this::takeFromDataSource);\n    }\n\n    private T takeFromDataSource() {\n        try {\n            return dataSource.take();\n        } catch (InterruptedException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n}\n</code></pre>\n\n<p>Of course, the <code>BlockingQueue</code> provided as <code>dataSource</code> to this class would need to be fed elements from a different thread.</p>\n\n<hr>\n\n<p><em>EDIT</em>: A minor addition - instead of using try-catch, you can use:</p>\n\n<ul>\n<li><a href=\"https://projectlombok.org/setup/overview\" rel=\"nofollow noreferrer\">Lombok</a>'s <a href=\"https://projectlombok.org/features/SneakyThrows\" rel=\"nofollow noreferrer\"><code>@SneakyThrows</code></a> annotation on <code>takeFromDataSource()</code> method</li>\n<li>or - even better - <a href=\"https://github.com/jooq/jool\" rel=\"nofollow noreferrer\">jOOλ</a>'s <a href=\"https://www.jooq.org/products/jOO%CE%BB/javadoc/0.9.14/org/jooq/lambda/Sneaky.html#supplier-org.jooq.lambda.fi.util.function.CheckedSupplier-\" rel=\"nofollow noreferrer\"><code>Sneaky.supplier</code></a>/<a href=\"https://www.jooq.org/products/jOO%CE%BB/javadoc/0.9.14/org/jooq/lambda/Unchecked.html#supplier-org.jooq.lambda.fi.util.function.CheckedSupplier-\" rel=\"nofollow noreferrer\"><code>Unchecked.supplier</code></a> method, which simplifies the conversion to: <code>Stream.generate(Sneaky.supplier(dataSource::take))</code></li>\n</ul>\n","answer_id":51349527,"question_id":51349384,"last_edit_date":1531683189},{"owner":{"profile_image":"https://i.stack.imgur.com/VMMeP.jpg?s=256&g=1","account_id":1916831,"user_type":"registered","user_id":1729265,"link":"https://stackoverflow.com/users/1729265/mkl","reputation":91511,"display_name":"mkl"},"content_license":"CC BY-SA 4.0","score":0,"is_accepted":false,"last_activity_date":1531488802,"creation_date":1531488802,"body":"<h3>The actual issue</h3>\n\n<p>As it turned out in a comment, the actual question is</p>\n\n<blockquote>\n  <p>I think that i have work with the document first, and then, with the result of that, use the Stamper. Now my question is, how to do that, how can i get a byte array from the output that is generated by the document.</p>\n</blockquote>\n\n<p>You can get that by having the <code>Document</code>/<code>PdfWriter</code> couple write to a <code>ByteArrayOutputStream</code>:</p>\n\n<pre><code>ByteArrayOutputStream baos = new ByteArrayOutputStream();\nDocument document = new Document();\nPdfWriter writer = PdfWriter.getInstance(document,  baos);\n...\ndocument.close();\n\n...\n\nPdfReader intermediary = new PdfReader(baos.toByteArray());\nPdfStamper stamp = new PdfStamper(intermediary, output);\n...\nstamp.close();\n</code></pre>\n\n<h3>Further observations</h3>\n\n<ul>\n<li><p>You appear to have multiple versions of iText in your classpath, in particular you use both classes from the <code>com.lowagie.text.pdf</code> and from <code>com.itextpdf.text.pdf</code> packages, i.e. from a version 5.x and from a version 4.2, 2.x, or older.</p>\n\n<p>Mixing different iText versions can result in weirdest effects. I'd propose you remove all older versions from your class path and only use the most current 5.x. As you call yourself a <em>a noob in iText</em>, you should even consider switching to iText 7.x unless you have a too large existing code base based on iText 5 to maintain.</p></li>\n<li><p>You use your <code>Document</code>/<code>Writer</code> pair only to copy pages from a <code>PdfReader reader</code> and set some PDF/A markers. You should consider to use a <code>Document</code>/<code>PdfCopy</code> pair or even a <code>PdfStamper</code> for this; your solution throws away all dynamic PDF structures (annotations, ...) and all document level data (metadata, ...).</p>\n\n<p>By the way, PDF/A is more than just some document settings, tere are a number of preconditions your source PDF must already fulfill, otherwise your output won't stand a PDF/A validation.</p></li>\n</ul>\n","answer_id":51326366,"question_id":51304559},{"owner":{"profile_image":"https://www.gravatar.com/avatar/3df76fd6d85f617baaf95aeec2c078d9?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":5967476,"user_type":"registered","user_id":4690866,"link":"https://stackoverflow.com/users/4690866/eric-anderson","reputation":24635,"display_name":"Eric Anderson"},"content_license":"CC BY-SA 4.0","score":5,"is_accepted":false,"last_activity_date":1531408730,"creation_date":1531408730,"body":"<p>The headers are sent by the server before the first message, so the easy way would be to call <code>stream.hasNext()</code>, which will block waiting on a message. In many RPCs the first message comes pretty soon after the response headers, so this would work reasonably well.</p>\n\n<p>As an aside, I noticed you experimenting with <code>CallOptions</code> and <code>Context</code>:</p>\n\n<pre><code>callOptions.withOption(someHeader, \"true\");\nContext.current().withValue(Context.key(\"test\"), \"testvalue\");\n</code></pre>\n\n<p>Neither of those lines really does anything because both objects are immutable. The <code>with*</code> calls create a new instance, so you have to use the return value for the line to do anything. Also, CallOptions and Context predominantly pass information in the opposite direction, like from the client application to interceptors. To \"reverse\" the direction, the application needs to set up a value that is mutable, like AtomicReference or a callback function, and then the interceptor could interact with that value.</p>\n\n<p>If there may be a noticeable delay between when the server responds with the headers and the first message, then things get more complex. The code calling sayHello():</p>\n\n<pre><code>CompletableFuture&lt;Boolean&gt; future = new CompletableFuture&lt;&gt;();\nIterator&lt;String&gt; stream = blockingStub\n    .withOption(SomeHeaderInterceptor.SOME_HEADER, future)\n    .sayHello();\n// wait for the sayhello active header \nboolean isActive = future.get();\n</code></pre>\n\n<p>And then in the interceptor:</p>\n\n<pre><code>private static final String FULL_METHOD_NAME =\n    //\"helloworld.Greeter/SayHello\";\n    GreeterGrpc.getSayHelloMethod().getFullMethodName();\npublic static final CallOptions.Key&lt;CompletableFuture&lt;Boolean&gt;&gt; SOME_HEADER =\n    CallOptions.Key.create(\"some_header_active\", CompletableFuture.completedFuture(false));\nprivate static final Metadata.Key&lt;String&gt; SAYHELLO_ACTIVE_HEADER =\n    Metadata.Key.of(\"some_header_active\", Metadata.ASCII_STRING_MARSHALLER);\n\n@Override\npublic &lt;ReqT, RespT&gt; ClientCall&lt;ReqT, RespT&gt; interceptCall(MethodDescriptor&lt;ReqT, RespT&gt; methodDescriptor,\n                                                           CallOptions callOptions, Channel channel) {\n    CompletableFuture&lt;Boolean&gt; future = callOptions.getOption(SOME_HEADER);\n    if (!methodDescriptor.getFullMethodName().equals(FULL_METHOD_NAME)) {\n        future.complete(false);\n        return channel.newCall(methodDescriptor, callOptions);\n    }\n    return new ForwardingClientCall.SimpleForwardingClientCall&lt;ReqT, RespT&gt;(channel.newCall(methodDescriptor, callOptions)) {\n\n        @Override\n        public void start(Listener&lt;RespT&gt; responseListener, Metadata headers) {\n            super.start(new ForwardingClientCallListener.SimpleForwardingClientCallListener&lt;RespT&gt;(responseListener) {\n                @Override\n                public void onHeaders(Metadata headers) {\n                    if (!headers.containsKey(SAYHELLO_ACTIVE_HEADER)) {\n                        // Could also be future.complete(false)\n                        future.completeExceptionally(new Exception(\"some_header activation missing from header: \" + headers));\n                    } else {\n                        future.complete(true);\n                    }\n                    super.onHeaders(headers);\n                }\n\n                @Override\n                public void onClose(Status status, Metadata trailers) {\n                    // onHeaders() might not have been called, especially if there was an error\n                    if (!future.isDone()) {\n                        future.completeExceptionally(status.asRuntimeException(trailers));\n                    }\n                    super.onClose(status, trailers);\n                }\n            }, headers);\n        }\n    };\n}\n</code></pre>\n\n<p>If you only need to do validation, not actually delay, then you could avoid the delay and just let the interceptor fail the call if validation fails:</p>\n\n<pre><code>private static final String FULL_METHOD_NAME =\n    //\"helloworld.Greeter/SayHello\";\n    GreeterGrpc.getSayHelloMethod().getFullMethodName();\nprivate static final Metadata.Key&lt;String&gt; SAYHELLO_ACTIVE_HEADER =\n    Metadata.Key.of(\"some_header_active\", Metadata.ASCII_STRING_MARSHALLER);\n\n@Override\npublic &lt;ReqT, RespT&gt; ClientCall&lt;ReqT, RespT&gt; interceptCall(MethodDescriptor&lt;ReqT, RespT&gt; methodDescriptor,\n                                                           CallOptions callOptions, Channel channel) {\n    if (!methodDescriptor.getFullMethodName().equals(FULL_METHOD_NAME)) {\n        return channel.newCall(methodDescriptor, callOptions);\n    }\n    // We use context to cancel since it is thread-safe, whereas ClientCall.cancel is not\n    CancellableContext context = Context.current().withCancellation();\n    class ValidatingListener extends ForwardingClientCallListener&lt;RespT&gt; {\n        private Listener&lt;RespT&gt; responseListener;\n\n        public ValidatingListener(Listener&lt;RespT&gt; responseListener) {\n            this.responseListener = responseListener;\n        }\n\n        @Override\n        protected Listener&lt;RespT&gt; delegate() {\n            return responseListener;\n        }\n\n        @Override\n        public void onHeaders(Metadata headers) {\n            if (!headers.containsKey(SAYHELLO_ACTIVE_HEADER)) {\n                Listener&lt;RespT&gt; saved = responseListener;\n                responseListener = new Listener&lt;RespT&gt;() {}; // noop listener; throw away future events\n                Status status = Status.UNKNOWN.withDescription(\n                        \"some_header activation missing from header: \" + headers);\n                context.cancel(status.asRuntimeException());\n                saved.onClose(status, new Metadata());\n                return;\n            }\n            // Validation successful\n            super.onHeaders(headers);\n        }\n\n        @Override\n        public void onClose(Status status, Metadata trailers) {\n            context.close();\n        }\n    }\n\n    Context toRestore = context.attach();\n    try {\n        return new ForwardingClientCall.SimpleForwardingClientCall&lt;ReqT, RespT&gt;(channel.newCall(methodDescriptor, callOptions)) {\n\n            @Override\n            public void start(Listener&lt;RespT&gt; responseListener, Metadata headers) {\n                super.start(new ValidatingListener(responseListener), headers);\n            }\n        };\n    } finally {\n        context.detach(toRestore);\n    }\n}\n</code></pre>\n","answer_id":51309289,"question_id":51302774},{"owner":{"profile_image":"https://www.gravatar.com/avatar/a2c58f76d7b96b612e5da39a6c0cf74d?s=256&d=identicon&r=PG","account_id":1900921,"user_type":"registered","user_id":1716803,"link":"https://stackoverflow.com/users/1716803/luis-matos","reputation":347,"display_name":"Luis Matos","accept_rate":100},"content_license":"CC BY-SA 3.0","score":0,"is_accepted":true,"last_activity_date":1517995504,"creation_date":1517995504,"body":"<p>Actually the answer was quite easy. I've downloaded jasperstarter and was able to use JasperExportManager.exportReportToPdfStream method which already existed on jasper's library to export the pdf to \"System.out\" stream. Together with adding a new option to run this process, this makes jasperstarter to be able to allow  for redirection of the PDF's result (pipe '|' and redirect can be used directly on the program).</p>\n\n<p>I tried contact with jasperstarter's project owner to see if I can get this change commited on the master branch.</p>\n","answer_id":48660088,"question_id":48625326},{"owner":{"profile_image":"https://www.gravatar.com/avatar/7342b1a54fabea2e83217791500597b0?s=256&d=identicon&r=PG","account_id":873510,"user_type":"registered","user_id":923837,"link":"https://stackoverflow.com/users/923837/eric-lindauer","reputation":1813,"display_name":"Eric Lindauer","accept_rate":90},"content_license":"CC BY-SA 3.0","score":16,"is_accepted":false,"last_activity_date":1503581914,"creation_date":1331339605,"body":"<p>To add to the already good answers here:</p>\n\n<p><strong>Method arguments:</strong></p>\n\n<p><code>List&lt;? extends Foo&gt;</code></p>\n\n<p>good choice if you don't intend to alter the list, and only care that everything in the list is assignable to type 'Foo'.  This way, the caller can pass in a List&lt;FooSubclass&gt; and your method works. Usually the best choice.</p>\n\n<p><code>List&lt;Foo&gt;</code></p>\n\n<p>good choice if you intend to add Foo objects to the list in your method.  The caller may not pass in a List&lt;FooSubclass&gt;, as you intend to add a Foo to the List.</p>\n\n<p><code>List&lt;? super Foo&gt;</code></p>\n\n<p>good choice if you intend to add Foo objects to the list, and it's not important what else is in the list (ie, you are ok getting a List&lt;Object&gt; that contains a 'Dog' that has nothing to do with Foo).</p>\n\n<p><strong>Method return values</strong></p>\n\n<p>just like method arguments, but with the benefits reversed.  </p>\n\n<p><code>List&lt;? extends Foo&gt;</code> </p>\n\n<p>Guarantees that everything in the returned List has type 'Foo'.  It might be List&lt;FooSubclass&gt; though.  Caller cannot add to the List.  This is your go-to choice and the most common case by far.</p>\n\n<p><code>List&lt;Foo&gt;</code></p>\n\n<p>Just like List&lt;? extends Foo&gt; but also allows the caller to add to the List.  Less common.</p>\n\n<p><code>List&lt;? super Foo&gt;</code></p>\n\n<p>allows the caller to add Foo objects to the List, but does not guarantee what will be returned from list.get(0)... it could be anything from Foo to Object.  The only guarantee is that this won't be a list of 'Dog' or some other choice that would prevent list.add(foo) from being legal.  Very rare use case.</p>\n\n<p>I hope that helps.  Good luck!</p>\n\n<p>ps. To sum up... two questions... </p>\n\n<blockquote>\n  <p>do you need to add to the List?  Do you care what is in the list?</p>\n  \n  <p>yes yes - use List&lt;Foo&gt;.</p>\n  \n  <p>yes no - use List&lt;? super Foo&gt;.</p>\n  \n  <p>no yes - use &lt;? extends Foo&gt; --- most common.</p>\n  \n  <p>no no - use &lt;?&gt;.</p>\n</blockquote>\n","answer_id":9642824,"question_id":490091,"last_edit_date":1503581914},{"owner":{"profile_image":"https://i.stack.imgur.com/zw18i.png?s=256&g=1","account_id":1663234,"user_type":"registered","user_id":1531124,"link":"https://stackoverflow.com/users/1531124/ghostcat","reputation":138406,"display_name":"GhostCat","accept_rate":96},"content_license":"CC BY-SA 3.0","score":9,"is_accepted":true,"last_activity_date":1494068039,"creation_date":1494062233,"body":"<p>Just look at the javadoc:</p>\n\n<p><a href=\"https://docs.oracle.com/javase/7/docs/api/java/io/ByteArrayOutputStream.html\" rel=\"noreferrer\">ByteArrayOutputStream</a>:</p>\n\n<blockquote>\n  <p>This class implements an output stream in which the data is written into a byte array.</p>\n</blockquote>\n\n<p><a href=\"https://docs.oracle.com/javase/7/docs/api/java/io/BufferedOutputStream.html\" rel=\"noreferrer\">BufferedOutputStream</a>:</p>\n\n<blockquote>\n  <p>The class implements a buffered output stream. By setting up such an output stream, an application can write bytes to the underlying output stream without necessarily causing a call to the underlying system for each byte written.</p>\n</blockquote>\n\n<p>So, those are really two very different things:</p>\n\n<ul>\n<li>the first one you use when you know that you have some data that <strong>in the end</strong> you need as array of bytes</li>\n<li>the second one is just a <strong>wrapper</strong> around any other kind of output stream - which adds buffering.</li>\n</ul>\n\n<p>That is all there is to this!</p>\n\n<p>And if you want to experience a different behavior: create a buffered one that writes to a file, and an array one. Then just keep pushing bytes into each one. The array one will cause a memory problem at some point, the other one might not stop until all of your disk space is used up. </p>\n","answer_id":43818755,"question_id":43818630,"last_edit_date":1494068039},{"owner":{"profile_image":"https://www.gravatar.com/avatar/dbd98f264c64096af168747c3ae71a7d?s=256&d=identicon&r=PG","account_id":45934,"user_type":"registered","user_id":135589,"link":"https://stackoverflow.com/users/135589/jesper","reputation":203679,"display_name":"Jesper","accept_rate":100},"content_license":"CC BY-SA 3.0","score":8,"is_accepted":false,"last_activity_date":1494062215,"creation_date":1494062215,"body":"<p><code>ByteArrayOutputStream</code> writes bytes to a byte array in memory. Not to any other destination, such as a file or a network socket. After writing the data, you can get the byte array by calling <code>toByteArray()</code> on it.</p>\n\n<p><code>BufferedOutputStream</code> wraps another, underlying <code>OutputStream</code> and provides buffering for that underlying stream, to make I/O operations more efficient. The underlying stream can be any kind of <code>OutputStream</code>, for example one that writes to a file or a network socket.</p>\n\n<p>Why you might want to use buffering: Writing a large block of data to the file system is more efficient than writing byte by byte. If your program needs to write many small pieces of data, it's more efficient to first gather these small pieces in a buffer and then write the entire buffer to disk at once. This is what <code>BufferedOutputStream</code> does automatically for you.</p>\n","answer_id":43818750,"question_id":43818630},{"owner":{"profile_image":"https://lh6.googleusercontent.com/-KU9_wg3JofI/AAAAAAAAAAI/AAAAAAAAAfw/pczsB09dPnk/photo.jpg?sz=256","account_id":10669087,"user_type":"registered","user_id":7854661,"link":"https://stackoverflow.com/users/7854661/meepo","reputation":368,"display_name":"Meepo","accept_rate":100},"content_license":"CC BY-SA 3.0","score":1,"is_accepted":false,"last_activity_date":1492061810,"creation_date":1492061810,"body":"<p>I'm taking a computer science class, and we aren't allowed to use the for each loop. I'm not sure if it's the same with you. Note that the for each loop kind of defeats the purpose of a Queue since you want to only be handling the front and end of a queue. In my class specifically, we also want to have the queue be at it's original state before it was passed into the method without using an extra auxiliary data structure. Here's how I would go about it on a test:</p>\n\n<pre><code>public E findMaxQueueElement(Queue&lt;e&gt; queue) { //my test would ask me to return the max value\n    E max = queue.remove();\n    queue.add(max); //add it back to the end\n    for(int i=0; i&lt;queue.size()-1; i++) {\n        E current = queue.remove();\n        if (current.compareTo(max) &gt; 0) {\n            max = current;\n        }\n        queue.add(current);\n    }\n    return max;\n}\n</code></pre>\n\n<p>With the limitations I provided, this should work. I hope this helps.</p>\n","answer_id":43384296,"question_id":40877146},{"owner":{"profile_image":"https://www.gravatar.com/avatar/a42f8ff287eb5abf432ce696bf7c653b?s=256&d=identicon&r=PG","account_id":115767,"user_type":"registered","user_id":303810,"link":"https://stackoverflow.com/users/303810/lexicore","reputation":42976,"display_name":"lexicore","accept_rate":84},"content_license":"CC BY-SA 3.0","score":0,"is_accepted":false,"last_activity_date":1480460689,"creation_date":1480460689,"body":"<p>Unless the queue is not some special sorted queue like <code>PriorityQueue</code>, from the algorithmic point of view there is no better way. Since the queue does not have any intrinsic sorting properties, you have to check all the elements of the queue before you find one.</p>\n\n<p>The code is more or less OK. It will fail if the queue contains <code>null</code>. This is normally not the case, but may happen.<br>\nThe <code>MaxQueueElement</code> construct is somewhat strange.</p>\n","answer_id":40877414,"question_id":40877146},{"owner":{"profile_image":"https://i.stack.imgur.com/Mo0at.jpg?s=256&g=1","account_id":1135699,"user_type":"registered","user_id":1120793,"link":"https://stackoverflow.com/users/1120793/darshan-mehta","reputation":30287,"display_name":"Darshan Mehta","accept_rate":35},"content_license":"CC BY-SA 3.0","score":0,"is_accepted":false,"last_activity_date":1480460464,"creation_date":1480460464,"body":"<p>You can use Java 8's stream to sort the Queue, it internally uses the same algorithm but will result in less noisy code, e.g.:</p>\n\n<pre><code>public void MaxQueueElement(Queue&lt;E&gt; queue){\n    Optional&lt;E&gt; max = queue.stream()\n        .max(Comparable::compareTo);\n\n    if(max.isPresent()){\n        System.out.println(max.get());\n    }\n}\n</code></pre>\n\n<p>Another approach would be to use <code>PriorityQueue</code> with comparator and get the first element from it. e.g.:</p>\n\n<pre><code>public void MaxQueueElement2(Queue&lt;E&gt; queue){\n    PriorityQueue&lt;E&gt; pQueue = new PriorityQueue&lt;&gt;((E e1, E e2)-&gt;e1.compareTo(e2));\n    pQueue.addAll(queue);\n    System.out.println(pQueue.peek());\n\n}\n</code></pre>\n","answer_id":40877364,"question_id":40877146},{"owner":{"profile_image":"https://www.gravatar.com/avatar/44c841338e1646af9a977f1fa0e23948?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":162699,"user_type":"registered","user_id":3788176,"link":"https://stackoverflow.com/users/3788176/andy-turner","reputation":138060,"display_name":"Andy Turner","accept_rate":54},"content_license":"CC BY-SA 3.0","score":1,"is_accepted":false,"last_activity_date":1480460237,"creation_date":1480459864,"body":"<p>The only way to access all elements in a <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/Queue.html\" rel=\"nofollow noreferrer\"><code>Queue</code></a> is to use the <code>iterator()</code> method - you can't (generally) access the elements by index (as in, some implementations might, but <code>Queue</code> doesn't inherently).</p>\n\n<p>As such, all you can do is to iterate the elements one at a time, storing the current maximum element. This is exactly what you're doing here. </p>\n\n<p>There is nothing wrong with your algorithm - but the way you've implemented it could be improved:</p>\n\n<ul>\n<li>Don't do this in the constructor of a class - you don't need to construct a new instance of anything, as the maximum value already exists. Do it in a (static) method.</li>\n<li>Don't print out the result - that's of no use to man or beast. Return it to the caller.</li>\n<li>Handle the cases where the queue is empty and may contain nulls. (Look at the Javadoc of <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#max(java.util.Collection)\" rel=\"nofollow noreferrer\"><code>Collections.max</code></a> for ideas)</li>\n</ul>\n","answer_id":40877245,"question_id":40877146,"last_edit_date":1480460237},{"owner":{"profile_image":"https://i.stack.imgur.com/t2hoD.jpg?s=256&g=1","account_id":3211603,"user_type":"registered","user_id":2711488,"link":"https://stackoverflow.com/users/2711488/holger","reputation":289317,"display_name":"Holger"},"content_license":"CC BY-SA 3.0","score":4,"is_accepted":false,"last_activity_date":1475745979,"creation_date":1475745979,"body":"<p>The problem is that <code>Arrays.asList</code> is a varargs method which technically receives an array containing the arguments and due to compatibility with pre-generics code still accepts an array instead of an argument list. When passing a single array, the call is ambiguous and will be handled like a pre-varargs method invocation.</p>\n\n<p>The problem disappears when you have more than one argument:</p>\n\n<pre><code>List&lt;Object[]&gt; bar = Arrays.asList(new Object[]{\"bar\", 286}, new Object[]{\"baz\", 123});\n</code></pre>\n\n<p>If you have only one argument you can aid the compiler by inserting an explicit list element type:</p>\n\n<pre><code>List&lt;Object[]&gt; bar = Arrays.&lt;Object[]&gt;asList(new Object[]{\"bar\", 286});\n</code></pre>\n\n<p>Alternatively, you can use</p>\n\n<pre><code>List&lt;Object[]&gt; bar = Collections.singletonList(new Object[]{\"bar\", 286});\n</code></pre>\n\n<p>to create an immutable list of size one. Note that this differs from <code>Arrays.asList</code>, as the latter returns a list of fixed size but still mutable via <code>set</code>.</p>\n","answer_id":39892304,"question_id":39889498},{"owner":{"profile_image":"https://i.stack.imgur.com/EPKBc.jpg?s=256&g=1","account_id":3825349,"user_type":"registered","user_id":3172288,"link":"https://stackoverflow.com/users/3172288/george-cristian","reputation":59,"display_name":"George Cristian","accept_rate":75},"content_license":"CC BY-SA 3.0","score":1,"is_accepted":false,"last_activity_date":1475739751,"creation_date":1475739751,"body":"<p>When you use <code>List&lt;Object[]&gt; bar = Arrays.asList(new Object[]{\"bar\", 286});</code> you actually have a two dimensional Array and you cand resolve that problem by doing <code>List&lt;Object[]&gt; bar = Arrays.asList(new Object[][]{new Object[]{\"bar\",\"asd\",123}});\n</code></p>\n","answer_id":39890306,"question_id":39889498},{"owner":{"profile_image":"https://www.gravatar.com/avatar/35dbc3b24ca0fe1e2ea162b0648440aa?s=256&d=identicon&r=PG","account_id":4989128,"user_type":"registered","user_id":4011890,"link":"https://stackoverflow.com/users/4011890/noixes","reputation":1168,"display_name":"Noixes"},"content_license":"CC BY-SA 3.0","score":1,"is_accepted":false,"last_activity_date":1475739263,"creation_date":1475739263,"body":"<p>Your call:</p>\n\n<pre><code>Arrays.asList(new Object[]{\"bar\", 286});\n</code></pre>\n\n<p>creates a list out of the <code>Object[]</code>. So the data is convertet into a new <code>List&lt;Object&gt;</code>.</p>\n\n<p>So <code>Arrays.asList(new Object[]{\"bar\", 286}).get(0);</code> will return \"bar\".</p>\n\n<p>In this call:</p>\n\n<pre><code>List&lt;Object[]&gt; foo = new ArrayList&lt;&gt;();\nfoo.add(new Object[]{816, \"foo\", 2.6});\n</code></pre>\n\n<p>you are creating a <code>List&lt;Object[]&gt;</code> (2Dimensional) and add one element after it: <code>foo.add(..);</code>.\nTherefore you are adding one element consisting of an <code>Object[]</code>.\nif you now call <code>foo.get(0);</code> you will get a <code>Object[]</code> consisting of:\n816, \"foo\", 2.6</p>\n\n<p>I think you wanted to do:</p>\n\n<pre><code>Object[] oa = new Object[]{\"\"};\nObject[] ob = new Object[]{\"\"};\nList&lt;Object[]&gt; list = Arrays.asList(oa, ob);\n</code></pre>\n\n<p>If you have questions, feel free to ask me :)</p>\n","answer_id":39890152,"question_id":39889498},{"owner":{"profile_image":"https://i.stack.imgur.com/IF9uS.png?s=256&g=1","account_id":1924671,"user_type":"registered","user_id":1735406,"link":"https://stackoverflow.com/users/1735406/maroun","reputation":94541,"display_name":"Maroun","accept_rate":95},"content_license":"CC BY-SA 3.0","score":2,"is_accepted":false,"last_activity_date":1475737738,"creation_date":1475737738,"body":"<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#asList-T...-\" rel=\"nofollow\"><code>Arrays#asList</code></a> signature:</p>\n\n<pre><code>public static &lt;T&gt; List&lt;T&gt; asList(T... a)\n</code></pre>\n\n<p>The return type is <code>List&lt;T&gt;</code>. Now you should ask yourself what is <code>T</code>?</p>\n\n<p><code>T</code> is <code>Object</code>, so the return type will be <code>List&lt;Object&gt;</code>, and not <code>List&lt;Object[]&gt;</code>.</p>\n","answer_id":39889662,"question_id":39889498},{"owner":{"profile_image":"https://www.gravatar.com/avatar/22b05e50077230ba919b240af4bc13cd?s=256&d=identicon&r=PG","account_id":43861,"user_type":"registered","user_id":128397,"link":"https://stackoverflow.com/users/128397/daniel-pryden","reputation":59786,"display_name":"Daniel Pryden","accept_rate":82},"content_license":"CC BY-SA 3.0","score":7,"is_accepted":false,"last_activity_date":1475737380,"creation_date":1475737380,"body":"<p>If your list only has one element in it, <code>Collections.singletonList(new Object[] {...})</code> is a better choice, as it avoids varargs and makes the behavior more obvious at the call site.</p>\n","answer_id":39889558,"question_id":39889498},{"owner":{"profile_image":"https://i.stack.imgur.com/jXcg4.png?s=256&g=1","account_id":1263831,"user_type":"registered","user_id":1221571,"link":"https://stackoverflow.com/users/1221571/eran","reputation":388998,"display_name":"Eran","accept_rate":67},"content_license":"CC BY-SA 3.0","score":13,"is_accepted":false,"last_activity_date":1475737309,"creation_date":1475737309,"body":"<p>When you pass an array of reference types to <code>Arrays.asList</code> you get a <code>List</code> of that reference type.</p>\n\n<p>Therefore <code>Arrays.asList(new Object[]{\"bar\", 286})</code> returns a <code>List&lt;Object&gt;</code>, not a <code>List&lt;Object[]&gt;</code>.</p>\n","answer_id":39889542,"question_id":39889498},{"owner":{"profile_image":"https://www.gravatar.com/avatar/0a65b024ba8848bed1c8eab6d128b7fa?s=256&d=identicon&r=PG","account_id":9029266,"user_type":"registered","user_id":6727517,"link":"https://stackoverflow.com/users/6727517/jo73","reputation":17,"display_name":"jo73"},"content_license":"CC BY-SA 3.0","score":-1,"is_accepted":false,"last_activity_date":1471468480,"creation_date":1471459995,"body":"<p>If you don't write to the file, you'r code should work.</p>\n\n<p>If you call <code>inputStr.close();</code> the file is no longer used by java and it can be deleted.</p>\n\n<p>Pleace check, if your file is not used by any other programm. It's the best if you reboot your PC.</p>\n\n<p>If it still not works, it would be interessting to know, what res is and if your file get's sendet.</p>\n\n<hr>\n\n<p>I've read <a href=\"http://sparkjava.com/documentation.html\" rel=\"nofollow\">this part of the documentation</a> and i think this should solve your problem.</p>\n\n<p>It reads the file into a String and change the header for png images. As the http Body it uses the String of the file.</p>\n\n<p>Make sure, if you change the response type, you have to change the line <code>res.type(\"image/png\");</code> to the new one.</p>\n\n<p><a href=\"https://en.wikipedia.org/wiki/Media_type#Common_examples\" rel=\"nofollow\">Here you find the most common ones</a></p>\n\n<pre><code>File testFile = null;\n    try {\n        testFile = new File(\"C:\\\\Users\\\\stebela\\\\workspace\\\\my-app\\\\invoice\"+invNum+\".png\");\n\n    FileInputStream fin = new FileInputStream(testFile);\n\n    int charAsInt = 0;\n\n    String httpBody = \"\";\n\n    while((charAsInt = fin.read()) != -1){\n        httpBody +=(char)charAsInt;\n    }\n    fin.close();\n\n    res.body(httpBody);\n    res.type(\"image/png\");\n    res.status(200);\n\n    testFile.delete();\n\n\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    // TODO Auto-generated catch block\n    e.printStackTrace();\n}\n</code></pre>\n","answer_id":39004264,"question_id":39003958,"last_edit_date":1471468480},{"owner":{"profile_image":"https://i.stack.imgur.com/v7hd7.jpg?s=256&g=1","account_id":2513305,"user_type":"registered","user_id":2185251,"link":"https://stackoverflow.com/users/2185251/seyeon","reputation":4130,"display_name":"seyeon"},"content_license":"CC BY-SA 3.0","score":0,"is_accepted":false,"last_activity_date":1471306836,"creation_date":1471306836,"body":"<p>I think you should need this code.</p>\n\n<pre><code>try {\n}catch(IOException e) {\n} finally {\n   try {\n     if (in != null)\n      in.close();\n   }catch(Exception e) {\n   }\n}\n</code></pre>\n\n<p>or try use IOUtils.close in Apache Library.</p>\n\n<pre><code>   finally {\n     IOUtils.close(in);\n   }\n</code></pre>\n\n<p>I had a same happen. but fixed it now.</p>\n","answer_id":38964854,"question_id":10333257},{"owner":{"profile_image":"https://www.gravatar.com/avatar/1728e8d2fbb3bede60e5915c730e341a?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":3759874,"user_type":"registered","user_id":3398493,"link":"https://stackoverflow.com/users/3398493/yassine-marzougui","reputation":428,"display_name":"Yassine Marzougui"},"content_license":"CC BY-SA 3.0","score":9,"is_accepted":true,"last_activity_date":1471277758,"creation_date":1471277758,"body":"<p>You can perform database look up by extending a <em>rich</em> function for e.g. a <code>RichFlatMap</code> function, initialize the database connection once in its <code>open()</code> method and then process each event in the <code>flatMap()</code> method: </p>\n\n<pre><code>public static class DatabaseMapper extends RichFlatMapFunction&lt;Event, EncrichedEvent&gt; {\n\n    // Declare DB coonection and query statements\n\n    @Override\n    public void open(Configuration parameters) throws Exception {\n      // Initialize Database connection\n      // Prepare Query statements\n    }\n\n    @Override\n    public void flatMap(Event currentEvent, Collector&lt;EncrichedEvent&gt; out) throws Exception {\n      // look up the Database, update record, enrich event\n      out.collect(enrichedEvent);        \n    }\n})\n</code></pre>\n\n<p>And then you can use <code>DatabaseMapper</code> as follows:</p>\n\n<pre><code>stream.keyby(id)\n      .flatmap(new DatabaseMapper())\n      .addSink(..);\n</code></pre>\n\n<p>You can find <a href=\"https://github.com/dataArtisans/yahoo-streaming-benchmark/blob/master/flink-benchmarks/src/main/java/flink/benchmark/AdvertisingTopologyFlinkWindows.java#L249\" rel=\"noreferrer\">here</a> an example using cached data from Redis.</p>\n","answer_id":38958843,"question_id":38866078},{"owner":{"profile_image":"https://i.stack.imgur.com/7ge3n.png?s=256&g=1","account_id":6145482,"user_type":"registered","user_id":4791599,"link":"https://stackoverflow.com/users/4791599/markus-mitterauer","reputation":1570,"display_name":"Markus Mitterauer"},"content_license":"CC BY-SA 3.0","score":0,"is_accepted":false,"last_activity_date":1471015437,"creation_date":1471015437,"body":"<p>You could still use <code>try-with-resources</code> if you wrap <code>System.in</code> with a <code>CloseShieldInputStream</code>. </p>\n\n<p>I would also recommend using a <code>Scanner</code> instead of the <code>InputStreamReader</code> and <code>BufferedReader</code>, because of it's simplicity:</p>\n\n<pre><code>import java.util.Scanner;\nimport org.apache.commons.io.input.CloseShieldInputStream;\n\npublic class Contact {\n\n    protected String name;\n    protected String surname;\n    protected String email;\n\n    public void modify() throws IOException {\n        System.out.println(\"Previously name: \" + name);\n        System.out.println(\"Insert new name\");\n        try (Scanner sc = new Scanner(new CloseShieldInputStream(System.in))) {\n            name = sc.nextLine();\n            System.out.println(\"You've changed the name to: \" + name);\n            System.out.println(\"Previously surname: \" + surname);\n            System.out.println(\"Insert new surname\");\n            surname = sc.nextLine();\n            System.out.println(\"You've changed the surname to: \" + surname);\n            System.out.println(\"Previously e-mail: \" + email);\n            System.out.println(\"Insert new e-mail\");\n            email = sc.nextLine();\n            System.out.println(\"You've changed the e-mail to: \" + email);\n        }\n    }\n}\n\npublic class Private extends Contact {\n\n    private String cell;\n    private String skype;\n\n    @Override\n    public void modify() throws IOException {\n        super.modify();\n        System.out.println(\"Numero di cellulare precedente: \" + cell);\n        System.out.println(\"Inserire nuovo numero\");\n        try (Scanner sc = new Scanner(new CloseShieldInputStream(System.in))) {\n            cell = sc.nextLine();\n            System.out.println(\"Hai cambiato il numero in: \" + cell);\n            System.out.println(\"Contatto skype precedente: \" + skype);\n            System.out.println(\"Inserire nuovo contatto\");\n            skype = sc.nextLine();\n            System.out.println(\"Hai cambiato il contatto in: \" + skype);\n        }\n    }\n}\n</code></pre>\n\n<p>See also: <a href=\"https://stackoverflow.com/a/8204051/4791599\">Closing BufferedReader and System.in</a> </p>\n","answer_id":38921435,"question_id":38807544,"last_edit_date":1495535321},{"owner":{"profile_image":"https://i.stack.imgur.com/P2vVZ.png?s=256&g=1","account_id":529122,"user_type":"registered","user_id":415448,"link":"https://stackoverflow.com/users/415448/michael-kay","reputation":158120,"display_name":"Michael Kay","accept_rate":33},"content_license":"CC BY-SA 3.0","score":2,"is_accepted":true,"last_activity_date":1470932383,"creation_date":1470932383,"body":"<p>If you define a simple subset of XPath, for example</p>\n\n<pre><code>(\"/\" name ( \"[\" integer \"]\" )? )*\n</code></pre>\n\n<p>Then parsing it isn't very difficult, and matching it against the events in a SAX stream isn't very difficult either. (Though namespaces are always a challenge).</p>\n\n<p>But the way you have phrased the question makes me suspect that even this simplified problem requires more experience and/or computer science knowledge than you currently possess: the fact that you are already asking questions like this suggests to me that you don't have any idea of the scale of the challenge you have set yourself.</p>\n","answer_id":38901571,"question_id":38895357},{"owner":{"profile_image":"https://i.stack.imgur.com/P2vVZ.png?s=256&g=1","account_id":529122,"user_type":"registered","user_id":415448,"link":"https://stackoverflow.com/users/415448/michael-kay","reputation":158120,"display_name":"Michael Kay","accept_rate":33},"content_license":"CC BY-SA 3.0","score":4,"is_accepted":true,"last_activity_date":1470756089,"creation_date":1309965146,"body":"<p>I've done some bridging classes for this kind of thing in <a href=\"https://github.com/fidothe/saxon-he\" rel=\"nofollow\">Saxon</a>. It's open source, so you can reuse anything you find useful. Though I don't guarantee that they're complete and correct if you use them in ways other than the way Saxon uses them.</p>\n\n<p><a href=\"https://github.com/fidothe/saxon-he/blob/master/bj/net/sf/saxon/dotnet/DotNetInputStream.java\" rel=\"nofollow\">DotNetInputStream</a> maps a .NET stream to a Java InputStream.</p>\n\n<p><a href=\"https://github.com/fidothe/saxon-he/blob/master/bj/net/sf/saxon/dotnet/DotNetOutputStream.java\" rel=\"nofollow\">DotNetOutputStream</a> maps a .NET stream to a Java OutputStream. </p>\n\n<p><a href=\"https://github.com/fidothe/saxon-he/blob/master/bj/net/sf/saxon/dotnet/DotNetReader.java\" rel=\"nofollow\">DotNetReader</a> maps a .NET TextReader to a Java Reader.</p>\n\n<p><a href=\"https://github.com/fidothe/saxon-he/blob/master/bj/net/sf/saxon/dotnet/DotNetWriter.java\" rel=\"nofollow\">DotNetWriter</a> maps a .NET TextWriter to a Java Writer.</p>\n\n<p>For XML streams, Saxon has its own internal push/pull interfaces (Receiver and PullProvider respectively), and there are classes that map both of these to/from the corresponding Java and .NET interfaces.</p>\n","answer_id":6598731,"question_id":6587713,"last_edit_date":1470756089},{"owner":{"profile_image":"https://i.stack.imgur.com/3AtSv.png?s=256&g=1","account_id":2269593,"user_type":"registered","user_id":1997376,"link":"https://stackoverflow.com/users/1997376/nicolas-filotto","reputation":43917,"display_name":"Nicolas Filotto","accept_rate":100},"content_license":"CC BY-SA 3.0","score":0,"is_accepted":true,"last_activity_date":1470511049,"creation_date":1470509775,"body":"<p>Your problem is indeed due to the try-with-resource statement that closes <code>new InputStreamReader(System.in)</code> which behind the scene closes also the underlying input stream that is <code>System.in</code> (<code>in</code> is a <code>public static</code> field of <code>System</code>) such that in your <code>modify</code> method <code>System.in</code> is already closed and then cannot be read anymore this is why you get this exception.</p>\n","answer_id":38807746,"question_id":38807544,"last_edit_date":1470511049},{"owner":{"profile_image":"https://i.stack.imgur.com/8RMRJ.png?s=256&g=1","account_id":4698323,"user_type":"registered","user_id":3802631,"link":"https://stackoverflow.com/users/3802631/jan-b","reputation":6170,"display_name":"Jan B.","accept_rate":86},"content_license":"CC BY-SA 3.0","score":0,"is_accepted":true,"last_activity_date":1470225144,"creation_date":1470225144,"body":"<p>Some webservers complain if your request looks too bleak, may be because they think it was generated by machines? Typically they can tell by the headers you sent. This should already do it:</p>\n\n<pre><code>    URLConnection connection = new URL(\"http://stream.meetup.com/2/open_events\").\n                                 openConnection();\n    connection.setRequestProperty(\"User-Agent\", \"Lynx\");\n    connection.connect();\n    BufferedReader in = new BufferedReader(new InputStreamReader(\n    connection.getInputStream()));\n    String inputLine;\n    while ((inputLine = in.readLine()) != null){\n        System.out.println(inputLine);\n    }\n    in.close();\n</code></pre>\n","answer_id":38742839,"question_id":38742468},{"owner":{"profile_image":"https://www.gravatar.com/avatar/c07358920039f332b308d4caeafe9e03?s=256&d=identicon&r=PG","account_id":4295147,"user_type":"registered","user_id":3510410,"link":"https://stackoverflow.com/users/3510410/vladim%c3%adr-sch%c3%a4fer","reputation":15433,"display_name":"Vladim&#237;r Sch&#228;fer"},"content_license":"CC BY-SA 3.0","score":0,"is_accepted":false,"last_activity_date":1469804968,"creation_date":1469777340,"body":"<p>Using <code>ByteArrayOutputStream</code> means that the whole result of the diff needs to be stored in memory, all at once, instead of getting processed and garbage collected in chunks. Your Java program may have been slow due to running out of memory and performing garbage collection all the time.</p>\n\n<p>Java will be much faster at whatever task you throw at it, compared to Perl. It's a just-in-time compiled language, as opposed to an interpreted language in case of Perl. See e.g. <a href=\"http://blog.carlesmateo.com/2014/10/13/performance-of-several-languages/\" rel=\"nofollow\">http://blog.carlesmateo.com/2014/10/13/performance-of-several-languages/</a>, <a href=\"https://attractivechaos.github.io/plb/\" rel=\"nofollow\">https://attractivechaos.github.io/plb/</a> or <a href=\"https://en.wikipedia.org/wiki/Java_performance\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Java_performance</a> (comparison to other langauges).</p>\n\n<p>If you need performance, you should optimize your Java code instead of creating dependency on Perl.</p>\n","answer_id":38652955,"question_id":38648302,"last_edit_date":1469804968},{"owner":{"profile_image":"https://i.stack.imgur.com/gX53v.jpg?s=256&g=1","account_id":1257650,"user_type":"registered","user_id":1216775,"link":"https://stackoverflow.com/users/1216775/akhil-mittal","reputation":23489,"display_name":"akhil_mittal","accept_rate":54},"content_license":"CC BY-SA 3.0","score":6,"is_accepted":false,"last_activity_date":1469773660,"creation_date":1445925085,"body":"<p>I will try to answer this in detail. Before generics we were having only <code>List</code> (a raw list) and it can hold almost anything we can think of.</p>\n\n<pre><code>List rawList = new ArrayList();\nrawList.add(\"String Item\");\nrawList.add(new Car(\"VW\"));\nrawList.add(new Runnable() {\n            @Override\n            public void run() {\n               // do some work.\n            }\n        });\n</code></pre>\n\n<p>The major problem with the raw list is when we want to get any element out of such list it can only guarantee that it would be <code>Object</code> and for that reason we need to use casting as:</p>\n\n<pre><code>   Object item = rawList.get(0); // we get object without casting.\n   String sameItem = (String) rawList.get(0); // we can use casting which may fail at runtime.\n</code></pre>\n\n<p>So conclusion is a <code>List</code> can store Object (almost everything is Object in Java) and always returns an Object.</p>\n\n<h2>Generics</h2>\n\n<p>Now lets talk about generics. Consider the following example:</p>\n\n<pre><code>List&lt;String&gt; stringsList = new ArrayList&lt;&gt;();\nstringsList.add(\"Apple\");\nstringsList.add(\"Ball\");\nstringsList.add(new Car(\"Fiat\")); //error\nString stringItem = stringsList.get(0);\n</code></pre>\n\n<p>In the above case we cannot insert anything other than <code>String</code> in <code>stringsList</code> as Java compiler applies strong type checking to generic code and issues errors if the code violates type safety. And we get error when we try to insert a <code>Car</code> instance in it. Also it eliminates cast as you can check when we <code>invoke</code> get method. Check this link for understanding <a href=\"https://docs.oracle.com/javase/tutorial/java/generics/why.html\" rel=\"nofollow noreferrer\">why we should use generics</a>.</p>\n\n<h2><code>List&lt;Object&gt;</code></h2>\n\n<p>If you read about type erasure then you will understand that <code>List&lt;String&gt;, List&lt;Long&gt;, List&lt;Animal&gt;</code> etc. will be having different static types at compile time but will have same dynamic type <code>List</code> at run time.</p>\n\n<p>If we have <code>List&lt;Object&gt;</code> then it can store only <code>Object</code> in it and almost everything is <code>Object</code> in Java. So we can have:</p>\n\n<pre><code> List&lt;Object&gt; objectList = new ArrayList&lt;Object&gt;();\n objectList.add(\"String Item\");\n objectList.add(new Car(\"VW\"));\n objectList.add(new Runnable() {\n        @Override\n        public void run() {\n\n        }\n });\n Object item = objectList.get(0); // we get object without casting as list contains Object\n String sameItem = (String) objectList.get(0); // we can use casting which may fail at runtime.\n</code></pre>\n\n<p><strong>It seems <code>List&lt;Object&gt;</code> and <code>List</code> are same but actually they are not.</strong> Consider the following case:</p>\n\n<pre><code>List&lt;String&gt; tempStringList = new ArrayList&lt;&gt;();\nrawList = tempStringList; // Ok as we can assign any list to raw list.\nobjectList = tempStringList; // error as List&lt;String&gt; is not subtype of List&lt;Obejct&gt; becuase generics are not convariant.\n</code></pre>\n\n<p>You can see we can assign any list to raw list and major reason for that is to allow backward compatibility. Also <code>List&lt;String&gt;</code> will be converted to <code>List</code> at run time due to type erasure and assignment will be fine anyways.</p>\n\n<p>But <code>List&lt;Object&gt;</code> means it can only refer to a list of objects and can also store objects only. Even though <code>String</code> is subtype of <code>Object</code> we cannot assign <code>List&lt;String&gt;</code> to <code>List&lt;Object&gt;</code> as generics are not covariant like arrays. They are invariant. Also check this <a href=\"https://docs.oracle.com/javase/tutorial/java/generics/inheritance.html\" rel=\"nofollow noreferrer\">link</a> for more. Also check the difference between <code>List</code> and <code>List&lt;Object&gt;</code> in this <a href=\"https://stackoverflow.com/questions/6783316/list-vs-listobject\">question</a>.</p>\n\n<h2><code>List&lt;?&gt;</code></h2>\n\n<p>Now we are left with <code>List&lt;?&gt;</code> which basically means list of unknown type and can refer to any list. </p>\n\n<pre><code>List&lt;?&gt; crazyList = new ArrayList&lt;String&gt;();\n List&lt;String&gt; stringsList = new ArrayList&lt;&gt;();\n stringsList.add(\"Apple\");\n stringsList.add(\"Ball\");\n crazyList = stringsList; // fine\n</code></pre>\n\n<p>The character <code>?</code> is known as wildcard and <code>List&lt;?&gt;</code> is a list of unbounded wildcard. There are certain points to observe now. </p>\n\n<p>We cannot instantiate this list as the following code will not compile:</p>\n\n<pre><code>List&lt;?&gt; crazyList = new ArrayList&lt;?&gt;(); // any list.\n</code></pre>\n\n<p>We can say a wildcard parameterized type is more like an interface type as we can use it to refer to an object of compatible type but not for itself. </p>\n\n<pre><code>List&lt;?&gt; crazyList2 = new ArrayList&lt;String&gt;();\n</code></pre>\n\n<p>We cannot insert any item to it as we don't know what actually the type would be.</p>\n\n<pre><code>crazyList2.add(\"Apple\"); // error as you dont actually know what is that type.\n</code></pre>\n\n<p><strong>Now question arises When would I want to use <code>List&lt;?&gt;</code>?</strong></p>\n\n<p>You can think of this as a read-only list where you don't care about the type of the items. You can use it to invoke methods like returning the length of the list, printing it etc.</p>\n\n<pre><code> public static void print(List&lt;?&gt; list){\n        System.out.println(list);\n    }\n</code></pre>\n\n<p>You can also check the difference between <code>List, List&lt;?&gt;, List&lt;T&gt;, List&lt;E&gt;, and List&lt;Object&gt;</code> <a href=\"https://stackoverflow.com/questions/6231973/difference-between-list-list-listt-liste-and-listobject\">here</a>.</p>\n","answer_id":33360761,"question_id":490091,"last_edit_date":1495540493},{"owner":{"profile_image":"https://www.gravatar.com/avatar/8b6d35219e1808520bc238b28161e2e6?s=256&d=identicon&r=PG","account_id":309711,"user_type":"registered","user_id":622310,"link":"https://stackoverflow.com/users/622310/borodin","reputation":126352,"display_name":"Borodin","accept_rate":33},"content_license":"CC BY-SA 3.0","score":1,"is_accepted":true,"last_activity_date":1469756754,"creation_date":1469756754,"body":"<p>I'm using a tablet at present so I can't help much, but your Perl needs some work.</p>\n\n<p>You shouldn't use <code>for $line ( &lt;&gt; )</code> as that will try to read <em>all</em> of the input into a list before starting to iterate. You also don't use <code>$line</code> so you should read straight into <code>$_</code> with</p>\n\n<pre><code>while ( &lt;&gt; ) { ... }\n</code></pre>\n\n<p>There's also no need to <code>chomp</code> every line, and I dont understand why do you call <code>print</code> for every record? It's after the <code>chomp</code> so the output will be a copy of the input all on one very long line with the aggregate values at the very end.</p>\n\n<p>I suspect the Perl script is receiving the data just fine, but having trouble fitting all of the input into memory at once together with a second copy of everything as output!</p>\n","answer_id":38649262,"question_id":38648302},{"owner":{"profile_image":"https://graph.facebook.com/100007829376909/picture?type=large","account_id":4763924,"user_type":"registered","user_id":3850595,"link":"https://stackoverflow.com/users/3850595/jordi-castilla","reputation":26697,"display_name":"Jordi Castilla","accept_rate":86},"content_license":"CC BY-SA 3.0","score":1,"is_accepted":false,"last_activity_date":1467112900,"creation_date":1467109918,"body":"<p><strong>Short answer:</strong></p>\n\n<blockquote>\n  <p>Why is it legal to create <code>new Box();</code> and  <code>new Box&lt;Integer&gt;();</code> ? Is it because <code>Box</code> is comparable?</p>\n</blockquote>\n\n<p>No, it is because <code>Integer</code> or raw types in <code>new Box();</code> <strong>are comparable</strong>.</p>\n","answer_id":38073758,"question_id":38073420,"last_edit_date":1467112900},{"owner":{"profile_image":"https://www.gravatar.com/avatar/031c92b95555e2f4d080bbbfd5d8c3f2?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":8525882,"user_type":"registered","user_id":6391367,"link":"https://stackoverflow.com/users/6391367/explv","reputation":2719,"display_name":"explv"},"content_license":"CC BY-SA 3.0","score":5,"is_accepted":true,"last_activity_date":1467110540,"creation_date":1467109212,"body":"<p>You have declared the class with a generic type parameter. This is not the same as implementing the Comparable interface:</p>\n\n<pre><code>public class Box&lt;Comparable&gt; {\n\n}\n</code></pre>\n\n<p>Is the same as:</p>\n\n<pre><code>public class Box&lt;T&gt; {\n\n}\n</code></pre>\n\n<p>Which is not the same as:</p>\n\n<pre><code>public class Box&lt;T&gt; implements Comparable&lt;T&gt; {\n\n    @Override\n    public int compareTo(final T o) {\n        return 0;\n    }\n}\n</code></pre>\n\n<p>Because the type parameter is unbounded, it will accept any type. So you can use an <code>Integer</code> or a <code>String</code>:</p>\n\n<pre><code>public class Box&lt;T&gt; {\n\n    public static void main(String[] args) {\n        Box a = new Box();\n        Box b = new Box&lt;&gt;();\n        Box c = new Box&lt;Integer&gt;();\n        Box d = new Box&lt;String&gt;();\n    }\n}\n</code></pre>\n\n<p>The reason why you can create a new <code>Box</code> without specifying the type is because of backwards compatibility. The new <code>Box</code> would have the raw type <code>Box&lt;T&gt;</code>. It is <strong>bad practice</strong> and should be avoided.</p>\n\n<p>You can read more about Raw Types <a href=\"https://docs.oracle.com/javase/tutorial/java/generics/rawTypes.html\" rel=\"nofollow\">here</a></p>\n\n<p>If you wanted to enforce that the type parameter implements Comparable, then you can do:</p>\n\n<pre><code>import java.awt.*;\n\npublic class Box&lt;T extends Comparable&lt;T&gt;&gt; {\n\n    public static void main(String[] args) {\n        Box a = new Box();\n        Box b = new Box&lt;&gt;();\n        Box c = new Box&lt;Integer&gt;();\n        Box d = new Box&lt;String&gt;();\n\n        // This one will not work as Rectangle does not implement Comparable!\n        Box e = new Box&lt;Rectangle&gt;(); \n    }\n}\n</code></pre>\n","answer_id":38073499,"question_id":38073420,"last_edit_date":1467110540},{"owner":{"profile_image":"https://www.gravatar.com/avatar/f62b23a8c68c759abd2337894de7068b?s=256&d=identicon&r=PG","account_id":363966,"user_type":"registered","user_id":708036,"link":"https://stackoverflow.com/users/708036/qben","reputation":823,"display_name":"qben","accept_rate":67},"content_license":"CC BY-SA 3.0","score":6,"is_accepted":false,"last_activity_date":1459633377,"creation_date":1459633377,"body":"<p>Personally, while both of the currently top rated answers are right in a way, I do not think any of them solves the problem in an elegant, reusable way, especially if you have to do this very often.</p>\n\n<p>Suppose you have some old legacy code / dependency that you cannot change in any way (so that it would at least accept <code>List&lt;? extends Object&gt;</code> as @ReverendGonzo suggested <a href=\"https://stackoverflow.com/questions/4288084/how-to-convert-liststring-to-listobject#comment4652138_4288084\">in his comment</a>. Suppose also, that you need to talk to this legacy module a lot.</p>\n\n<p>I do not think either casting / copying all the time would be bearable on the long run. It makes your code either vulnerable to insidious bugs and hard to follow or slightly (or drastically) inefficient and hard-to-read.</p>\n\n<p>To have readable and efficient production code, it is better to encapsulate the dirty part in a separate module which deals with the otherwise harmless but ugly cast.</p>\n\n<pre><code>class ProductionCode {\n    public void doJob() {\n        List&lt;String&gt; strings = Arrays.asList(\"pear\", \"apple\", \"peach\");\n        StringMagicUtils.dealWithStrings(strings);\n    }\n}\n\nclass StringMagicUtils {\n    @SuppressWarnings(\"unchecked\")\n    public static void dealWithStrings(List&lt;String&gt; strings) {\n        ExternalStringMagic.dealWithStringsAsObjects((List) strings);\n    }\n}\n\n// Legacy - cannot edit this wonderful code below ˇˇ\nclass ExternalStringMagic {\n    public static void dealWithStringsAsObjects(List&lt;Object&gt; stringsAsObjects) {\n        // deal with them as they please\n    }\n}\n</code></pre>\n","answer_id":36379062,"question_id":4288084,"last_edit_date":1495540036},{"owner":{"profile_image":"https://www.gravatar.com/avatar/a417e43e9904379c41738adecb183289?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":4934454,"user_type":"registered","user_id":3973077,"link":"https://stackoverflow.com/users/3973077/paul-boddington","reputation":37277,"display_name":"Paul Boddington","accept_rate":77},"content_license":"CC BY-SA 3.0","score":4,"is_accepted":false,"last_activity_date":1425779411,"creation_date":1425777317,"body":"<p>It's an unchecked cast because the compiler cannot be sure that <code>next</code> is a <code>T</code>. All it knows is that it's a <code>Component</code>.</p>\n\n<p>As for your question about why casting to a <code>T</code> generates the warning, but not casting to a <code>TestComponent</code>, that's a lot more subtle. Casting to a <code>TestComponent</code> is inherently less dodgy than casting to a <code>T</code>. If <code>test</code> is not a <code>TestComponent</code>, the cast to a <code>TestComponent</code> would cause a <code>ClassCastException</code> at runtime. But this isn't the case for casting to a <code>T</code> because the type <code>T</code> is not known at runtime, due to type erasure. If you cast a <code>Component</code> that is not a <code>T</code> to a <code>T</code> and then add the result into a <code>List&lt;T&gt;</code>, you would have a <code>List&lt;T&gt;</code> where not all of the items are <code>T</code>s. This would break the guarantee that generics are supposed to provide. There would be no chance of a <code>ClassCastException</code> preventing this.</p>\n\n<p>In your case, you don't need to worry. You have checked the cast to a <code>T</code> is safe by passing the <code>Class&lt;T&gt;</code> object and doing the check. You have two choices. You <em>could</em> suppress the warning and add a comment explaining why it's safe to do so. However, a better alternative would be to write <code>return type.cast(next);</code> instead. This doesn't generate a warning because <code>type.cast(object)</code> <em>would</em> throw  a <code>ClassCastException</code> if <code>object</code> were not a <code>T</code>. </p>\n","answer_id":28922019,"question_id":28921833,"last_edit_date":1425779411},{"owner":{"profile_image":"https://www.gravatar.com/avatar/37168aa60ee0c576241bfe2514b973dc?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":5860981,"user_type":"registered","user_id":4616696,"link":"https://stackoverflow.com/users/4616696/dermot-blair","reputation":1600,"display_name":"Dermot Blair"},"content_license":"CC BY-SA 3.0","score":1,"is_accepted":false,"last_activity_date":1425776191,"creation_date":1425776191,"body":"<p>As T is a subclass of Component, every T is a Component but not every Component is a T.</p>\n\n<p>If a subclass inherits from a superclass, casting the superclass to the subclass cannot be performed successfully.</p>\n\n<p>Therefore a new Component cannot be cast to a T instance.</p>\n","answer_id":28921913,"question_id":28921833},{"owner":{"profile_image":"https://www.gravatar.com/avatar/feaeea6d2939022c49dc8b3a0510df43?s=256&d=identicon&r=PG","account_id":227423,"user_type":"registered","user_id":489088,"link":"https://stackoverflow.com/users/489088/edy-bourne","reputation":5801,"display_name":"Edy Bourne","accept_rate":72},"content_license":"CC BY-SA 3.0","score":2,"is_accepted":false,"last_activity_date":1422079383,"creation_date":1422079383,"body":"<p>Mark/reset is sort of the equivalent to pushback. <code>PushbackInputStream</code> is for when your input stream does not support buffering. So you read, then push that back into the stream.</p>\n\n<p>With <code>BufferedInputStream</code> you just <code>mark(10)</code>, read the 10 bytes with <code>read(10)</code> then call <code>reset()</code>. Now your stream is back 10 bytes and you can read it again, so you have effectively picked at it.</p>\n","answer_id":28122813,"question_id":23848081},{"owner":{"profile_image":"https://i.stack.imgur.com/Z2NYm.png?s=256&g=1","account_id":3701398,"user_type":"registered","user_id":3081018,"link":"https://stackoverflow.com/users/3081018/steffen-ullrich","reputation":116692,"display_name":"Steffen Ullrich"},"content_license":"CC BY-SA 3.0","score":1,"is_accepted":true,"last_activity_date":1410352828,"creation_date":1410352828,"body":"<p>Unless the application is tightly integrated with the web server a flush on the writer will only flush the buffers inside your application, so that the data gets send to the web server. Inside the web server there are more buffers, which are necessary to optimize the traffic by sending larger TCP packets and thus decrease the overhead for the data. And, if you use SSL there is yet another layer to watch, because your data will be encapsulated into an SSL frame which again adds overhead, so it is good to not only have a few bytes payload inside. Finally you have the buffering at the OS kernel, which might defer the sending of a small TCP packet for some time if there is hope that there will be more data.</p>\n\n<p>Please be aware, that your wish to control the buffers is against a fundamental design concept of HTTP. HTTP is based on the idea that you have a request from the client to the server and then a response from the server, ideally with a known content-length up-front. There is no idea in the original design of a response which evolves slowly and where the browser will update the display once new data arrive. The real way to get updates would be instead to let the client send another request and then send the new response back. Another way would be to use WebSockets.</p>\n","answer_id":25765745,"question_id":25759954},{"owner":{"profile_image":"https://www.gravatar.com/avatar/1e011d13433f12be7dc754180cb38ca8?s=256&d=identicon&r=PG","account_id":24269,"user_type":"registered","user_id":61624,"link":"https://stackoverflow.com/users/61624/daniel-kaplan","reputation":63231,"display_name":"Daniel Kaplan","accept_rate":60},"content_license":"CC BY-SA 3.0","score":0,"is_accepted":false,"last_activity_date":1410299216,"creation_date":1410299216,"body":"<p>I think that Scanner is the wrong tool for the job.  <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html\" rel=\"nofollow noreferrer\">The documentation says</a>: </p>\n\n<blockquote>\n  <p>A scanning operation may block waiting for input.</p>\n</blockquote>\n\n<p>Oh, and more importantly:</p>\n\n<blockquote>\n  <p>A Scanner is not safe for multithreaded use without external synchronization.</p>\n</blockquote>\n\n<p>You should use the code in this answer instead: <a href=\"https://stackoverflow.com/questions/4983065/how-to-interrupt-java-util-scanner-nextline-call\">How to interrupt java.util.Scanner nextLine call</a></p>\n","answer_id":25754047,"question_id":25753876,"last_edit_date":1495542569},{"owner":{"profile_image":"https://i.stack.imgur.com/4aUVC.jpg?s=256&g=1","account_id":455438,"user_type":"registered","user_id":853599,"link":"https://stackoverflow.com/users/853599/dante-wwww","reputation":2729,"display_name":"Dante WWWW","accept_rate":95},"content_license":"CC BY-SA 3.0","score":0,"is_accepted":false,"last_activity_date":1410095519,"creation_date":1410093313,"body":"<p>You need to ensure the order of writing/reading. If <code>write an object -&gt; write raw bytes</code> on client, then <code>read an object -&gt; read raw bytes</code> on server. When reading, <code>ObjectInputStream</code> should be able to find the boundary of the serialized object data.</p>\n\n<p>If you want to keep a socket connection long-live and use its streams multiple times, wrapping socket's <code>Output/InputStream</code> in a <code>ObjectOutput/InputStream</code> is not a good idea IMO. When you close a object stream, it closes the underlying stream as well.</p>\n\n<p>So you may want to write the length of serialized object data first (file length is contained in the object so you don't need to write it explictly), e.g. 4 bytes of BigEndian encoded <code>int</code>. Then serialize the object into a <code>ByteArrayOutputStream</code>, and write the bytes in its buffer. On the server, read 4 bytes first, decode the bytes back to an <code>int</code>, and read that many bytes into a <code>byte[]</code>, wrap the byte array with a <code>ByteArrayInputStream</code> and deserialize the object from it.</p>\n\n<p>Write like this:</p>\n\n<pre><code>......\nOutputStream out = socket.getOutputStream();\n\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nObjectOutputStream oos = new ObjectOutputStream(baos);  \n\noos.writeObject(fileInfoObject);\noos.close();\n\nbyte[] header = encodeInteger(baos.size());\n\nout.write(header, 0, 4);\nbaos.writeTo(out);\n\n// write the file to out just as your question shows\n</code></pre>\n\n<p>On the receiving side:\n    ......\n    InputStream in = socket.getInputStream();</p>\n\n<pre><code>// read the int\nbyte[] header = new byte[4];\n\nin.read(header, 0, 4);\n\nint size = decodeInteger(header);\n\n// read the object\nbyte[] objectbuf = new byte[size];\n\nint count;\n\nwhile((count += in.read(objectbuf)) &lt; size); // not sure if this works...\n\nObjectInputStram ois = new ObjectInputStream(new ByteArrayInputStream(objectbuf));\n\nObject fileInfoObject = ois.readObject();\nois.close();\n\n// read the file\nFileOutputStream fos = new FileOutputStream(new File(\"somefile\"));\n\nbyte[] buffer = new byte[8192];\ncount = 0;\nlong left = castedFileInfoObject.fileSize;\n\n// also not sure if this works, not tested.\nint maxRead = buffer.length;\n\nwhile (true) {\n    count = in.read(buffer, 0, maxRead);\n\n    left -= count;\n\n    if (left &lt; 8192) {\n        maxRead = (int)left;\n    }\n\n    fos.write(buffer, 0, count);\n\n    if (left == 0) {\n        break;\n    }\n}\n</code></pre>\n\n<p>I haven't tested the sample code in my answer.. just to show the idea.</p>\n","answer_id":25710224,"question_id":25709593,"last_edit_date":1410095519},{"owner":{"profile_image":"https://i.stack.imgur.com/QF6FZ.jpg?s=256&g=1","account_id":514320,"user_type":"registered","user_id":1392132,"link":"https://stackoverflow.com/users/1392132/5gon12eder","reputation":24520,"display_name":"5gon12eder","accept_rate":91},"content_license":"CC BY-SA 3.0","score":0,"is_accepted":false,"last_activity_date":1410092806,"creation_date":1410092806,"body":"<p>I'm not sure whether using Java's serialization mechanism is the best way to do a simple file transfer. As your question suggest, you try to avoid keeping the whole file in memory at any time. This can be done with objects using the <em>Proxy</em> pattern but if all you want to do is transfer the file, this might not be the most straight-forward solution. (Also, it will effectively tie your peer to be implemented in Java too.)</p>\n\n<p>Instead, why not take a look at an extremely successful protocol that does exactly what you need: HTTP.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Content-Type: application/octet-stream\nContent-Length: 542183\n\n542183 bytes of data follow...\n</code></pre>\n\n<p>It should not be too hard for you to write a parser for the meta-data header.</p>\n","answer_id":25710150,"question_id":25709593},{"owner":{"profile_image":"https://www.gravatar.com/avatar/0134d94401bf6997c3f513a24e758a81?s=256&d=identicon&r=PG","account_id":418291,"user_type":"registered","user_id":794763,"link":"https://stackoverflow.com/users/794763/ashu-pachauri","reputation":1283,"display_name":"Ashu Pachauri"},"content_license":"CC BY-SA 3.0","score":-1,"is_accepted":false,"last_activity_date":1410092385,"creation_date":1410089665,"body":"<p>Class MyClass should implement the Serializable interface. Then, an object of this class can be written to an ObjectOutputStream and read back from ObjectInputStream using writeObject and readObject methods (See below).</p>\n\n<p>On Client:</p>\n\n<pre><code>Socket socket = new Socket(url, port);  \nOutputStream os = socket.getOutputStream();  \nObjectOutputStream oos = new ObjectOutputStream(os);  \nMyClass obj = new Myclass();  \noos.writeObject(obj);  \nint count;\nbyte[] buffer = new byte[8192];\nwhile ((count = in.read(buffer)) &gt; 0) {\n  out.write(buffer, 0, count);\n}\n</code></pre>\n\n<p>On server:</p>\n\n<pre><code>ServerSocket sSocket = new ServerSocket(port);\nSocket socket = sSocket.accept();  \nInputStream is = socket.getInputStream();  \nObjectInputStream ois = new ObjectInputStream(is);  \nMyClass obj = (MyClass)ois.readObject();\nbyte arr[];\ntry {\n  while(arr = (byte[])ois.readObject()) {\n    //do something with arr\n  }\n} catch(java.io.EOFException) {\n  // End of data\n}\n</code></pre>\n\n<p>If you need to send more data after the file is finished, you need a way to figure out the number of bytes the file consists of. Then, you can send the number of bytes beforehand over the socket to the server. On the server, read only that many bytes of information for the file and then do the same for the rest of the data you are going to send. This strategy of pre-sending the file size is recommended and is mostly used while doing any data transfer. If you can do that, you don't have to rely on catching <code>java.io.EOFException</code> to detect end of data.</p>\n","answer_id":25709721,"question_id":25709593,"last_edit_date":1410092385},{"owner":{"profile_image":"https://www.gravatar.com/avatar/147c5a9cc1feec049c50da791ac7d144?s=256&d=identicon&r=PG","account_id":47283,"user_type":"registered","user_id":139985,"link":"https://stackoverflow.com/users/139985/stephen-c","reputation":703927,"display_name":"Stephen C","accept_rate":69},"content_license":"CC BY-SA 3.0","score":1,"is_accepted":false,"last_activity_date":1409957365,"creation_date":1409915835,"body":"<blockquote>\n  <p>Will this closes bin also ?</p>\n</blockquote>\n\n<p>No.  (The wrapped <code>InputStream</code> doesn't have a reference to the <code>BufferedInputStream</code>.  It couldn't close it, even if it \"wanted\" to.)</p>\n\n<blockquote>\n  <p>If not, is there any need to do so ? </p>\n</blockquote>\n\n<p>Not really.  (However, it is good practice to close the wrapper stream rather than the wrapped stream ... because of the \"output\" case; see below.)</p>\n\n<blockquote>\n  <p>ie : will it cause a memory leak ? </p>\n</blockquote>\n\n<p>Definitely, no.  And not a resource leak either:</p>\n\n<ul>\n<li><p>From the above, the <code>BufferedInputStream</code> is not reachable from the <code>InputStream</code>, and therefore operations on the latter cannot affect the reachability of the former.</p></li>\n<li><p>The <code>BufferedInputStream</code> does not \"own\" any external resources (e.g. file descriptors).  They are owned and managed by the <code>InputStream</code>.</p></li>\n</ul>\n\n<hr>\n\n<p>The answer would be a bit different for a <code>BufferedOuputStream</code> wrapping an <code>OutputStream</code>.  If you closed the wrapped <code>OutputStream</code> directly, you <em>could</em> lose data in the buffer that has not been flushed.</p>\n","answer_id":25684691,"question_id":25684558,"last_edit_date":1409957365},{"owner":{"profile_image":"https://i.stack.imgur.com/D0BCG.jpg?s=256&g=1","account_id":925528,"user_type":"registered","user_id":956397,"link":"https://stackoverflow.com/users/956397/pithenumber","reputation":23026,"display_name":"PiTheNumber","accept_rate":95},"content_license":"CC BY-SA 3.0","score":0,"is_accepted":false,"last_activity_date":1409927438,"creation_date":1409927438,"body":"<p>Turned out the problem was mainly the bad network connection. Everything works fine as long there is not a big packet lost. I solved it be creating a <a href=\"http://en.wikipedia.org/wiki/Wi-Fi_Direct\" rel=\"nofollow\">Wi-Fi direct</a> connection between both devices.</p>\n\n<p>Fun fact: With an active Wi-Fi direct connection you can still connect to a normal wifi hotspot. This way you create two connections what is normally not possible.</p>\n","answer_id":25688243,"question_id":25665189},{"owner":{"profile_image":"https://i.stack.imgur.com/aTFoe.jpg?s=256&g=1","account_id":1886487,"user_type":"registered","user_id":1705598,"link":"https://stackoverflow.com/users/1705598/icza","reputation":396597,"display_name":"icza","accept_rate":92},"content_license":"CC BY-SA 3.0","score":2,"is_accepted":true,"last_activity_date":1409916444,"creation_date":1409915944,"body":"<blockquote>\n  <p>Will this closes <code>bin</code> also ?</p>\n</blockquote>\n\n<p>The enclosed stream <strong>can't</strong> close the enclosing stream because it doesn't know about it.</p>\n\n<blockquote>\n  <p>If not, is there any need to do so? ie : will it cause a memory leak ?</p>\n</blockquote>\n\n<p>It will not cause a memory leak because the resources are allocated / held by the enclosed stream and are freed properly when it is closed, but the enclosing stream may implement buffering and other translation logic which if not flushed or closed, the data actually written to the enclosed stream might be incomplete/corrupt.</p>\n\n<p>So it is always recommended to flush the enclosing stream (preferred would be to close that, but if you can't, the minimum you should do is flush it).</p>\n\n<p>Flushing the enclosing stream is not always enough because for the underlying stream to contain valid data, the enclosing stream might add additional padding or formatting. An example for this is <code>ZipOutputStream</code> which in order to provide a valid zip file (zip format), it provides the <code>ZipOutputStream.finish()</code> method which besides flushing also writes additional zip-file related data (and does not close the underlying stream).</p>\n\n<p>You might find this useful:</p>\n\n<p><a href=\"https://stackoverflow.com/questions/25057422/close-encapsulating-writers-streams-for-servletoutputstream\">Close Encapsulating Writers/Streams for ServletOutputStream</a></p>\n","answer_id":25684717,"question_id":25684558,"last_edit_date":1409916444},{"owner":{"profile_image":"https://i.stack.imgur.com/BtSF5.jpg?s=256&g=1","account_id":1772508,"user_type":"registered","user_id":1617024,"link":"https://stackoverflow.com/users/1617024/batscream","reputation":19410,"display_name":"BatScream","accept_rate":60},"content_license":"CC BY-SA 3.0","score":2,"is_accepted":true,"last_activity_date":1409913438,"creation_date":1409912056,"body":"<p>An application should always write data onto the output stream of the parent process and read from the input stream of the parent process. For processes, whenever a child process is created, the parent process feeds data into the sub process input stream, and reads from the sub process output stream.</p>\n\n<blockquote>\n  <p>By default, the created subprocess does not have its own terminal or\n  console. All its standard I/O (i.e. stdin, stdout, stderr) operations\n  will be redirected to the parent process, where they can be accessed\n  via the streams obtained using the methods getOutputStream(),\n  getInputStream(), and getErrorStream(). The parent process uses these\n  streams to feed input to and get output from the subprocess.</p>\n</blockquote>\n\n<pre><code>public abstract OutputStream getOutputStream()\n</code></pre>\n\n<blockquote>\n  <p>Returns the output stream connected to the normal input of the\n  subprocess.   Output to the stream is piped into the standard input of\n  the process represented by this Process object. </p>\n</blockquote>\n\n<p>The application feeds data into Parent process output stream and that data will be piped on to the input stream of the sub process.</p>\n\n<pre><code>public abstract InputStream getInputStream()\n</code></pre>\n\n<blockquote>\n  <p>Returns the input stream connected to the normal output of the\n  subprocess. The stream obtains data piped from the standard output of\n  the process represented by this Process object.</p>\n</blockquote>\n\n<p>The parent process reads data from the output of the sub process. The Application reads the data from the parent process Input stream.</p>\n\n<p>In your code:</p>\n\n<pre><code>Process process=Runtime.getRuntime().exec(\"/usr/bin/python /home/abhijeet/test.py\");\nOutputStream  stdin = process.getOutputStream ();\nString line = \"30\" + \"\\n\";\nstdin.write(line.getBytes() );\n</code></pre>\n\n<p>The java program you run is the parent process. The python script you run is the child process.\n<code>process.getOutputStream ()</code> returns you the parent process output stream. Don't get confused here. This method <strong>does not return the sub process output stream</strong>. Read the documentation i have quoted above carefully.</p>\n\n<p>Now you write \"30\\n\" to output stream of the parent process which is now piped into the python script process input stream, and becomes available to the script for reading.</p>\n","answer_id":25683557,"question_id":25682954,"last_edit_date":1409913438},{"owner":{"profile_image":"https://www.gravatar.com/avatar/72baa38005eb8de126b2dd2e6fa1d660?s=256&d=identicon&r=PG","account_id":319873,"user_type":"registered","user_id":637853,"link":"https://stackoverflow.com/users/637853/thomas","reputation":87612,"display_name":"Thomas","accept_rate":50},"content_license":"CC BY-SA 3.0","score":1,"is_accepted":false,"last_activity_date":1409913407,"creation_date":1409910657,"body":"<p><code>OutputStream</code> as the name suggests, is for writing ouput to a stream (which might stream into a file but could also be a different type of stream).</p>\n\n<p><code>InputStream</code> likewise is used for reading input from a stream.</p>\n\n<p>You could see those classes as opposite ends of the same stream: the producer/server writes to the output stream, the consumer/client reads from the input stream.</p>\n\n<blockquote>\n  <p>standard input is used when your process reads to get information from you.</p>\n</blockquote>\n\n<p>That would describe the stream from the user's point of view. For you it is an output stream since you enter data using the console, for the process that reads that data, it is an input stream since it reads the data you entered into the stream.</p>\n\n<p>A small visuablization:</p>\n\n<pre><code>User/Console                      Process/Application\n(OutputStream) ------ data ----&gt; (InputStream)\n(InputStream)  &lt;--- feedback --- (OutputStream)   \n</code></pre>\n","answer_id":25683098,"question_id":25682954,"last_edit_date":1409913407},{"owner":{"profile_image":"https://www.gravatar.com/avatar/af53447f1243d35f8ac92bc1148b2e57?s=256&d=identicon&r=PG","account_id":4976803,"user_type":"registered","user_id":4002895,"link":"https://stackoverflow.com/users/4002895/dasar","reputation":5331,"display_name":"dasar"},"content_license":"CC BY-SA 3.0","score":0,"is_accepted":false,"last_activity_date":1409759454,"creation_date":1409759454,"body":"<p>Try to play your link by MXPlayer (see context menu->Network Stream) to check if it's correct.</p>\n","answer_id":25648660,"question_id":25648397},{"owner":{"profile_image":"https://www.gravatar.com/avatar/1da17437636870fe5df4f405e33c7ab0?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":4968814,"user_type":"registered","user_id":3997288,"link":"https://stackoverflow.com/users/3997288/raju-talisetty","reputation":50,"display_name":"Raju Talisetty"},"content_license":"CC BY-SA 3.0","score":1,"is_accepted":true,"last_activity_date":1409577690,"creation_date":1409577690,"body":"<p>Yes we can return more than one value to client  from HttpServletResponse.</p>\n\n<p>From the servlet version 2.2 Servlets have also been given the ability to send multiple values for the same response header using methods in HttpServletResponse.</p>\n\n<p>The new addHeader(String name, String value) method sets the header to the given value. While the traditional setHeader() method would replace any existing value or values, addHeader() leaves current settings alone and just sets an additional value. There's also addIntHeader(String name, int value) and addDateHeader(String name, long date).</p>\n","answer_id":25606837,"question_id":25606592},{"owner":{"profile_image":"https://www.gravatar.com/avatar/f6fd40a352ec0c6a6b1055d636541cbe?s=256&d=identicon&r=PG","account_id":220789,"user_type":"registered","user_id":478399,"link":"https://stackoverflow.com/users/478399/alexr","reputation":114430,"display_name":"AlexR","accept_rate":83},"content_license":"CC BY-SA 3.0","score":1,"is_accepted":false,"last_activity_date":1409577588,"creation_date":1409577588,"body":"<p>It depends on your client. As you mentioned servlet deals with bytes. It can write to output stream what you want using protocol that you choose. For example write <code>int</code> value that contains processing time in milliseconds followed by the byte array that contains your image. </p>\n\n<p>But what kind of client will read this stream? If it is programatic thick client you can implement similar logic there. But I believe it is expected to be a web browser that creates HTTP request because it is rendering HTML with <code>&lt;img&gt;</code> tag. But browser does not know to get additional data. </p>\n\n<p>If however your you are using AJAX to get your image you can put additional data into HTTP response header and then read its value at client side. </p>\n","answer_id":25606812,"question_id":25606592},{"owner":{"profile_image":"https://www.gravatar.com/avatar/67530d3d618cff2acc3a1bc8cb042f30?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":465863,"user_type":"registered","user_id":870248,"link":"https://stackoverflow.com/users/870248/paul-vargas","reputation":41382,"display_name":"Paul Vargas","accept_rate":100},"content_license":"CC BY-SA 3.0","score":2,"is_accepted":false,"last_activity_date":1409577297,"creation_date":1409577297,"body":"<p>In that case, you can send a header parameter.</p>\n\n<pre><code>long startTime = System.currentTimeMillis();\n\n// Generate the image\n\nlong stopTime = System.currentTimeMillis();\nlong elapsedTime = stopTime - startTime;\nresponse.setHeader(\"ElapsedTime\", elapsedTime);\n</code></pre>\n","answer_id":25606732,"question_id":25606592},{"owner":{"profile_image":"https://www.gravatar.com/avatar/ffbf4e85b8ffbae4e9039b9c0cf07bc8?s=256&d=identicon&r=PG","account_id":2496,"user_type":"registered","user_id":3474,"link":"https://stackoverflow.com/users/3474/erickson","reputation":266244,"display_name":"erickson","accept_rate":83},"content_license":"CC BY-SA 3.0","score":0,"is_accepted":true,"last_activity_date":1409341218,"creation_date":1409341218,"body":"<p>Using a <code>ByteArrayOutputStream</code> as a buffer is not super efficient, but it does make cleaner code, and that's usually more important. Here's how you could do it better:</p>\n\n<pre><code>public void B(byte[] bytes) {\n    while (out.size() &lt; bytes.length) {\n        byte[] chunk = A();\n        out.write(chunk, 0, chunk.length);\n    }\n    byte[] buffered = out.toByteArray();\n    out.reset();\n    System.arraycopy(buffered, 0, bytes, 0, bytes.length);\n    out.write(buffered, bytes.length, buffered.length - bytes.length);\n}\n</code></pre>\n","answer_id":25575133,"question_id":25571107},{"owner":{"profile_image":"https://i.stack.imgur.com/lW7ca.png?s=256&g=1","account_id":143651,"user_type":"registered","user_id":352131,"link":"https://stackoverflow.com/users/352131/durandal","reputation":19969,"display_name":"Durandal","accept_rate":77},"content_license":"CC BY-SA 3.0","score":0,"is_accepted":false,"last_activity_date":1409337233,"creation_date":1409329417,"body":"<p>Why not simply make use of ByteArrayOutputStream.writeTo(B)?</p>\n\n<p>Edit: So after dragging out what you really want to do; forget streams for this. The problem <em>could</em> be solved with streams, but its not simpler than just copying bytes. Since streams are intended for I/O, you end up with extra exception handling, but no extra value for the problem.</p>\n\n<p>Use a member variable to remember leftover bytes from previous calls to B() and just fill your array using an ordinary loop, requesting more data from A() when leftovers are out.</p>\n","answer_id":25572302,"question_id":25571107,"last_edit_date":1409337233},{"owner":{"profile_image":"https://i.stack.imgur.com/CCZZy.jpg?s=256&g=1","account_id":1257032,"user_type":"registered","user_id":1216288,"link":"https://stackoverflow.com/users/1216288/andrey","reputation":2515,"display_name":"Andrey","accept_rate":71},"content_license":"CC BY-SA 3.0","score":21,"is_accepted":false,"last_activity_date":1405606985,"creation_date":1405592385,"body":"<p>Using method reference, i found other way to pass the argument:</p>\n\n<pre><code>List&lt;String&gt; list = Arrays.asList(\"a\", \"b\", \"c\");        \nsort(list, Comparable::&lt;String&gt;compareTo);\n</code></pre>\n","answer_id":24800909,"question_id":22588518,"last_edit_date":1405606985},{"owner":{"profile_image":"https://www.gravatar.com/avatar/5cfe5f7d64f44be04f147295f5c7b88e?s=256&d=identicon&r=PG","account_id":71739,"user_type":"registered","user_id":207421,"link":"https://stackoverflow.com/users/207421/user207421","reputation":307163,"display_name":"user207421","accept_rate":82},"content_license":"CC BY-SA 3.0","score":0,"is_accepted":false,"last_activity_date":1400956126,"creation_date":1400956126,"body":"<p>If you have mark and reset you don't need pushback as well.</p>\n","answer_id":23848355,"question_id":23848081},{"owner":{"profile_image":"https://i.stack.imgur.com/qBLgl.jpg?s=256&g=1","account_id":1370027,"user_type":"registered","user_id":1305501,"link":"https://stackoverflow.com/users/1305501/nosid","reputation":49130,"display_name":"nosid","accept_rate":77},"content_license":"CC BY-SA 3.0","score":134,"is_accepted":true,"last_activity_date":1395564600,"creation_date":1395564396,"body":"<p>You can't use a <em>lambda expression</em> for a <em>functional interface</em>, if the method in the <em>functional interface</em> has <em>type parameters</em>. See <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.27.3\">section §15.27.3 in JLS8</a>:</p>\n\n<blockquote>\n  <p>A lambda expression is compatible [..] with a target type <em>T</em> if <em>T</em> is a functional interface type (§9.8) and the expression is <strong>congruent</strong> with the function type of [..] T. [..] A lambda expression is <strong>congruent</strong> with a function type if all of the following are\n  true:</p>\n  \n  <ul>\n  <li>The function type has <em>no type parameters</em>.</li>\n  <li>[..]</li>\n  </ul>\n</blockquote>\n","answer_id":22588738,"question_id":22588518,"last_edit_date":1395564600},{"owner":{"profile_image":"https://www.gravatar.com/avatar/f54e86d83eea6143ecc70a485f4e6044?s=256&d=identicon&r=PG","account_id":1853886,"user_type":"registered","user_id":1679863,"link":"https://stackoverflow.com/users/1679863/rohit-jain","reputation":210617,"display_name":"Rohit Jain","accept_rate":77},"content_license":"CC BY-SA 3.0","score":6,"is_accepted":true,"last_activity_date":1391529387,"creation_date":1391529387,"body":"<p>Both the <code>ArrayList&lt;String&gt;</code> and <code>ArrayList&lt;MyCustomObject&gt;</code> have same erasure <code>ArrayList</code>. Thus, both the constructors will have same signature at runtime, and hence that exception, as you have a duplicate constructor there.</p>\n\n<p>If you want the constructor to take different types of <code>ArrayList</code>, then you can either use <em>unbounded wildcard</em> as in:</p>\n\n<pre><code>public OpponentListAdapter(Context c, ArrayList&lt;?&gt; l) {}\n</code></pre>\n\n<p>that will work for both the array lists, or make your constructor generic, giving a type parameter.</p>\n","answer_id":21557178,"question_id":21556925},{"owner":{"profile_image":"https://www.gravatar.com/avatar/34791a4919530f068710a35c7a558600?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":3218357,"user_type":"registered","user_id":2716383,"link":"https://stackoverflow.com/users/2716383/pedromss","reputation":2453,"display_name":"pedromss","accept_rate":57},"content_license":"CC BY-SA 3.0","score":1,"is_accepted":false,"last_activity_date":1391529363,"creation_date":1391529363,"body":"<p>You have two constructors with the same signature, constructor1(Context, ArrayList), constructor2(Context, ArrayList), meaning the constructors are the same.</p>\n","answer_id":21557169,"question_id":21556925},{"owner":{"profile_image":"https://www.gravatar.com/avatar/f4e5e5b29cd5c7b59e176d8e3bee3bd4?s=256&d=identicon&r=PG&f=y&so-version=2","account_id":3452279,"user_type":"registered","user_id":2891664,"link":"https://stackoverflow.com/users/2891664/radiodef","reputation":37360,"display_name":"Radiodef","accept_rate":100},"content_license":"CC BY-SA 3.0","score":2,"is_accepted":false,"last_activity_date":1388272096,"creation_date":1388272096,"body":"<p>In general, Java generics are not appropriate for math.</p>\n\n<p>In Java:</p>\n\n<ul>\n<li>Generics are object only.</li>\n<li>There are no mathematical operators for objects.</li>\n</ul>\n\n<p>It looks like you can perform math on objects because you can do something like this:</p>\n\n<pre><code>Integer a = 1;\nInteger b = 2;\nInteger c = a + b;\n</code></pre>\n\n<p>But that is only due to autoboxing. What actually happens is the compiler replaces that code with this:</p>\n\n<pre><code>Integer a = new Integer(1);\nInteger b = new Integer(3);\nInteger c = Integer.valueOf(a.intValue() + b.intValue());\n</code></pre>\n\n<p>With generics you can specify a bound so that your type must be Number or a subtype of it:</p>\n\n<pre><code>static &lt;N extends Number&gt; N multiply(N n1, N n2) {\n    return n1 * n2; // but you cannot do this because the type is not known\n                    // so the compiler cannot do autoboxing\n}\n</code></pre>\n\n<p>If a supertype is known, you <em>can</em> call methods on them so you can do this as has been pointed out:</p>\n\n<pre><code>static &lt;N extends Number&gt; double multiply(N n1, N n2) {\n    return n1.doubleValue() * n2.doubleValue();\n}\n</code></pre>\n\n<p>But that is no different than the following:</p>\n\n<pre><code>static double multiply(double n1, double n2) {\n    return n1 * n2;\n}\n</code></pre>\n\n<p>Except that the generic version can, for example, take BigDecimal as an argument which will of course not provide a reliable result (see <a href=\"http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#doubleValue%28%29\" rel=\"nofollow\">BigDecimal#doubleValue</a>). (Neither will Long for that matter.)</p>\n\n<p>If you were really determined you could program your own number classes and use polymorphism. Otherwise use overloads or (best of all) stick to one type.</p>\n","answer_id":20820362,"question_id":20819824},{"owner":{"profile_image":"https://www.gravatar.com/avatar/46129117115e53dc8229f938120209c8?s=256&d=identicon&r=PG","account_id":2906108,"user_type":"registered","user_id":2491410,"link":"https://stackoverflow.com/users/2491410/meno-hochschild","reputation":42988,"display_name":"Meno Hochschild","accept_rate":100},"content_license":"CC BY-SA 3.0","score":4,"is_accepted":true,"last_activity_date":1388269525,"creation_date":1388268230,"body":"<p>Maybe this is your intention:</p>\n\n<pre><code>public static &lt;N extends Number&gt; double multiply(N x, N y){\n    return x.doubleValue() * y.doubleValue();\n}\n</code></pre>\n\n<p>Although I must also say that the generic use of Number instead of concrete immutable value types like java primitive <code>double</code> is probably not so healthy because in the example above the arguments could even be of different types, for example Integer and Double.</p>\n\n<p><strong>Attention:</strong></p>\n\n<p>I confirm, the arguments can be of different types as given signature above. So the answer of Bohemian is wrong. I have tested it just now (but knew it already before). The compiler only guarantees that both arguments are of type Number, nothing else.</p>\n\n<p>In order to assert the same argument types the compiler needs self-referencing generics. This feature is not fulfilled by Number-class (that is &lt;N extends Number&lt;N&gt;&gt; is unfortunately not possible). That is why I consider the whole Number approach as not really healthy. Here a test code which everyone can execute:</p>\n\n<pre><code>Integer x = Integer.valueOf(10);\nDouble y = new Double(2.5);\nSystem.out.println(multiply(x, y));\n// Output: 25.0\n</code></pre>\n","answer_id":20819856,"question_id":20819824,"last_edit_date":1388269525},{"owner":{"profile_image":"https://www.gravatar.com/avatar/d84b558fd67be10d5a718fb94231909d?s=256&d=identicon&r=PG","account_id":93689,"user_type":"moderator","user_id":256196,"link":"https://stackoverflow.com/users/256196/bohemian","reputation":415951,"display_name":"Bohemian","accept_rate":77},"content_license":"CC BY-SA 3.0","score":1,"is_accepted":false,"last_activity_date":1388268458,"creation_date":1388268458,"body":"<p>You can specify a <em>bound</em> to your type by coding <code>&lt;T extends Number&gt;</code>:</p>\n\n<pre><code>public static double &lt;T extends Number&gt; multiply(T x, T y){\n    return x.doubleValue() * y.doubleValue();\n}\n</code></pre>\n\n<p>Which restricts the Number types to being the <em>same</em> type, eg an Integer and an Integer, but not an Integer and a Long.</p>\n\n<p>but you don't need generics at all:</p>\n\n<pre><code>public static double multiply(Number x, Number y){\n    return x.doubleValue() * y.doubleValue();\n}\n</code></pre>\n\n<p>Which allows any two Numbers, eg an Integer and a Long.</p>\n","answer_id":20819888,"question_id":20819824},{"owner":{"profile_image":"https://www.gravatar.com/avatar/12498da6c3667977d2d6a318f0fe4162?s=256&d=identicon&r=PG","account_id":3600890,"user_type":"registered","user_id":3004221,"link":"https://stackoverflow.com/users/3004221/sebastian-h%c3%b6ffner","reputation":1894,"display_name":"Sebastian H&#246;ffner","accept_rate":100},"content_license":"CC BY-SA 3.0","score":0,"is_accepted":false,"last_activity_date":1385242854,"creation_date":1385242854,"body":"<p>I bet somehow it is possible to reopen it, since considering the JavaDoc \"it is already opened\". Of course it has to be opened by default, but I am not aware of a method to reopen it. I can imagine using some natives, fiddling around with exec or probably really some simple stuff will help. </p>\n\n<p>If the stream gets closed, nothing special happens. I just tried it. It works as with any other stream. You only lose your System.in, which is kind of ... sad itself.</p>\n\n<p>There is most presumably some locking involved. Without synchronizing you could get dirty reads and such stuff.</p>\n\n<p>But: You. Do. Not. Want. To. Close. Your. Standard. Input. Stream. Period.</p>\n","answer_id":20168247,"question_id":20168089},{"owner":{"profile_image":"https://i.stack.imgur.com/kOdrM.jpg?s=256&g=1","account_id":3050905,"user_type":"registered","user_id":2585483,"link":"https://stackoverflow.com/users/2585483/juniar","reputation":1309,"display_name":"Juniar","accept_rate":50},"content_license":"CC BY-SA 3.0","score":0,"is_accepted":false,"last_activity_date":1381441209,"creation_date":1381441209,"body":"<p>List &lt; Object > is meant to pass input type parameter of an Object. While List &lt; ? > represents Wildcard type. The wildcard &lt; ? > is of Unknown parameter type. The wildcard cannot be used as a type argument for a generic method and cannot be used to create a generic instance of a class. Wildcard can be used to extend a subtype class, List &lt; ? extends Number >. To relax the restriction of an Object type and in this case to relax \"Number\" Object type.</p>\n","answer_id":19306727,"question_id":490091},{"owner":{"profile_image":"https://i.stack.imgur.com/cEOYD.jpg?s=256&g=1","account_id":1649504,"user_type":"registered","user_id":1520364,"link":"https://stackoverflow.com/users/1520364/karthik-t","reputation":31606,"display_name":"Karthik T","accept_rate":70},"content_license":"CC BY-SA 3.0","score":2,"is_accepted":false,"last_activity_date":1376637777,"creation_date":1376637380,"body":"<p>Take a look at this <a href=\"http://rickyclarkson.blogspot.sg/2008/06/cross-language-generics-trick-java.html\" rel=\"nofollow\">post</a> The person tries to simulate this by chaining <code>pair</code></p>\n\n<p>He does this</p>\n\n<pre><code>Pair&lt;String, Integer&gt; pair = Pairs.pair(\"hello\", 5);\nPair&lt;Double, Pair&lt;String, Integer&gt;&gt; withDouble = Pairs.pair(3.0, pair);\n</code></pre>\n\n<p>And proposes the below to make it cleaner</p>\n\n<pre><code>public class Pair&lt;T, U&gt; { ...\n  public &lt;V&gt; Pair&lt;V, Pair&lt;T, U&gt;&gt; prepend(V v) {\n   return pair(v, this); } }\n</code></pre>\n\n<p>So that it becomes  </p>\n\n<pre><code>Pair&lt;Double, Pair&lt;String, Integer&gt;&gt; pair = Pairs.pair(\"hello\", 5).prepend(3.0);\n</code></pre>\n\n<p>Note: you might need to write <code>Pair</code>.</p>\n\n<p>Note: Seems he actually endorses javatuples at the end..</p>\n\n<p><strong>More relevant:</strong></p>\n\n<p>After reading your comment, this more obvious solution presents itself.\nMultidimensional maps, much like multimensional arrays</p>\n\n<pre><code>Map&lt;XKey, Map&lt;YKey, Value&gt; &gt;\n</code></pre>\n","answer_id":18267838,"question_id":18267714,"last_edit_date":1376637777},{"owner":{"profile_image":"https://www.gravatar.com/avatar/fcbd636611fa901a055a84a16c463219?s=256&d=identicon&r=PG","account_id":165405,"user_type":"registered","user_id":388827,"link":"https://stackoverflow.com/users/388827/qqilihq","reputation":10947,"display_name":"qqilihq","accept_rate":89},"content_license":"CC BY-SA 3.0","score":1,"is_accepted":false,"last_activity_date":1376637323,"creation_date":1376637323,"body":"<p>If you need variable-length keys, you can use <a href=\"http://www.javatuples.org\" rel=\"nofollow\">javatuples</a> or something similar, which wrap an arbitrary number and arbitrary types of arguments (they provide tuples until a length of 10):</p>\n\n<p><code>Map&lt;Triplet&lt;Double,Float,Integer&gt;, Object&gt; mapWithCombinedKeys = ...</code></p>\n","answer_id":18267824,"question_id":18267714},{"owner":{"profile_image":"https://i.stack.imgur.com/orQBI.jpg?s=256&g=1","account_id":1987213,"user_type":"registered","user_id":1782094,"link":"https://stackoverflow.com/users/1782094/anju-singh","reputation":367,"display_name":"Anju Singh","accept_rate":17},"content_license":"CC BY-SA 3.0","score":0,"is_accepted":false,"last_activity_date":1371040838,"creation_date":1371040838,"body":"<p>To reduce this kind of overhead, the Java platform implements buffered I/O streams. Buffered input streams read data from a memory area known as a buffer; the native input API is called only when the buffer is empty. Similarly, buffered output streams write data to a buffer, and the native output API is called only when the buffer is full.</p>\n","answer_id":17065759,"question_id":1721387},{"owner":{"profile_image":"https://www.gravatar.com/avatar/ca0419a87ed241ade95637dd8ae2e061?s=256&d=identicon&r=PG","account_id":2047472,"user_type":"registered","user_id":1827250,"link":"https://stackoverflow.com/users/1827250/lyz","reputation":548,"display_name":"lyz"},"content_license":"CC BY-SA 3.0","score":0,"is_accepted":false,"last_activity_date":1356301120,"creation_date":1356301120,"body":"<p>The problem is that your client is waiting for the a line feed '\\n' that server doesn't send. In the client you have inFromServer.readLine() and in the server side you have  outToClient.writeBytes(children[0]) so you have to change it to outToClient.writeBytes(children[0] + \"\\n\") as suggested by Reimeus. The method readLine from BufferedReader class blocks until it reads a \"\\n\".</p>\n","answer_id":14015150,"question_id":11592617},{"owner":{"profile_image":"https://i.stack.imgur.com/UPzx8.png?s=256&g=1","account_id":974068,"user_type":"registered","user_id":995926,"link":"https://stackoverflow.com/users/995926/rekire","reputation":47448,"display_name":"rekire","accept_rate":90},"content_license":"CC BY-SA 4.0","score":13,"is_accepted":true,"last_activity_date":1355950658,"creation_date":1355950342,"body":"<p>Have a look for CipherInputStream and CipherOutputStream.</p>\n<blockquote>\n<p>A <strong>CipherInputStream</strong> is composed of an InputStream and a Cipher so that read() methods return data that are read in from the underlying InputStream but have been additionally processed by the Cipher. The Cipher must be fully initialized before being used by a CipherInputStream.</p>\n<p>For example, if the Cipher is initialized for decryption, the CipherInputStream will attempt to read in data and decrypt them, before returning the decrypted data.</p>\n<p>This class adheres strictly to the semantics, especially the failure semantics, of its ancestor classes java.io.FilterInputStream and java.io.InputStream. This class has exactly those methods specified in its ancestor classes, and overrides them all. Moreover, this class catches all exceptions that are not thrown by its ancestor classes. In particular, the skip method skips, and the available method counts only data that have been processed by the encapsulated Cipher.</p>\n<p>It is crucial for a programmer using this class not to use methods that are not defined or overriden in this class (such as a new method or constructor that is later added to one of the super classes), because the design and implementation of those methods are unlikely to have considered security impact with regard to CipherInputStream.</p>\n</blockquote>\n<hr />\n<blockquote>\n<p>A <strong>CipherOutputStream</strong> is composed of an OutputStream and a Cipher so that write() methods first process the data before writing them out to the underlying OutputStream. The cipher must be fully initialized before being used by a CipherOutputStream.</p>\n<p>For example, if the cipher is initialized for encryption, the CipherOutputStream will attempt to encrypt data before writing out the encrypted data.</p>\n<p>This class adheres strictly to the semantics, especially the failure semantics, of its ancestor classes java.io.OutputStream and java.io.FilterOutputStream. This class has exactly those methods specified in its ancestor classes, and overrides them all. Moreover, this class catches all exceptions that are not thrown by its ancestor classes.</p>\n<p>It is crucial for a programmer using this class not to use methods that are not defined or overriden in this class (such as a new method or constructor that is later added to one of the super classes), because the design and implementation of those methods are unlikely to have considered security impact with regard to CipherOutputStream.</p>\n</blockquote>\n","answer_id":13960971,"question_id":13960927,"last_edit_date":1592644375},{"owner":{"profile_image":"https://i.stack.imgur.com/SwKRE.png?s=256&g=1","account_id":1129042,"user_type":"registered","user_id":1115554,"link":"https://stackoverflow.com/users/1115554/micha","reputation":48154,"display_name":"micha","accept_rate":100},"content_license":"CC BY-SA 3.0","score":2,"is_accepted":false,"last_activity_date":1355950365,"creation_date":1355950365,"body":"<p>You can use <a href=\"http://docs.oracle.com/javase/7/docs/api/javax/crypto/CipherOutputStream.html\" rel=\"nofollow\">CipherOutputStream</a> and <a href=\"http://docs.oracle.com/javase/7/docs/api/javax/crypto/CipherInputStream.html\" rel=\"nofollow\">CipherInputStream</a> to encrypt or decrypt Input/OutputStreams</p>\n","answer_id":13960977,"question_id":13960927},{"owner":{"profile_image":"https://www.gravatar.com/avatar/c9ca93d5233a833392cd5a2eac860ab3?s=256&d=identicon&r=PG","account_id":74042,"user_type":"registered","user_id":212952,"link":"https://stackoverflow.com/users/212952/tomas-narros","reputation":13420,"display_name":"Tomas Narros"},"content_license":"CC BY-SA 3.0","score":1,"is_accepted":true,"last_activity_date":1355743096,"creation_date":1355743096,"body":"<p>Wrap the ByteArrayInputStream adding the funcionality you need.</p>\n\n<p>As an example:</p>\n\n<pre><code>public class MyBAIsWrapper implements InputStream {\n\n   private ByteArrayInputStream wrapped;\n\n   public MyBAIsWrapper(byte[] data) {\n       wrapped=new ByteArrayInputStream(data);\n   }\n\n   //added method to refresh with new data\n   public void renew(byte[] newData) {\n       wrapped=new ByteArrayInpurStream(newData);\n   }\n\n   //implement the InputStreamMethods calling the corresponding methos on wrapped\n   public int read() throws IOException {\n      return wrapped.read();\n   }\n\n   public int read(byte[] b) throws IOException {\n       return wrapped.read(b);\n   }\n\n   //and so on\n\n}\n</code></pre>\n\n<p>Then, change your initialization code:</p>\n\n<pre><code>byte[] a = new byte[4096];\nbis = new MyBAIsWrapper(a);\nsession.setTermIn(bis);\n//here, you could do somethin similar for OoutpuStream if needed, or keep the same initialization...\nbos = new ByteArrayOutputStream();\nsession.setTermOut(bos);\n/* Attach the TermSession to the EmulatorView. */\nmEmulatorView.attachSession(session);\n</code></pre>\n\n<p>And change the onDataReceived method to renew the input stream data:</p>\n\n<pre><code>public void onDataReceived(int id, byte[] data)\n{\n    //cast added to keep original code structure \n    //I recomend define the bis attribute as the MyBAIsWrapper type in this case\n    ((MyBAIsWrapper)bis).renew(data);\n}\n</code></pre>\n","answer_id":13913097,"question_id":13911931},{"owner":{"profile_image":"https://www.gravatar.com/avatar/6d92bc5bd8593901fe891fb27ebbe069?s=256&d=identicon&r=PG","account_id":2122286,"user_type":"registered","user_id":1885297,"link":"https://stackoverflow.com/users/1885297/user1885297","reputation":586,"display_name":"user1885297"},"content_license":"CC BY-SA 3.0","score":3,"is_accepted":true,"last_activity_date":1355597419,"creation_date":1355597419,"body":"<p>The client is waiting for a line (ie. terminated by a return/newline character) whereas server is not sending this. You could add the newline yourself in Server:</p>\n\n<pre><code>while ((readLine = read.readLine()) != null) {\n  write.write(readLine+\"\\n\");\n  write.flush();\n}\n</code></pre>\n","answer_id":13895115,"question_id":13894613},{"owner":{"profile_image":"https://www.gravatar.com/avatar/2e4b97eb3a431948c6f9c018fb04e0cc?s=256&d=identicon&r=PG","account_id":60096,"user_type":"registered","user_id":179630,"link":"https://stackoverflow.com/users/179630/gerrytan","reputation":40513,"display_name":"gerrytan","accept_rate":64},"content_license":"CC BY-SA 3.0","score":1,"is_accepted":true,"last_activity_date":1355489159,"creation_date":1355489159,"body":"<p>Objects in java are passed by reference, hence if you do</p>\n\n<pre><code>bos = new ByteArrayOutputStream(data.length)\n</code></pre>\n\n<p>You're essentially throwing away the previous outputstream and creating a new one.</p>\n\n<p>Try keeping reference to your input and output stream and write data into it, eg:</p>\n\n<pre><code>bos.write(data);\n</code></pre>\n","answer_id":13878988,"question_id":13878768},{"owner":{"profile_image":"https://www.gravatar.com/avatar/4f4a7b3635dc3e513cffd8645df0890f?s=256&d=identicon&r=PG","account_id":2014980,"user_type":"registered","user_id":1802512,"link":"https://stackoverflow.com/users/1802512/hoaz","reputation":9943,"display_name":"hoaz","accept_rate":80},"content_license":"CC BY-SA 3.0","score":1,"is_accepted":true,"last_activity_date":1354992410,"creation_date":1354992410,"body":"<p>I would create two BAOS instances, one for stamper, another for stitching.</p>\n\n<p>Your problem is that you write single BAOS to itself after stamping and this mixes content.</p>\n","answer_id":13780673,"question_id":13768362},{"owner":{"profile_image":"https://www.gravatar.com/avatar/e8fd8a77c68c729e498eb4b996e7fe04?s=256&d=identicon&r=PG","account_id":484013,"user_type":"registered","user_id":899427,"link":"https://stackoverflow.com/users/899427/davz","reputation":1530,"display_name":"Davz","accept_rate":83},"content_license":"CC BY-SA 3.0","score":13,"is_accepted":true,"last_activity_date":1345638544,"creation_date":1345638544,"body":"<p>I've been able to stream data to my third-party API using the following Scala controller code:</p>\n\n<pre><code>def uploadFile() = \n    Action( parse.multipartFormData(myPartHandler) ) \n    {\n      request =&gt; Ok(\"Done\")\n    }\n\ndef myPartHandler: BodyParsers.parse.Multipart.PartHandler[MultipartFormData.FilePart[Result]] = {\n        parse.Multipart.handleFilePart {\n          case parse.Multipart.FileInfo(partName, filename, contentType) =&gt;\n            //Still dirty: the path of the file is in the partName...\n            String path = partName;\n\n            //Set up the PipedOutputStream here, give the input stream to a worker thread\n            val pos:PipedOutputStream = new PipedOutputStream();\n            val pis:PipedInputStream  = new PipedInputStream(pos);\n            val worker:UploadFileWorker = new UploadFileWorker(path,pis);\n            worker.contentType = contentType.get;\n            worker.start();\n\n            //Read content to the POS\n            Iteratee.fold[Array[Byte], PipedOutputStream](pos) { (os, data) =&gt;\n              os.write(data)\n              os\n            }.mapDone { os =&gt;\n              os.close()\n              Ok(\"upload done\")\n            }\n        }\n   }\n</code></pre>\n\n<p>The UploadFileWorker is a really simple Java class that contains the call to the thrid-party API.</p>\n\n<pre><code>public class UploadFileWorker extends Thread {\nString path;\nPipedInputStream pis;\n\npublic String contentType = \"\";\n\npublic UploadFileWorker(String path, PipedInputStream pis) {\n    super();\n    this.path = path;\n    this.pis = pis;\n}\n\npublic void run() {\n    try {\n        myApi.store(pis, path, contentType);\n        pis.close();\n    } catch (Exception ex) {\n        ex.printStackTrace();\n        try {pis.close();} catch (Exception ex2) {}\n    }\n}\n</code></pre>\n\n<p>}</p>\n\n<p>It's not completely perfect because I would have preferred to recover the path as a parameter to the Action but I haven't been able to do so. I thus have added a piece of javascript that updates the name of the input field (and thus the partName) and it does the trick.</p>\n","answer_id":12073180,"question_id":12066993},{"owner":{"profile_image":"https://i.stack.imgur.com/TgXEW.png?s=256&g=1","account_id":794766,"user_type":"registered","user_id":871026,"link":"https://stackoverflow.com/users/871026/reimeus","reputation":158675,"display_name":"Reimeus","accept_rate":76},"content_license":"CC BY-SA 3.0","score":3,"is_accepted":true,"last_activity_date":1342879915,"creation_date":1342878719,"body":"<p>You should flush the data from your client output stream in your server:</p>\n\n<pre><code>outToClient.writeBytes(children[0] + \"\\n\");\noutToClient.flush();\n// etc.\n</code></pre>\n","answer_id":11592767,"question_id":11592617,"last_edit_date":1342879915},{"owner":{"profile_image":"https://www.gravatar.com/avatar/4143c51b65350247de84a33eb8a9b46c?s=256&d=identicon&r=PG","account_id":880980,"user_type":"registered","user_id":244365,"link":"https://stackoverflow.com/users/244365/paulmurraycbr","reputation":1190,"display_name":"PaulMurrayCbr","accept_rate":25},"content_license":"CC BY-SA 3.0","score":0,"is_accepted":false,"last_activity_date":1342582822,"creation_date":1342582822,"body":"<p><code>List, List&lt;?&gt;, and List&lt;? extends Object&gt;</code> are the same thing. The second is more explicit. For a list of this type, you cannot know what types are legal to put into it, and you don't know anything about the types you can get out of it, except that they will be objects.</p>\n\n<p><code>List&lt;Object&gt;</code> specifically means that the list contains any sort of object.</p>\n\n<p>Let's say we make a list of <code>Foo</code>:</p>\n\n<pre><code>List&lt;Foo&gt; foos= new ArrayList&lt;Foo&gt;();\n</code></pre>\n\n<p>It is not legal to put a <code>Bar</code> into foos.</p>\n\n<pre><code>foos.add(new Bar()); // NOT OK!\n</code></pre>\n\n<p>It is always legal to put anything into a <code>List&lt;Object&gt;</code>. </p>\n\n<pre><code>List&lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\nobjs.add(new Foo());\nobjs.add(new Bar());\n</code></pre>\n\n<p>But you mustn't be allowed to put a <code>Bar</code> into a <code>List&lt;Foo&gt;</code> - that's the whole point. So that means that this:</p>\n\n<pre><code>List&lt;Object&gt; objs = foos; // NOT OK!\n</code></pre>\n\n<p>is not legal.</p>\n\n<p>But it's ok to say that foos is a list of something but we don't know specifically what it is:</p>\n\n<pre><code>List&lt;?&gt; dontKnows = foos;\n</code></pre>\n\n<p>But that then means that it must be prohibited to go</p>\n\n<pre><code>dontKnows.add(new Foo()); // NOT OK\ndontKnows.add(new Bar()); // NOT OK\n</code></pre>\n\n<p>because the variable dontKnows does't know what types are legal.</p>\n","answer_id":11533966,"question_id":490091},{"owner":{"profile_image":"https://www.gravatar.com/avatar/1841c9223703ce79ececdd17a5188ec1?s=256&d=identicon&r=PG","account_id":1302541,"user_type":"registered","user_id":1252169,"link":"https://stackoverflow.com/users/1252169/luca","reputation":4233,"display_name":"Luca"},"content_license":"CC BY-SA 3.0","score":4,"is_accepted":true,"last_activity_date":1335444040,"creation_date":1335444040,"body":"<p>It seems a bug related to java chunked handling. Many solved by reading one byte at a time and put the read in a try-catch for EOFException.</p>\n","answer_id":10333621,"question_id":10333257},{"owner":{"profile_image":"https://www.gravatar.com/avatar/ded1c591320cc2be6aa8109d02a74640?s=256&d=identicon&r=PG","account_id":195025,"user_type":"registered","user_id":437679,"link":"https://stackoverflow.com/users/437679/martin-algesten","reputation":13170,"display_name":"Martin Algesten","accept_rate":63},"content_license":"CC BY-SA 2.5","score":29,"is_accepted":false,"last_activity_date":1290802115,"creation_date":1290800460,"body":"<p>Any java collection is just a collection of objects be it string or other. The type argument is just sugar. Depending on situation, such as dealing with very large lists, you may just want to convert it - obviously risking mixing two different types of objects in the same list.</p>\n\n<pre><code>List&lt;Object&gt; objectList = (List)stringList;\n</code></pre>\n\n<p>And put a @SuppressWarning to get rid of nasties...</p>\n","answer_id":4288129,"question_id":4288084,"last_edit_date":1290802115},{"owner":{"profile_image":"https://www.gravatar.com/avatar/94066dfa49c2feb14706cb081848fda7?s=256&d=identicon&r=PG","account_id":10836,"user_type":"registered","user_id":20654,"link":"https://stackoverflow.com/users/20654/oscarryz","reputation":196641,"display_name":"OscarRyz","accept_rate":80},"content_license":"CC BY-SA 2.5","score":1,"is_accepted":false,"last_activity_date":1290800513,"creation_date":1290800513,"body":"<pre><code>List&lt;Object&gt; ofObjects = new ArrayList&lt;Object&gt;(ofStrings);\n</code></pre>\n\n<p>as in:</p>\n\n<pre><code>import java.util.*;\nclass C { \n  public static void main( String[] args ) { \n     List&lt;String&gt; s = new ArrayList&lt;String&gt;();\n     s.add(\"S\");\n     List&lt;Object&gt; o = new ArrayList&lt;Object&gt;(s);\n     o.add( new Object() );\n     System.out.println(  o );\n\n  }\n}\n</code></pre>\n\n<p>As an alternative you can try the <code>addAll</code> method, if the list of objects is an existing list.</p>\n","answer_id":4288138,"question_id":4288084},{"owner":{"profile_image":"https://www.gravatar.com/avatar/c8d80416510ccfb160d59c96d062707d?s=256&d=identicon&r=PG","account_id":114151,"user_type":"registered","user_id":300311,"link":"https://stackoverflow.com/users/300311/erick-robertson","reputation":32353,"display_name":"Erick Robertson","accept_rate":88},"content_license":"CC BY-SA 2.5","score":103,"is_accepted":true,"last_activity_date":1290800387,"creation_date":1290800387,"body":"<p>Pass the <code>List&lt;String&gt;</code> as a parameter to the constructor of a new <code>ArrayList&lt;Object&gt;</code>.</p>\n\n<pre><code>List&lt;Object&gt; objectList = new ArrayList&lt;Object&gt;(stringList);\n</code></pre>\n\n<p>Any <code>Collection</code> can be passed as an argument to the constructor as long as its type extends the type of the <code>ArrayList</code>, as <code>String</code> extends <code>Object</code>.  The constructor takes a <code>Collection</code>, but <code>List</code> is a subinterface of <code>Collection</code>, so you can just use the <code>List&lt;String&gt;</code>.</p>\n","answer_id":4288124,"question_id":4288084},{"owner":{"profile_image":"https://www.gravatar.com/avatar/32373e3d6ddf18b71b26edac43b03c56?s=256&d=identicon&r=PG","account_id":196062,"user_type":"registered","user_id":439317,"link":"https://stackoverflow.com/users/439317/riley-lark","reputation":20700,"display_name":"Riley Lark","accept_rate":84},"content_license":"CC BY-SA 2.5","score":4,"is_accepted":false,"last_activity_date":1290800325,"creation_date":1290800325,"body":"<p>This is pretty inefficient, but at least you don't have to write a lot of code~</p>\n\n<pre><code>List&lt;String&gt; stringList = new ArrayList&lt;String&gt;();\nList&lt;Object&gt; objectList = Arrays.asList(stringList.toArray());\n</code></pre>\n","answer_id":4288119,"question_id":4288084},{"owner":{"profile_image":"https://www.gravatar.com/avatar/fe85bc40e37968d4ea24785740f5da6a?s=256&d=identicon&r=PG","account_id":27004,"user_type":"registered","user_id":70795,"link":"https://stackoverflow.com/users/70795/mark","reputation":28823,"display_name":"Mark","accept_rate":56},"content_license":"CC BY-SA 2.5","score":8,"is_accepted":true,"last_activity_date":1258034664,"creation_date":1258023023,"body":"<p>From the BufferedInputStream javadoc:</p>\n\n<blockquote>\n  <p>A BufferedInputStream adds functionality to another input stream-namely, the ability to buffer the input and to support the mark and reset  methods. When the BufferedInputStream  is created, an internal buffer array is created. As bytes from the stream are read or skipped, the internal buffer is refilled as necessary from the contained input stream, many bytes at a time. The mark  operation remembers a point in the input stream and the reset operation causes all the bytes read since the most recent mark operation to be reread before new bytes are taken from the contained input stream. </p>\n</blockquote>\n\n<p>Internally a buffer array is used and instead of reading bytes individually from the underlying input stream enough bytes are read to fill the buffer. This generally results in faster performance as less reads are required on the underlying input stream.</p>\n\n<p>The opposite is then true for BufferedOutputStream.</p>\n\n<p>mark() and reset() could be used as follows:</p>\n\n<pre><code>1 BufferedInputStream bis = new BufferedInputStream(is);\n2 byte[] b = new byte[4];\n3 bis.read(b); // read 4 bytes into b\n4 bis.mark(10); // mark the stream at the current position - we can read 10 bytes before the mark point becomes invalid\n5 bis.read(b); // read another 4 bytes into b\n6 bis.reset(); // resets the position in the stream back to when mark was called\n7 bis.read(b); // re-read the same 4 bytes as line 5 into b\n</code></pre>\n\n<p>To explain mark/reset some more...</p>\n\n<p>The BufferInputStream internally remembers the current position in the buffer. As you read bytes the position will increment. A call to mark(10) will save the current position. Subsequent calls to read will continue to increment the current position but a call to reset will set the current position back to its value when mark was called.</p>\n\n<p>The argument to mark specifies how many bytes you can read after calling mark before the mark position gets invalidated. Once the mark position is invalidated you can no longer call reset to return to it. </p>\n\n<p>For example, if mark(2) had been used in line 4 above an IOException would be thrown when reset() is called on line 6 as the mark position would have been invalidated since we read more than 2 bytes.</p>\n","answer_id":1721400,"question_id":1721387,"last_edit_date":1258034664},{"owner":{"profile_image":"https://www.gravatar.com/avatar/0a3ebfa875a483fe998a0e2b4910e31e?s=256&d=identicon&r=PG","account_id":43033,"user_type":"registered","user_id":125604,"link":"https://stackoverflow.com/users/125604/ajk","reputation":126,"display_name":"AJK"},"content_license":"CC BY-SA 2.5","score":8,"is_accepted":false,"last_activity_date":1258024902,"creation_date":1258024902,"body":"<p>Buffered Readers/Writers/InputStreams/OutputStreams read and write to the OS in large chunks for optimization. In case of writers and outputstreams, the data is buffered in memory until there is enough collected to write out a big chunk. In case of readers and inputstreams, a large chunk is read form disk/network/... into the buffer and all reads are done from that buffer until the buffer is empty, and a new chunk is read in.</p>\n\n<p>DataInputStream is indeed byte based. The readLine method is deprecated. Internally it reads bytes from disk/network/... byte-for-byte until it has collected a complete line. So this stream could be sped up by using a BufferedInputStream as it's source, such that the bytes for the line are read from the in-memory buffer instead of directly from disk.</p>\n","answer_id":1721544,"question_id":1721387},{"owner":{"profile_image":"https://www.gravatar.com/avatar/9a116dfd0007cb23dc3ce48503c2b93b?s=256&d=identicon&r=PG","account_id":2164,"user_type":"registered","user_id":2979,"link":"https://stackoverflow.com/users/2979/tendayi-mawushe","reputation":25680,"display_name":"Tendayi Mawushe"},"content_license":"CC BY-SA 2.5","score":5,"is_accepted":false,"last_activity_date":1258024853,"creation_date":1258023926,"body":"<p>With un-buffered I/O each read or write request is passed directly to the Operating System. Java's buffered I/O streams read and write data to their own memory buffer (usually a byte array). Calls to the Operating System are only made when the buffer is empty (when doing reads) or the buffer is full (when doing writes). It is sometimes a good idea to flush the buffer manually after critical points in your application.</p>\n\n<p>Since the Operating System API calls may result in disk access, network activity and the like, this can be quite expensive. Using buffers to batch the native Operating System I/O into larger chunks often significantly improves performance.</p>\n","answer_id":1721464,"question_id":1721387,"last_edit_date":1258024853},{"owner":{"profile_image":"https://i.stack.imgur.com/gJMJK.jpg?s=256&g=1","account_id":4627,"user_type":"registered","user_id":7034,"link":"https://stackoverflow.com/users/7034/henning","reputation":16143,"display_name":"Henning","accept_rate":100},"content_license":"CC BY-SA 2.5","score":2,"is_accepted":false,"last_activity_date":1258023055,"creation_date":1258023055,"body":"<p>Buffered streams write or read data in larger chunks by – nomen est omen – <a href=\"http://en.wikipedia.org/wiki/Data_buffer\" rel=\"nofollow noreferrer\">buffering</a>. Depending on the underlying stream, this can increase performance dramatically.</p>\n\n<p>From <a href=\"http://java.sun.com/javase/6/docs/api/java/io/BufferedOutputStream.html\" rel=\"nofollow noreferrer\">java.io.BufferedOutputStream</a>'s Javadocs:</p>\n\n<blockquote>\n  <p>By setting up such an output stream,\n  an application can write bytes to the\n  underlying output stream without\n  necessarily causing a call to the\n  underlying system for each byte\n  written.</p>\n</blockquote>\n","answer_id":1721403,"question_id":1721387},{"owner":{"profile_image":"https://www.gravatar.com/avatar/f1463ac968a26c990eccf12ac6cc8eb4?s=256&d=identicon&r=PG","account_id":2539,"user_type":"registered","user_id":3542,"link":"https://stackoverflow.com/users/3542/rob","reputation":48119,"display_name":"Rob"},"content_license":"CC BY-SA 2.5","score":15,"is_accepted":false,"last_activity_date":1257785485,"creation_date":1233190929,"body":"<p>I refer you to the excellent <a href=\"http://java.sun.com/docs/books/tutorial/java/generics/index.html\" rel=\"noreferrer\">Java Generics tutorial</a>, and the <a href=\"http://java.sun.com/docs/books/tutorial/extra/generics/index.html\" rel=\"noreferrer\">\"advanced\" Generics tutorial</a>, both available from Sun Microsystems. Another great resource is the <a href=\"http://oreilly.com/catalog/9780596527754\" rel=\"noreferrer\">Java Generics and Collections</a> book.</p>\n","answer_id":490103,"question_id":490091,"last_edit_date":1257785485},{"owner":{"profile_image":"https://www.gravatar.com/avatar/94066dfa49c2feb14706cb081848fda7?s=256&d=identicon&r=PG","account_id":10836,"user_type":"registered","user_id":20654,"link":"https://stackoverflow.com/users/20654/oscarryz","reputation":196641,"display_name":"OscarRyz","accept_rate":80},"content_license":"CC BY-SA 2.5","score":0,"is_accepted":false,"last_activity_date":1233193551,"creation_date":1233193551,"body":"<blockquote>\n  <p><em>When would I want to use</em></p>\n</blockquote>\n\n<pre><code>public void CanYouGiveMeAnAnswer( List l ){}\n</code></pre>\n\n<p>When you cant to do all the casting your self.</p>\n\n<blockquote>\n  <p><em>When would I want to use</em></p>\n</blockquote>\n\n<pre><code>public void CanYouGiveMeAnAnswer( List l&lt;Object&gt; ){}\n</code></pre>\n\n<p>When you want to restrict the type of the List. For instance, this would be an invalid argument.</p>\n\n<pre><code> new ArrayList&lt;String&gt;();\n</code></pre>\n\n<blockquote>\n  <p><em>When would I want to use</em></p>\n</blockquote>\n\n<pre><code>public void CanYouGiveMeAnAnswer( List l&lt;?&gt; ){}\n</code></pre>\n\n<p>Mostly never.</p>\n","answer_id":490211,"question_id":490091},{"owner":{"profile_image":"https://www.gravatar.com/avatar/94066dfa49c2feb14706cb081848fda7?s=256&d=identicon&r=PG","account_id":10836,"user_type":"registered","user_id":20654,"link":"https://stackoverflow.com/users/20654/oscarryz","reputation":196641,"display_name":"OscarRyz","accept_rate":80},"content_license":"CC BY-SA 2.5","score":42,"is_accepted":false,"last_activity_date":1233193144,"creation_date":1233192659,"body":"<p>In my own simple terms:</p>\n\n<blockquote>\n  <p>List</p>\n</blockquote>\n\n<p>Would declare an ordinary collection, can hold any type, and will always return Object.</p>\n\n<blockquote>\n  <p>List&lt;Object&gt;</p>\n</blockquote>\n\n<p>Will create a list that can hold any type of object, but can only get assigned a another <em>List&lt;Object&gt;</em> </p>\n\n<p>For instance this doesn't work;</p>\n\n<pre><code>List&lt;Object&gt; l = new ArrayList&lt;String&gt;();\n</code></pre>\n\n<p>Of course you can add anything but only can pull Object.</p>\n\n<pre><code>List&lt;Object&gt; l = new ArrayList&lt;Object&gt;();\n\nl.add( new Employee() );\nl.add( new String() );\n\nObject o = l.get( 0 );\nObject o2 = l.get( 1 );\n</code></pre>\n\n<p>Finally </p>\n\n<blockquote>\n  <p>List&lt;?></p>\n</blockquote>\n\n<p>Will let you assign any type, including </p>\n\n<pre><code>List &lt;?&gt; l = new ArrayList(); \nList &lt;?&gt; l2 = new ArrayList&lt;String&gt;();\n</code></pre>\n\n<p>This would be called collection of <em>unknown</em> and since the common denominator of <em>unknown</em> is Object you will be able to fetch Objects ( a coincidence ) </p>\n\n<p>The importance of <em>unknown</em> comes when its used with subclassing:</p>\n\n<pre><code>List&lt;? extends Collection&gt; l = new ArrayList&lt;TreeSet&gt;(); // compiles\n\nList&lt;? extends Collection&gt; l = new ArrayList&lt;String&gt;(); // doesn't,\n// because String is not part of *Collection* inheritance tree. \n</code></pre>\n\n<p>I hope using Collection as the type doesn't create confusion, that was the only tree that came to my mind.</p>\n\n<p>The difference here, is that l is a collection of <em>unknow</em> that belongs to the <em>Collection</em> hierarchy.</p>\n","answer_id":490181,"question_id":490091,"last_edit_date":1233193144},{"owner":{"profile_image":"https://www.gravatar.com/avatar/528394f867632bcca8497088cd71a6d4?s=256&d=identicon&r=PG","account_id":9757,"user_type":"registered","user_id":18154,"link":"https://stackoverflow.com/users/18154/fabian-steeg","reputation":45128,"display_name":"Fabian Steeg","accept_rate":100},"content_license":"CC BY-SA 2.5","score":1,"is_accepted":false,"last_activity_date":1233192579,"creation_date":1233192579,"body":"<p>I'd put it this way: While <code>List</code> and <code>List&lt;Object&gt;</code> can contain any type of objects, <code>List&lt;?&gt;</code> contains elements of an unknown type, but once that type is captured, it can only contain elements of that type. Which is why it is the only type safe variant of those three, and therefore generally preferable.</p>\n","answer_id":490178,"question_id":490091},{"owner":{"profile_image":"https://www.gravatar.com/avatar/7e4008352df551afc7748ba3f71b3e9d?s=256&d=identicon&r=PG","account_id":21852,"user_type":"registered","user_id":53444,"link":"https://stackoverflow.com/users/53444/tim","reputation":19896,"display_name":"Tim","accept_rate":70},"content_license":"CC BY-SA 2.5","score":0,"is_accepted":false,"last_activity_date":1233191858,"creation_date":1233191112,"body":"<p>To complement the tutorials mentioned by Rob, here's a wikibook explaining the topic:<br>\n<a href=\"http://en.wikibooks.org/wiki/Java_Programming/Generics\" rel=\"nofollow noreferrer\">http://en.wikibooks.org/wiki/Java_Programming/Generics</a></p>\n\n<hr>\n\n<p>Edit:</p>\n\n<ol>\n<li><p>No restrictions on type of items in list</p></li>\n<li><p>Items in list must extend Object</p></li>\n<li><p>Wildcard used by itself, so it matches anything</p></li>\n</ol>\n\n<p>Would it be naive of me to conclude at this point that there's hardly any/no difference at all?</p>\n","answer_id":490114,"question_id":490091,"last_edit_date":1233191858},{"owner":{"profile_image":"https://www.gravatar.com/avatar/3d184a8ef609eaabcaabd0dd19196a74?s=256&d=identicon&r=PG","account_id":23143,"user_type":"registered","user_id":57752,"link":"https://stackoverflow.com/users/57752/eddie","reputation":53986,"display_name":"Eddie","accept_rate":73},"content_license":"CC BY-SA 2.5","score":3,"is_accepted":false,"last_activity_date":1233191697,"creation_date":1233191697,"body":"<p>The shortest possible explanation is:  The second item is a list that can hold any type, and you can add objects to it:</p>\n\n<pre><code>List&lt;Object&gt;\n</code></pre>\n\n<p>The first item you list is treated as essentially equivalent to this, except you will get compiler warnings because it is a \"raw type\".</p>\n\n<pre><code>List\n</code></pre>\n\n<p>The third is a list that can hold any type, but you cannot add anything to it:</p>\n\n<pre><code>List&lt;?&gt; \n</code></pre>\n\n<p>Basically, you use the second form (<code>List&lt;Object&gt;</code>) when you truly have a list that can contain any object and you want to be able to add elements to the list.  You use the third form (<code>List&lt;?&gt;</code>)when you receive the list as a method return value and you will iterate over the list but never add anything to it   Never use the first form (<code>List</code>) in new code compiling under Java 5 or later.</p>\n","answer_id":490140,"question_id":490091},{"owner":{"profile_image":"https://www.gravatar.com/avatar/83fd7d4059fec16d3f138f4f351b6423?s=256&d=identicon&r=PG","account_id":7808,"user_type":"registered","user_id":13687,"link":"https://stackoverflow.com/users/13687/john-gardner","reputation":24390,"display_name":"John Gardner"},"content_license":"CC BY-SA 2.5","score":4,"is_accepted":false,"last_activity_date":1233191609,"creation_date":1233191609,"body":"<p>Simplest explanation which is not \"RTFM\":</p>\n\n<pre><code>List\n</code></pre>\n\n<p>Will generate lots of compiler warnings, but is mostly equivalent to:</p>\n\n<pre><code>List&lt;Object&gt;\n</code></pre>\n\n<p>While:</p>\n\n<pre><code>List&lt;?&gt;\n</code></pre>\n\n<p>basically means its something generic, but you don't know what the generic type is.  Its great for getting rid of compiler warnings when you cant modify the return types of other things that just returned List.  Its much more useful in the form:</p>\n\n<pre><code>List&lt;? extends SomeOtherThing&gt;\n</code></pre>\n","answer_id":490137,"question_id":490091}]